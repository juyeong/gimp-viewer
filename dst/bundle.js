!function(e){function t(e){delete installedChunks[e]}function n(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script");n.type="text/javascript",n.charset="utf-8",n.src=p.p+""+e+"."+b+".hot-update.js",t.appendChild(n)}function r(e){return e=e||1e4,new Promise(function(t,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,o=p.p+""+b+".hot-update.json";r.open("GET",o,!0),r.timeout=e,r.send(null)}catch(e){return n(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+o+" timed out."));else if(404===r.status)t();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+o+" failed."));else{try{var e=JSON.parse(r.responseText)}catch(e){return void n(e)}t(e)}}})}function o(e){var t=_[e];if(!t)return p;var n=function(n){return t.hot.active?(_[n]?_[n].parents.indexOf(e)<0&&_[n].parents.push(e):(S=[e],m=n),t.children.indexOf(n)<0&&t.children.push(n)):(console.warn("[HMR] unexpected require("+n+") from disposed module "+e),S=[]),p(n)};for(var r in p)Object.prototype.hasOwnProperty.call(p,r)&&"e"!==r&&Object.defineProperty(n,r,function(e){return{configurable:!0,enumerable:!0,get:function(){return p[e]},set:function(t){p[e]=t}}}(r));return n.e=function(e){function t(){j--,"prepare"===O&&(A[e]||f(e),0===j&&0===C&&l())}return"ready"===O&&a("prepare"),j++,p.e(e).then(t,function(e){throw t(),e})},n}function i(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:m!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._acceptedDependencies[e[r]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:s,apply:d,status:function(e){if(!e)return O;k.push(e)},addStatusHandler:function(e){k.push(e)},removeStatusHandler:function(e){var t=k.indexOf(e);t>=0&&k.splice(t,1)},data:E[e]};return m=void 0,t}function a(e){O=e;for(var t=0;t<k.length;t++)k[t].call(null,e)}function c(e){return+e+""===e?+e:e}function s(e){if("idle"!==O)throw new Error("check() is only allowed in idle status");return g=e,a("check"),r(x).then(function(e){if(!e)return a("idle"),null;D={},A={},R=e.c,w=e.h,a("prepare");var t=new Promise(function(e,t){v={resolve:e,reject:t}});y={};return f(0),"prepare"===O&&0===j&&0===C&&l(),t})}function u(e,t){if(R[e]&&D[e]){D[e]=!1;for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(y[n]=t[n]);0==--C&&0===j&&l()}}function f(e){R[e]?(D[e]=!0,C++,n(e)):A[e]=!0}function l(){a("ready");var e=v;if(v=null,e)if(g)Promise.resolve().then(function(){return d(g)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in y)Object.prototype.hasOwnProperty.call(y,n)&&t.push(c(n));e.resolve(t)}}function d(n){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];e.indexOf(r)<0&&e.push(r)}}if("ready"!==O)throw new Error("apply() is only allowed in ready status");n=n||{};var o,i,s,u,f,l={},d=[],h={},m=function(){console.warn("[HMR] unexpected require("+g.moduleId+") to disposed module")};for(var v in y)if(Object.prototype.hasOwnProperty.call(y,v)){f=c(v);var g;g=y[v]?function(e){for(var t=[e],n={},o=t.slice().map(function(e){return{chain:[e],id:e}});o.length>0;){var i=o.pop(),a=i.id,c=i.chain;if((u=_[a])&&!u.hot._selfAccepted){if(u.hot._selfDeclined)return{type:"self-declined",chain:c,moduleId:a};if(u.hot._main)return{type:"unaccepted",chain:c,moduleId:a};for(var s=0;s<u.parents.length;s++){var f=u.parents[s],l=_[f];if(l){if(l.hot._declinedDependencies[a])return{type:"declined",chain:c.concat([f]),moduleId:a,parentId:f};t.indexOf(f)>=0||(l.hot._acceptedDependencies[a]?(n[f]||(n[f]=[]),r(n[f],[a])):(delete n[f],t.push(f),o.push({chain:c.concat([f]),id:f})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}(f):{type:"disposed",moduleId:v};var x=!1,T=!1,k=!1,C="";switch(g.chain&&(C="\nUpdate propagation: "+g.chain.join(" -> ")),g.type){case"self-declined":n.onDeclined&&n.onDeclined(g),n.ignoreDeclined||(x=new Error("Aborted because of self decline: "+g.moduleId+C));break;case"declined":n.onDeclined&&n.onDeclined(g),n.ignoreDeclined||(x=new Error("Aborted because of declined dependency: "+g.moduleId+" in "+g.parentId+C));break;case"unaccepted":n.onUnaccepted&&n.onUnaccepted(g),n.ignoreUnaccepted||(x=new Error("Aborted because "+f+" is not accepted"+C));break;case"accepted":n.onAccepted&&n.onAccepted(g),T=!0;break;case"disposed":n.onDisposed&&n.onDisposed(g),k=!0;break;default:throw new Error("Unexception type "+g.type)}if(x)return a("abort"),Promise.reject(x);if(T){h[f]=y[f],r(d,g.outdatedModules);for(f in g.outdatedDependencies)Object.prototype.hasOwnProperty.call(g.outdatedDependencies,f)&&(l[f]||(l[f]=[]),r(l[f],g.outdatedDependencies[f]))}k&&(r(d,[g.moduleId]),h[f]=m)}var j=[];for(i=0;i<d.length;i++)f=d[i],_[f]&&_[f].hot._selfAccepted&&j.push({module:f,errorHandler:_[f].hot._selfAccepted});a("dispose"),Object.keys(R).forEach(function(e){!1===R[e]&&t(e)});for(var A,D=d.slice();D.length>0;)if(f=D.pop(),u=_[f]){var I={},q=u.hot._disposeHandlers;for(s=0;s<q.length;s++)(o=q[s])(I);for(E[f]=I,u.hot.active=!1,delete _[f],delete l[f],s=0;s<u.children.length;s++){var L=_[u.children[s]];L&&((A=L.parents.indexOf(f))>=0&&L.parents.splice(A,1))}}var P,U;for(f in l)if(Object.prototype.hasOwnProperty.call(l,f)&&(u=_[f]))for(U=l[f],s=0;s<U.length;s++)P=U[s],(A=u.children.indexOf(P))>=0&&u.children.splice(A,1);a("apply"),b=w;for(f in h)Object.prototype.hasOwnProperty.call(h,f)&&(e[f]=h[f]);var N=null;for(f in l)if(Object.prototype.hasOwnProperty.call(l,f)&&(u=_[f])){U=l[f];var B=[];for(i=0;i<U.length;i++)if(P=U[i],o=u.hot._acceptedDependencies[P]){if(B.indexOf(o)>=0)continue;B.push(o)}for(i=0;i<B.length;i++){o=B[i];try{o(U)}catch(e){n.onErrored&&n.onErrored({type:"accept-errored",moduleId:f,dependencyId:U[i],error:e}),n.ignoreErrored||N||(N=e)}}}for(i=0;i<j.length;i++){var H=j[i];f=H.module,S=[f];try{p(f)}catch(e){if("function"==typeof H.errorHandler)try{H.errorHandler(e)}catch(t){n.onErrored&&n.onErrored({type:"self-accept-error-handler-errored",moduleId:f,error:t,orginalError:e,originalError:e}),n.ignoreErrored||N||(N=t),N||(N=e)}else n.onErrored&&n.onErrored({type:"self-accept-errored",moduleId:f,error:e}),n.ignoreErrored||N||(N=e)}}return N?(a("fail"),Promise.reject(N)):(a("idle"),new Promise(function(e){e(d)}))}function p(t){if(_[t])return _[t].exports;var n=_[t]={i:t,l:!1,exports:{},hot:i(t),parents:(T=S,S=[],T),children:[]};return e[t].call(n.exports,n,n.exports,o(t)),n.l=!0,n.exports}var h=window.webpackHotUpdate;window.webpackHotUpdate=function(e,t){u(e,t),h&&h(e,t)};var m,v,y,w,g=!0,b="94bf49952e9edf24a429",x=1e4,E={},S=[],T=[],k=[],O="idle",C=0,j=0,A={},D={},R={},_={};p.m=e,p.c=_,p.d=function(e,t,n){p.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},p.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return p.d(t,"a",t),t},p.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},p.p="",p.h=function(){return b},o(7)(p.s=7)}([function(e,t,n){"use strict";function r(e){return"[object Array]"===T.call(e)}function o(e){return"[object ArrayBuffer]"===T.call(e)}function i(e){return"undefined"!=typeof FormData&&e instanceof FormData}function a(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer}function c(e){return"string"==typeof e}function s(e){return"number"==typeof e}function u(e){return void 0===e}function f(e){return null!==e&&"object"==typeof e}function l(e){return"[object Date]"===T.call(e)}function d(e){return"[object File]"===T.call(e)}function p(e){return"[object Blob]"===T.call(e)}function h(e){return"[object Function]"===T.call(e)}function m(e){return f(e)&&h(e.pipe)}function v(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams}function y(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}function w(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)}function g(e,t){if(null!==e&&void 0!==e)if("object"!=typeof e&&(e=[e]),r(e))for(var n=0,o=e.length;n<o;n++)t.call(null,e[n],n,e);else for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.call(null,e[i],i,e)}function b(){function e(e,n){"object"==typeof t[n]&&"object"==typeof e?t[n]=b(t[n],e):t[n]=e}for(var t={},n=0,r=arguments.length;n<r;n++)g(arguments[n],e);return t}function x(e,t,n){return g(t,function(t,r){e[r]=n&&"function"==typeof t?E(t,n):t}),e}var E=n(2),S=n(10),T=Object.prototype.toString;e.exports={isArray:r,isArrayBuffer:o,isBuffer:S,isFormData:i,isArrayBufferView:a,isString:c,isNumber:s,isObject:f,isUndefined:u,isDate:l,isFile:d,isBlob:p,isFunction:h,isStream:m,isURLSearchParams:v,isStandardBrowserEnv:w,forEach:g,merge:b,extend:x,trim:y}},function(e,t,n){"use strict";(function(t){function r(e,t){!o.isUndefined(e)&&o.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var o=n(0),i=n(13),a={"Content-Type":"application/x-www-form-urlencoded"},c={adapter:function(){var e;return"undefined"!=typeof XMLHttpRequest?e=n(3):void 0!==t&&(e=n(3)),e}(),transformRequest:[function(e,t){return i(t,"Content-Type"),o.isFormData(e)||o.isArrayBuffer(e)||o.isBuffer(e)||o.isStream(e)||o.isFile(e)||o.isBlob(e)?e:o.isArrayBufferView(e)?e.buffer:o.isURLSearchParams(e)?(r(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):o.isObject(e)?(r(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};c.headers={common:{Accept:"application/json, text/plain, */*"}},o.forEach(["delete","get","head"],function(e){c.headers[e]={}}),o.forEach(["post","put","patch"],function(e){c.headers[e]=o.merge(a)}),e.exports=c}).call(t,n(12))},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(0),o=n(14),i=n(16),a=n(17),c=n(18),s=n(4),u="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||n(19);e.exports=function(e){return new Promise(function(t,f){var l=e.data,d=e.headers;r.isFormData(l)&&delete d["Content-Type"];var p=new XMLHttpRequest,h="onreadystatechange",m=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in p||c(e.url)||(p=new window.XDomainRequest,h="onload",m=!0,p.onprogress=function(){},p.ontimeout=function(){}),e.auth){var v=e.auth.username||"",y=e.auth.password||"";d.Authorization="Basic "+u(v+":"+y)}if(p.open(e.method.toUpperCase(),i(e.url,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p[h]=function(){if(p&&(4===p.readyState||m)&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in p?a(p.getAllResponseHeaders()):null,r=e.responseType&&"text"!==e.responseType?p.response:p.responseText,i={data:r,status:1223===p.status?204:p.status,statusText:1223===p.status?"No Content":p.statusText,headers:n,config:e,request:p};o(t,f,i),p=null}},p.onerror=function(){f(s("Network Error",e,null,p)),p=null},p.ontimeout=function(){f(s("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",p)),p=null},r.isStandardBrowserEnv()){var w=n(20),g=(e.withCredentials||c(e.url))&&e.xsrfCookieName?w.read(e.xsrfCookieName):void 0;g&&(d[e.xsrfHeaderName]=g)}if("setRequestHeader"in p&&r.forEach(d,function(e,t){void 0===l&&"content-type"===t.toLowerCase()?delete d[t]:p.setRequestHeader(t,e)}),e.withCredentials&&(p.withCredentials=!0),e.responseType)try{p.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){p&&(p.abort(),f(e),p=null)}),void 0===l&&(l=null),p.send(l)})}},function(e,t,n){"use strict";var r=n(15);e.exports=function(e,t,n,o,i){var a=new Error(e);return r(a,t,n,o,i)}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){"use strict";function r(e,t){if(e.forEach)e.forEach(t);else if(Array&&Array.from)Array.from(e).forEach(t);else{for(var n=[],r=0;r<e.length;r++)n.push(e[r]);if(n.forEach)n.forEach(t);else for(var r=0;r<n.length;r++)t(n[r])}}function o(e,t){if(e.find)return e.find(t);if(e.filter)return e.filter(t)[0];for(var n=[],r=0;r<e.length;r++)n.push(e[r]);if(n.find)return n.find(t);for(var r=0;r<n.length;r++)if(t(n[r]))return n[r]}function i(){function e(e){switch(e){case"gimp":case"translate":re=e;break;case"change":re="translate"}}function t(){return re}function n(e){se=e;var t=document.querySelector(".currency");null!=t&&t.setAttribute("data-content",I(e,u.name))}function i(){return se}function l(e){switch(e){case 10:case 30:case 60:case 720:oe=e}}function y(){return oe}function g(e){ie=e.map(function(e){return D(e)})}function b(){return ie}function x(){return ae}function E(){ae-=1}function S(){ae=60}function T(){return p}function k(){return[h,m,v]}function O(){return[T()].concat(k())}function C(e){return o(w,function(t){return t.name===e})}function j(e){return o(fe,function(t){return t.name===e})}function A(e){return o(d,function(t){return t.name===e})}function D(e){return{exchange:C(e.exchange),coin:j(e.coin),price:e.price,time:e.time,currency:A(e.currency)}}function _(e,t,n){var r=o(b(),function(r){return r.exchange===e&&r.coin===t&&r.time==n});return r&&r.price||0}function I(e,t){var n;return n=e<10?3:e<100?2:e<1e3?1:0,new Intl.NumberFormat("en-US",{style:"currency",currency:t,minimumFractionDigits:n}).format(e)}function q(){var e=document.querySelector("thead");r(e.rows,function(t){return e.removeChild(t)});var t=e.insertRow();t.insertCell().outerHTML='<th scope="col"></th>',r(O(),function(e){t.insertCell().outerHTML='<th scope="col"><a href="'+e.url+'" class="text-dark '+e.name+'" target="_blank">'+e.displayName+'</a><small class="ban-'+e.name+'"></small></th>',Q(e)})}function L(){var e=document.querySelector("tbody");r(e.rows,function(t){return e.removeChild(t)}),r(fe,function(t){var n=e.insertRow();n.insertCell().outerHTML='<th scope="row">'+t.name.toUpperCase()+'<br><a href="'+H(t)+'" class="text-muted" target="_blank"><small class="oi oi-bar-chart"></small></a></th>',r(O(),function(e){var r,o=_(e,t,0);if(0==o)r="-";else{var i=y(),a=_(e,t,i);if("gimp"===re)if(e==T())r=N(e,o,a);else{var c=T(),s=_(c,t,0),u=_(c,t,i);r=B(e,o,a,s,u)}else r=U(e,o,a)}n.insertCell().innerHTML=r})})}function P(){q(),L(),$(function(){$('[data-toggle="popover"]').popover({trigger:"hover"})})}function U(e,t,n){var r=t/n-1;if(0!=n&&0!=t){return'<span style="color: '+F(r)+';">'+I(t,e.currency.name)+'</span><br><small data-toggle="popover" data-placement="bottom" data-content="'+I(n,e.currency.name)+'">'+(100*r).toFixed(2)+"%</small>"}return"<span>"+I(t,e.currency.name)+"</span>"}function N(e,t,n){var r=i(),o=t/n-1,a=t*r;if(0!=n&&0!=a){return'<span style="color: '+F(o)+';">'+I(t,e.currency.name)+"</span><br><small>"+I(a,u.name)+"</small>"}return"<span>"+I(t,e.currency.name)+"</span>"}function B(e,t,n,r,o){if(0==t)return"";var a,c=T();a=c.currency===f&&e.currency===u?i():1;var s=t/n-1,l=F(s);if(0==r||0==a)return'<span style="color: '+l+';">'+I(t,e.currency.name)+"</span>";var d=t/(r*a)-1,p=n/(o*a)-1,h=100*(d-p),m=h>0?"+"+h.toFixed(2)+"%":h.toFixed(2)+"%";return'<span style="color: '+l+';">'+I(t,e.currency.name)+'</span><br><small  data-toggle="popover" data-placement="bottom" data-content="'+m+'">'+(100*d).toFixed(2)+"%</small>"}function H(e){if(le.indexOf(e)>=0)return"https://kr.tradingview.com/chart/?symbol=BITHUMB:"+e.name.toUpperCase()+"KRW";if(de.indexOf(e)>=0)return"https://upbit.com/exchange?code=CRIX.UPBIT.KRW-"+e.name.toUpperCase();switch(e){case Y:return"https://cryptowat.ch/markets/bitfinex/stj/usd";case R:return"https://cryptowat.ch/markets/bitfinex/iot/usd";default:return"https://cryptowat.ch/markets/bitfinex/"+e.name+"/usd"}}function F(e){return e>0?"red":e<0?"blue":"black"}function M(e){document.querySelector(".updated-at").innerText=X(e)}function X(e){var t=new Date(e);return t.getFullYear()+"/"+(t.getMonth()+1)+"/"+t.getDate()+" "+t.toLocaleTimeString()}function z(){s.default.get("https://15130i3vgl.execute-api.ap-northeast-2.amazonaws.com/dev/assets?t="+y()).then(function(e){g(e.data.data),M(e.data.updated_at),P(),S(),V(),W(!1)}).catch(function(e){e.response?(console.error(e.response.data),console.log(e.response.status),console.log(e.response.headers)):console.log(e.message),S()})}function K(){if(window.history.replaceState){var e=document.createElement("a");e.href=window.location.href,e.search="?rate="+t()+"&time="+y(),window.history.replaceState({},null,e.href)}}function J(e){var t=window.location.href;e=e.replace(/[\[\]]/g,"\\$&");var n=new RegExp("[?&]"+e+"(=([^&#]*)|&|#|$)"),r=n.exec(t);return r?r[2]?decodeURIComponent(r[2].replace(/\+/g," ")):"":null}function V(){var e=x(),t=document.querySelector(".time-refresh-text");t.innerText=e>5?e+" 초":"잠시"}function G(){return a(this,void 0,void 0,function(){var e,t,n;return c(this,function(r){switch(r.label){case 0:return r.trys.push([0,2,,3]),[4,s.default.get("https://15130i3vgl.execute-api.ap-northeast-2.amazonaws.com/dev/currency")];case 1:return e=r.sent(),t=e.data.data,[2,t.filter(function(e){return"USD"===e.source&&"KRW"===e.target}).map(function(e){return e.rate})[0]];case 2:return n=r.sent(),console.log("currency",n),[3,3];case 3:return[2,0]}})})}function W(e){ce||!e?(ce=!0,$("#loading-modal").modal("hide")):window.setTimeout(function(){ce||$("#loading-modal").modal("show")},500)}function Q(e){return a(this,void 0,void 0,function(){var t,n,r;return c(this,function(o){switch(o.label){case 0:switch(n=e){case p:return[3,1];case h:return[3,3];case m:return[3,5];case v:return[3,7]}return[3,9];case 1:return[4,Z()];case 2:return t=o.sent(),[3,10];case 3:return[4,ee()];case 4:return t=o.sent(),[3,10];case 5:return[4,te()];case 6:return t=o.sent(),[3,10];case 7:return[4,ne()];case 8:return t=o.sent(),[3,10];case 9:return t=!0,[3,10];case 10:return t||(r=document.querySelector(".ban-"+e.name))&&(r.className="oi oi-ban text-danger"),[2]}})})}function Z(){return a(this,void 0,void 0,function(){var e,t;return c(this,function(n){switch(n.label){case 0:return n.trys.push([0,2,,3]),[4,s.default.get("https://api.bitfinex.com/v2/platform/status")];case 1:return e=n.sent(),[2,1==e.data[0]];case 2:return t=n.sent(),console.log("bitfinex",t),[2,!1];case 3:return[2]}})})}function ee(){return a(this,void 0,void 0,function(){var e,t,n,r,o,i;return c(this,function(a){switch(a.label){case 0:return a.trys.push([0,2,,3]),[4,s.default.get("https://api.bithumb.com/public/ticker/BTC")];case 1:return e=a.sent(),t=e.data.status,n=parseInt(e.data.data.date,10),r=(new Date).getTime(),o=n-1e4<r&&r<n+1e4,[2,"0000"===t&&o];case 2:return i=a.sent(),console.log("bithumb",i),[2,!1];case 3:return[2]}})})}function te(){return a(this,void 0,void 0,function(){var e,t,n,r,o,i;return c(this,function(a){switch(a.label){case 0:return a.trys.push([0,2,,3]),[4,s.default.get("https://api.coinone.co.kr/ticker?currency=btc")];case 1:return e=a.sent(),t=e.data.result,n=parseInt(e.data.timestamp,10),r=(new Date).getTime()/1e3,o=n-10<r&&r<n+10,[2,"success"===t&&o];case 2:return i=a.sent(),console.log("coinone",i),[2,!1];case 3:return[2]}})})}function ne(){return a(this,void 0,void 0,function(){var e,t,n,r;return c(this,function(o){switch(o.label){case 0:return o.trys.push([0,2,,3]),[4,s.default.get("https://ccx.upbit.com/api/v1/timestamp")];case 1:return e=o.sent(),t=parseInt(e.data,10),n=(new Date).getTime()/1e3,[2,t-10<n&&n<t+10];case 2:return r=o.sent(),console.log("upbit",r),[2,!1];case 3:return[2]}})})}var re="translate",oe=10,ie=[],ae=60,ce=!1,se=0;W(!0),function(){var t=J("rate");null!=t&&e(t);var n=J("time");null!=n&&l(parseInt(n))}(),function(){var e=document.querySelector("input[type=radio][name=rate][id="+t()+"]");e&&e.click();var n=document.querySelector("input[type=radio][name=time][id=t"+y()+"]");n&&n.click();var r=document.querySelector(".bookmark");r&&r.addEventListener("click",function(){window.external&&"AddFavorite"in window.external&&window.external.AddFavorite(location.href,document.title)})}(),function(){r(document.querySelectorAll("input[type=radio]"),function(t){t.addEventListener("focus",function(){if("rate"===t.name)"gimp"===t.id?(e("gimp"),P(),ga("send","event","Filter","SetIndicator","gimp")):"translate"===t.id&&(e("translate"),P(),ga("send","event","Filter","SetIndicator","translate"));else if("time"===t.name){var n=t.id.slice(1,t.id.length);l(parseInt(n)),z(),ga("send","event","Filter","SetTime",n)}K()})})}(),function(){document.querySelector(".time-refresh-button").addEventListener("click",function(){z(),ga("send","event","Refresh","ClickButton","refresh")}),window.setInterval(function(){E(),V(),0==x()&&(z(),ga("send","event","Refresh","Timeout","refresh"))},1e3)}(),function(){a(this,void 0,void 0,function(){var e;return c(this,function(t){switch(t.label){case 0:return[4,G()];case 1:return e=t.sent(),console.log("currency",e),e>0&&(n(e),P()),[2]}})})}(),z(),function(){var e=$(".gimp-onboarding");if(window.localStorage){var t=window.localStorage;t.getItem("onboarding:gimp_button")?e.popover("disable"):(e.popover("show"),document.querySelector(".gimp-onboarding").addEventListener("click",function(){e.popover("hide"),e.popover("disable"),t.setItem("onboarding:gimp_button","done")}))}else e.popover("disable")}()}var a=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{s(r.next(e))}catch(e){i(e)}}function c(e){try{s(r.throw(e))}catch(e){i(e)}}function s(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,c)}s((r=r.apply(e,t||[])).next())})},c=this&&this.__generator||function(e,t){function n(e){return function(t){return r([e,t])}}function r(n){if(o)throw new TypeError("Generator is already executing.");for(;s;)try{if(o=1,i&&(a=i[2&n[0]?"return":n[0]?"throw":"next"])&&!(a=a.call(i,n[1])).done)return a;switch(i=0,a&&(n=[0,a.value]),n[0]){case 0:case 1:a=n;break;case 4:return s.label++,{value:n[1],done:!1};case 5:s.label++,i=n[1],n=[0];continue;case 7:n=s.ops.pop(),s.trys.pop();continue;default:if(a=s.trys,!(a=a.length>0&&a[a.length-1])&&(6===n[0]||2===n[0])){s=0;continue}if(3===n[0]&&(!a||n[1]>a[0]&&n[1]<a[3])){s.label=n[1];break}if(6===n[0]&&s.label<a[1]){s.label=a[1],a=n;break}if(a&&s.label<a[2]){s.label=a[2],s.ops.push(n);break}a[2]&&s.ops.pop(),s.trys.pop();continue}n=t.call(e,s)}catch(e){n=[6,e],i=0}finally{o=a=0}if(5&n[0])throw n[1];return{value:n[0]?n[1]:void 0,done:!0}}var o,i,a,c,s={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return c={next:n(0),throw:n(1),return:n(2)},"function"==typeof Symbol&&(c[Symbol.iterator]=function(){return this}),c};Object.defineProperty(t,"__esModule",{value:!0});var s=n(8),u={name:"krw"},f={name:"usd"},l={name:"jpy"},d=[u,f,l],p={name:"bitfinex",currency:f,url:"https://www.bitfinex.com",displayName:"BITFINEX"},h={name:"bithumb",currency:u,url:"https://www.bithumb.com",displayName:"빗썸"},m={name:"coinone",currency:u,url:"https://www.coinone.co.kr",displayName:"코인원"},v={name:"upbit",currency:u,url:"https://upbit.com",displayName:"업비트"},y={name:"binance",currency:f,url:"https://www.binance.com",displayName:"BINANCE"},w=[p,y,h,m,v],g={name:"btc"},b={name:"eth"},x={name:"xrp"},E={name:"ltc"},S={name:"qtum"},T={name:"dash"},k={name:"etc"},O={name:"bch"},C={name:"xmr"},j={name:"zec"},A={name:"btg"},D={name:"eos"},R={name:"iota"},_={name:"snt"},I={name:"neo"},q={name:"ada"},L={name:"xlm"},P={name:"xem"},U={name:"steem"},N={name:"mer"},B={name:"strat"},H={name:"sbd"},F={name:"omg"},M={name:"lsk"},X={name:"tix"},z={name:"emc2"},K={name:"ardr"},J={name:"pivx"},V={name:"powr"},G={name:"mtl"},W={name:"grs"},Y={name:"storj"},Q={name:"ark"},Z={name:"rep"},ee={name:"kmd"},te={name:"waves"},ne={name:"vtc"},re={name:"ven"},oe={name:"icx"},ie={name:"elf"},ae={name:"mith"},ce={name:"knc"},se={name:"mco"},ue={name:"trx"},fe=[g,b,D,x,E,S,k,O,A,F,ue,T,C,j,ie,ae,R,_,I,Z,L,Y,oe,se,re,ce,q,P,U,N,B,H,M,X,z,K,J,V,G,W,Q,ee,te,ne],le=[oe,se,re,ce],de=[q,L,P,U,N,B,H,M,X,z,K,J,V,G,W,Y,Q,ee,te,ne];!function(e){(document.attachEvent?"complete"===document.readyState:"loading"!==document.readyState)?e():document.addEventListener("DOMContentLoaded",e)}(i)},function(e,t,n){e.exports=n(9)},function(e,t,n){"use strict";function r(e){var t=new a(e),n=i(a.prototype.request,t);return o.extend(n,a.prototype,t),o.extend(n,t),n}var o=n(0),i=n(2),a=n(11),c=n(1),s=r(c);s.Axios=a,s.create=function(e){return r(o.merge(c,e))},s.Cancel=n(6),s.CancelToken=n(26),s.isCancel=n(5),s.all=function(e){return Promise.all(e)},s.spread=n(27),e.exports=s,e.exports.default=s},function(e,t){function n(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}function r(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&n(e.slice(0,0))}/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&(n(e)||r(e)||!!e._isBuffer)}},function(e,t,n){"use strict";function r(e){this.defaults=e,this.interceptors={request:new a,response:new a}}var o=n(1),i=n(0),a=n(21),c=n(22);r.prototype.request=function(e){"string"==typeof e&&(e=i.merge({url:arguments[0]},arguments[1])),e=i.merge(o,this.defaults,{method:"get"},e),e.method=e.method.toLowerCase();var t=[c,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)n=n.then(t.shift(),t.shift());return n},i.forEach(["delete","get","head","options"],function(e){r.prototype[e]=function(t,n){return this.request(i.merge(n||{},{method:e,url:t}))}}),i.forEach(["post","put","patch"],function(e){r.prototype[e]=function(t,n,r){return this.request(i.merge(r||{},{method:e,url:t,data:n}))}}),e.exports=r},function(e,t){function n(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function o(e){if(f===setTimeout)return setTimeout(e,0);if((f===n||!f)&&setTimeout)return f=setTimeout,setTimeout(e,0);try{return f(e,0)}catch(t){try{return f.call(null,e,0)}catch(t){return f.call(this,e,0)}}}function i(e){if(l===clearTimeout)return clearTimeout(e);if((l===r||!l)&&clearTimeout)return l=clearTimeout,clearTimeout(e);try{return l(e)}catch(t){try{return l.call(null,e)}catch(t){return l.call(this,e)}}}function a(){m&&p&&(m=!1,p.length?h=p.concat(h):v=-1,h.length&&c())}function c(){if(!m){var e=o(a);m=!0;for(var t=h.length;t;){for(p=h,h=[];++v<t;)p&&p[v].run();v=-1,t=h.length}p=null,m=!1,i(e)}}function s(e,t){this.fun=e,this.array=t}function u(){}var f,l,d=e.exports={};!function(){try{f="function"==typeof setTimeout?setTimeout:n}catch(e){f=n}try{l="function"==typeof clearTimeout?clearTimeout:r}catch(e){l=r}}();var p,h=[],m=!1,v=-1;d.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];h.push(new s(e,t)),1!==h.length||m||o(c)},s.prototype.run=function(){this.fun.apply(null,this.array)},d.title="browser",d.browser=!0,d.env={},d.argv=[],d.version="",d.versions={},d.on=u,d.addListener=u,d.once=u,d.off=u,d.removeListener=u,d.removeAllListeners=u,d.emit=u,d.prependListener=u,d.prependOnceListener=u,d.listeners=function(e){return[]},d.binding=function(e){throw new Error("process.binding is not supported")},d.cwd=function(){return"/"},d.chdir=function(e){throw new Error("process.chdir is not supported")},d.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(0);e.exports=function(e,t){r.forEach(e,function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])})}},function(e,t,n){"use strict";var r=n(4);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e}},function(e,t,n){"use strict";function r(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}var o=n(0);e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(o.isURLSearchParams(t))i=t.toString();else{var a=[];o.forEach(t,function(e,t){null!==e&&void 0!==e&&(o.isArray(e)&&(t+="[]"),o.isArray(e)||(e=[e]),o.forEach(e,function(e){o.isDate(e)?e=e.toISOString():o.isObject(e)&&(e=JSON.stringify(e)),a.push(r(t)+"="+r(e))}))}),i=a.join("&")}return i&&(e+=(-1===e.indexOf("?")?"?":"&")+i),e}},function(e,t,n){"use strict";var r=n(0),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,a={};return e?(r.forEach(e.split("\n"),function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(a[t]&&o.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([n]):a[t]?a[t]+", "+n:n}}),a):a}},function(e,t,n){"use strict";var r=n(0);e.exports=r.isStandardBrowserEnv()?function(){function e(e){var t=e;return n&&(o.setAttribute("href",t),t=o.href),o.setAttribute("href",t),{href:o.href,protocol:o.protocol?o.protocol.replace(/:$/,""):"",host:o.host,search:o.search?o.search.replace(/^\?/,""):"",hash:o.hash?o.hash.replace(/^#/,""):"",hostname:o.hostname,port:o.port,pathname:"/"===o.pathname.charAt(0)?o.pathname:"/"+o.pathname}}var t,n=/(msie|trident)/i.test(navigator.userAgent),o=document.createElement("a");return t=e(window.location.href),function(n){var o=r.isString(n)?e(n):n;return o.protocol===t.protocol&&o.host===t.host}}():function(){return function(){return!0}}()},function(e,t,n){"use strict";function r(){this.message="String contains an invalid character"}function o(e){for(var t,n,o=String(e),a="",c=0,s=i;o.charAt(0|c)||(s="=",c%1);a+=s.charAt(63&t>>8-c%1*8)){if((n=o.charCodeAt(c+=.75))>255)throw new r;t=t<<8|n}return a}var i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";r.prototype=new Error,r.prototype.code=5,r.prototype.name="InvalidCharacterError",e.exports=o},function(e,t,n){"use strict";var r=n(0);e.exports=r.isStandardBrowserEnv()?function(){return{write:function(e,t,n,o,i,a){var c=[];c.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&c.push("expires="+new Date(n).toGMTString()),r.isString(o)&&c.push("path="+o),r.isString(i)&&c.push("domain="+i),!0===a&&c.push("secure"),document.cookie=c.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}}():function(){return{write:function(){},read:function(){return null},remove:function(){}}}()},function(e,t,n){"use strict";function r(){this.handlers=[]}var o=n(0);r.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},r.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},r.prototype.forEach=function(e){o.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=r},function(e,t,n){"use strict";function r(e){e.cancelToken&&e.cancelToken.throwIfRequested()}var o=n(0),i=n(23),a=n(5),c=n(1),s=n(24),u=n(25);e.exports=function(e){return r(e),e.baseURL&&!s(e.url)&&(e.url=u(e.baseURL,e.url)),e.headers=e.headers||{},e.data=i(e.data,e.headers,e.transformRequest),e.headers=o.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),o.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]}),(e.adapter||c.adapter)(e).then(function(t){return r(e),t.data=i(t.data,t.headers,e.transformResponse),t},function(t){return a(t)||(r(e),t&&t.response&&(t.response.data=i(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},function(e,t,n){"use strict";var r=n(0);e.exports=function(e,t,n){return r.forEach(n,function(n){e=n(e,t)}),e}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";function r(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var n=this;e(function(e){n.reason||(n.reason=new o(e),t(n.reason))})}var o=n(6);r.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},r.source=function(){var e;return{token:new r(function(t){e=t}),cancel:e}},e.exports=r},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZHN0L2J1bmRsZS5qcyIsIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgOTRiZjQ5OTUyZTllZGYyNGE0MjkiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9jcmVhdGVFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9pc0NhbmNlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pcy1idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J0b2EuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIl0sIm5hbWVzIjpbIm1vZHVsZXMiLCJob3REaXNwb3NlQ2h1bmsiLCJjaHVua0lkIiwiaW5zdGFsbGVkQ2h1bmtzIiwiaG90RG93bmxvYWRVcGRhdGVDaHVuayIsImhlYWQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwic2NyaXB0IiwiY3JlYXRlRWxlbWVudCIsInR5cGUiLCJjaGFyc2V0Iiwic3JjIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsInAiLCJob3RDdXJyZW50SGFzaCIsImFwcGVuZENoaWxkIiwiaG90RG93bmxvYWRNYW5pZmVzdCIsInJlcXVlc3RUaW1lb3V0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJYTUxIdHRwUmVxdWVzdCIsIkVycm9yIiwicmVxdWVzdCIsInJlcXVlc3RQYXRoIiwib3BlbiIsInRpbWVvdXQiLCJzZW5kIiwiZXJyIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInN0YXR1cyIsInVwZGF0ZSIsIkpTT04iLCJwYXJzZSIsInJlc3BvbnNlVGV4dCIsImUiLCJob3RDcmVhdGVSZXF1aXJlIiwibW9kdWxlSWQiLCJtZSIsImluc3RhbGxlZE1vZHVsZXMiLCJmbiIsImhvdCIsImFjdGl2ZSIsInBhcmVudHMiLCJpbmRleE9mIiwicHVzaCIsImhvdEN1cnJlbnRQYXJlbnRzIiwiaG90Q3VycmVudENoaWxkTW9kdWxlIiwiY2hpbGRyZW4iLCJjb25zb2xlIiwid2FybiIsIm5hbWUiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJzZXQiLCJ2YWx1ZSIsImZpbmlzaENodW5rTG9hZGluZyIsImhvdENodW5rc0xvYWRpbmciLCJob3RTdGF0dXMiLCJob3RXYWl0aW5nRmlsZXNNYXAiLCJob3RFbnN1cmVVcGRhdGVDaHVuayIsImhvdFdhaXRpbmdGaWxlcyIsImhvdFVwZGF0ZURvd25sb2FkZWQiLCJob3RTZXRTdGF0dXMiLCJ0aGVuIiwiaG90Q3JlYXRlTW9kdWxlIiwiX2FjY2VwdGVkRGVwZW5kZW5jaWVzIiwiX2RlY2xpbmVkRGVwZW5kZW5jaWVzIiwiX3NlbGZBY2NlcHRlZCIsIl9zZWxmRGVjbGluZWQiLCJfZGlzcG9zZUhhbmRsZXJzIiwiX21haW4iLCJhY2NlcHQiLCJkZXAiLCJjYWxsYmFjayIsImkiLCJsZW5ndGgiLCJkZWNsaW5lIiwiZGlzcG9zZSIsImFkZERpc3Bvc2VIYW5kbGVyIiwicmVtb3ZlRGlzcG9zZUhhbmRsZXIiLCJpZHgiLCJzcGxpY2UiLCJjaGVjayIsImhvdENoZWNrIiwiYXBwbHkiLCJob3RBcHBseSIsImwiLCJob3RTdGF0dXNIYW5kbGVycyIsImFkZFN0YXR1c0hhbmRsZXIiLCJyZW1vdmVTdGF0dXNIYW5kbGVyIiwiZGF0YSIsImhvdEN1cnJlbnRNb2R1bGVEYXRhIiwidW5kZWZpbmVkIiwibmV3U3RhdHVzIiwidG9Nb2R1bGVJZCIsImlkIiwiaG90QXBwbHlPblVwZGF0ZSIsImhvdFJlcXVlc3RUaW1lb3V0IiwiaG90UmVxdWVzdGVkRmlsZXNNYXAiLCJob3RBdmFpbGFibGVGaWxlc01hcCIsImMiLCJob3RVcGRhdGVOZXdIYXNoIiwiaCIsInByb21pc2UiLCJob3REZWZlcnJlZCIsImhvdFVwZGF0ZSIsImhvdEFkZFVwZGF0ZUNodW5rIiwibW9yZU1vZHVsZXMiLCJkZWZlcnJlZCIsInJlc3VsdCIsIm91dGRhdGVkTW9kdWxlcyIsIm9wdGlvbnMiLCJhZGRBbGxUb1NldCIsImEiLCJiIiwiaXRlbSIsImNiIiwiaiIsIm1vZHVsZSIsIm91dGRhdGVkRGVwZW5kZW5jaWVzIiwiYXBwbGllZFVwZGF0ZSIsIndhcm5VbmV4cGVjdGVkUmVxdWlyZSIsInVwZGF0ZU1vZHVsZUlkIiwicXVldWUiLCJzbGljZSIsIm1hcCIsImNoYWluIiwicXVldWVJdGVtIiwicG9wIiwicGFyZW50SWQiLCJwYXJlbnQiLCJjb25jYXQiLCJhYm9ydEVycm9yIiwiZG9BcHBseSIsImRvRGlzcG9zZSIsImNoYWluSW5mbyIsImpvaW4iLCJvbkRlY2xpbmVkIiwiaWdub3JlRGVjbGluZWQiLCJvblVuYWNjZXB0ZWQiLCJpZ25vcmVVbmFjY2VwdGVkIiwib25BY2NlcHRlZCIsIm9uRGlzcG9zZWQiLCJvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMiLCJlcnJvckhhbmRsZXIiLCJrZXlzIiwiZm9yRWFjaCIsImRpc3Bvc2VIYW5kbGVycyIsImNoaWxkIiwiZGVwZW5kZW5jeSIsIm1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzIiwiZXJyb3IiLCJjYWxsYmFja3MiLCJvbkVycm9yZWQiLCJkZXBlbmRlbmN5SWQiLCJpZ25vcmVFcnJvcmVkIiwiZXJyMiIsIm9yZ2luYWxFcnJvciIsIm9yaWdpbmFsRXJyb3IiLCJleHBvcnRzIiwiaG90Q3VycmVudFBhcmVudHNUZW1wIiwicGFyZW50SG90VXBkYXRlQ2FsbGJhY2siLCJ3aW5kb3ciLCJtIiwiZCIsImdldHRlciIsIm8iLCJuIiwiX19lc01vZHVsZSIsIm9iamVjdCIsInByb3BlcnR5IiwicyIsImlzQXJyYXkiLCJ2YWwiLCJ0b1N0cmluZyIsImlzQXJyYXlCdWZmZXIiLCJpc0Zvcm1EYXRhIiwiRm9ybURhdGEiLCJpc0FycmF5QnVmZmVyVmlldyIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiYnVmZmVyIiwiaXNTdHJpbmciLCJpc051bWJlciIsImlzVW5kZWZpbmVkIiwiaXNPYmplY3QiLCJpc0RhdGUiLCJpc0ZpbGUiLCJpc0Jsb2IiLCJpc0Z1bmN0aW9uIiwiaXNTdHJlYW0iLCJwaXBlIiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJ0cmltIiwic3RyIiwicmVwbGFjZSIsImlzU3RhbmRhcmRCcm93c2VyRW52IiwibmF2aWdhdG9yIiwicHJvZHVjdCIsIm9iaiIsImtleSIsIm1lcmdlIiwiYXNzaWduVmFsdWUiLCJhcmd1bWVudHMiLCJleHRlbmQiLCJ0aGlzQXJnIiwiYmluZCIsImlzQnVmZmVyIiwicHJvY2VzcyIsInNldENvbnRlbnRUeXBlSWZVbnNldCIsImhlYWRlcnMiLCJ1dGlscyIsIm5vcm1hbGl6ZUhlYWRlck5hbWUiLCJERUZBVUxUX0NPTlRFTlRfVFlQRSIsIkNvbnRlbnQtVHlwZSIsImRlZmF1bHRzIiwiYWRhcHRlciIsInRyYW5zZm9ybVJlcXVlc3QiLCJzdHJpbmdpZnkiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsInhzcmZDb29raWVOYW1lIiwieHNyZkhlYWRlck5hbWUiLCJtYXhDb250ZW50TGVuZ3RoIiwidmFsaWRhdGVTdGF0dXMiLCJjb21tb24iLCJBY2NlcHQiLCJtZXRob2QiLCJhcmdzIiwiQXJyYXkiLCJzZXR0bGUiLCJidWlsZFVSTCIsInBhcnNlSGVhZGVycyIsImlzVVJMU2FtZU9yaWdpbiIsImNyZWF0ZUVycm9yIiwiYnRvYSIsImNvbmZpZyIsInJlcXVlc3REYXRhIiwicmVxdWVzdEhlYWRlcnMiLCJsb2FkRXZlbnQiLCJ4RG9tYWluIiwiWERvbWFpblJlcXVlc3QiLCJ1cmwiLCJvbnByb2dyZXNzIiwib250aW1lb3V0IiwiYXV0aCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJBdXRob3JpemF0aW9uIiwidG9VcHBlckNhc2UiLCJwYXJhbXMiLCJwYXJhbXNTZXJpYWxpemVyIiwicmVzcG9uc2VVUkwiLCJyZXNwb25zZUhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZURhdGEiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZSIsInN0YXR1c1RleHQiLCJvbmVycm9yIiwiY29va2llcyIsInhzcmZWYWx1ZSIsIndpdGhDcmVkZW50aWFscyIsInJlYWQiLCJ0b0xvd2VyQ2FzZSIsInNldFJlcXVlc3RIZWFkZXIiLCJvbkRvd25sb2FkUHJvZ3Jlc3MiLCJhZGRFdmVudExpc3RlbmVyIiwib25VcGxvYWRQcm9ncmVzcyIsInVwbG9hZCIsImNhbmNlbFRva2VuIiwiY2FuY2VsIiwiYWJvcnQiLCJlbmhhbmNlRXJyb3IiLCJtZXNzYWdlIiwiY29kZSIsIl9fQ0FOQ0VMX18iLCJDYW5jZWwiLCJ0aGlzIiwibGlzdCIsImZyb20iLCJhcnJheSIsImZpbmQiLCJmaWx0ZXIiLCJtYWluIiwic2V0UmF0ZSIsIm5ld1JhdGUiLCJyYXRlIiwiZ2V0UmF0ZSIsInNldEN1cnJlbmN5UmF0ZSIsImN1cnJlbmN5UmF0ZSIsImN1cnJlbmN5IiwicXVlcnlTZWxlY3RvciIsInNldEF0dHJpYnV0ZSIsImZvcm1hdFByaWNlIiwiS1JXIiwiZ2V0Q3VycmVuY3lSYXRlIiwic2V0VGltZSIsIm5ld1RpbWUiLCJ0aW1lIiwiZ2V0VGltZSIsInNldFByaWNlRGF0YSIsIm5ld1ByaWNlRGF0YSIsInByaWNlRGF0YSIsImdldENvaW5QcmljZSIsImdldFByaWNlRGF0YSIsImdldFJlZnJlc2hUaW1lIiwicmVmcmVzaFRpbWUiLCJkZWNSZWZyZXNoVGltZSIsInJlc2V0UmVmcmVzaFRpbWUiLCJnZXRCYXNlRXhjaG5hZ2UiLCJCSVRGSU5FWCIsImdldEV4Y2hhbmdlcyIsIkJJVEhVTUIiLCJDT0lOT05FIiwiVVBCSVQiLCJnZXRBbGxFeGNoYW5nZXMiLCJnZXRFeGNoYW5nZSIsIkVYQ0hBTkdFUyIsImV4Y2hhbmdlIiwiZ2V0Q29pbiIsIkNPSU5TIiwiY29pbiIsImdldEN1cnJlbmN5IiwiQ1VSUkVOQ0lFUyIsInByaWNlIiwiZ2V0UHJpY2UiLCJqc29uIiwiZGlnaXRzIiwiSW50bCIsIk51bWJlckZvcm1hdCIsInN0eWxlIiwibWluaW11bUZyYWN0aW9uRGlnaXRzIiwiZm9ybWF0IiwicmVuZGVyVEhlYWQiLCJ0aGVhZCIsInJvd3MiLCJyb3ciLCJyZW1vdmVDaGlsZCIsImluc2VydFJvdyIsImluc2VydENlbGwiLCJvdXRlckhUTUwiLCJkaXNwbGF5TmFtZSIsInVwZGF0ZUV4Y2hhbmdlU3RhdHVzIiwicmVuZGVyVEJvZHkiLCJ0Ym9keSIsImdldENoYXJ0TGluayIsImh0bWwiLCJ0aW1lXzEiLCJsYXN0UHJpY2UiLCJyZW5kZXJLb3JQcmljZSIsImJhc2VFeGNoYW5nZSIsImJpdGZpbmV4UHJpY2UiLCJiaXRmaW5leExhc3RQcmljZSIsInJlbmRlckdpbXAiLCJyZW5kZXJDaGFuZ2VzIiwiaW5uZXJIVE1MIiwicmVuZGVyIiwiJCIsInBvcG92ZXIiLCJ0cmlnZ2VyIiwicHJpY2VDaGFuZ2UiLCJnZXRGb250Q29sb3IiLCJ0b0ZpeGVkIiwia29yUHJpY2UiLCJiYXNlUHJpY2UiLCJiYXNlTGFzdFByaWNlIiwiVVNEIiwiZm9udENvbG9yIiwiZ2ltcCIsImxhc3RHaW1wIiwiZ2ltcENoYW5nZSIsImZvcm1hdHRlZEdpbXBDaGFuZ2UiLCJCSVRIVU1CX0NPSU5TIiwiVVBCSVRfQ09JTlMiLCJTVE9SSiIsIklPVEEiLCJyZW5kZXJVcGRhdGVkQXQiLCJ1cGRhdGVkQXQiLCJpbm5lclRleHQiLCJnZXRGb3JtYXRVcGRhdGVkQXQiLCJkYXRlIiwiRGF0ZSIsImdldEZ1bGxZZWFyIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwidG9Mb2NhbGVUaW1lU3RyaW5nIiwiZmV0Y2hQcmljZURhdGEiLCJheGlvc18xIiwiZGVmYXVsdCIsInVwZGF0ZWRfYXQiLCJ1cGRhdGVSZWZyZXNoVGV4dCIsInNob3dMb2FkaW5nIiwiY2F0Y2giLCJsb2ciLCJ1cGRhdGVVcmwiLCJoaXN0b3J5IiwicmVwbGFjZVN0YXRlIiwicGFyc2VyIiwiaHJlZiIsImxvY2F0aW9uIiwic2VhcmNoIiwiZ2V0UGFyYW1ldGVyQnlOYW1lIiwicmVnZXgiLCJSZWdFeHAiLCJyZXN1bHRzIiwiZXhlYyIsImRlY29kZVVSSUNvbXBvbmVudCIsImNvdW50IiwicmVmcmVzaFRleHQiLCJnZXRSZW1vdGVDdXJyZW5jeVJhdGUiLCJfX2F3YWl0ZXIiLCJlXzEiLCJfX2dlbmVyYXRvciIsIl9hIiwibGFiZWwiLCJ0cnlzIiwic2VudCIsInNvdXJjZSIsInRhcmdldCIsImxvYWRpbmciLCJsb2FkZWQiLCJtb2RhbCIsInNldFRpbWVvdXQiLCJ0YXJnZXRJY29uIiwiX2IiLCJpc0JpdGZpbmV4QWN0aXZlIiwiaXNCaXRodW1iQWN0aXZlIiwiaXNDb2lub25lQWN0aXZlIiwiaXNVcGJpdEFjdGl2ZSIsImNsYXNzTmFtZSIsImVfMiIsInN0YXR1c18xIiwiY3VycmVudFRpbWUiLCJ2YWxpZERhdGUiLCJlXzMiLCJwYXJzZUludCIsInRpbWVzdGFtcCIsImVfNCIsImVfNSIsInJhdGVCdXR0b24iLCJjbGljayIsInRpbWVCdXR0b24iLCJib29rbWFyayIsImV4dGVybmFsIiwiQWRkRmF2b3JpdGUiLCJ0aXRsZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJidXR0b24iLCJnYSIsInRpbWVfMiIsInNldEludGVydmFsIiwiZ2ltcEJ1dHRvbiIsImxvY2FsU3RvcmFnZSIsImxvY2FsU3RvcmFnZV8xIiwiZ2V0SXRlbSIsInNldEl0ZW0iLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsImZ1bGZpbGxlZCIsInN0ZXAiLCJuZXh0IiwicmVqZWN0ZWQiLCJkb25lIiwiYm9keSIsInZlcmIiLCJ2Iiwib3AiLCJmIiwiVHlwZUVycm9yIiwiXyIsInkiLCJ0Iiwib3BzIiwiZyIsInRocm93IiwicmV0dXJuIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJKUFkiLCJCSU5BTkNFIiwiQlRDIiwiRVRIIiwiWFJQIiwiTFRDIiwiUVRVTSIsIkRBU0giLCJFVEMiLCJCQ0giLCJYTVIiLCJaRUMiLCJCVEciLCJFT1MiLCJTTlQiLCJORU8iLCJBREEiLCJYTE0iLCJYRU0iLCJTVEVFTSIsIk1FUiIsIlNUUkFUIiwiU0JEIiwiT01HIiwiTFNLIiwiVElYIiwiRU1DMiIsIkFSRFIiLCJQSVZYIiwiUE9XUiIsIk1UTCIsIkdSUyIsIkFSSyIsIlJFUCIsIktNRCIsIldBVkVTIiwiVlRDIiwiVkVOIiwiSUNYIiwiRUxGIiwiTUlUSCIsIktOQyIsIk1DTyIsIlRSWCIsImF0dGFjaEV2ZW50IiwiY3JlYXRlSW5zdGFuY2UiLCJkZWZhdWx0Q29uZmlnIiwiY29udGV4dCIsIkF4aW9zIiwiaW5zdGFuY2UiLCJheGlvcyIsImNyZWF0ZSIsImluc3RhbmNlQ29uZmlnIiwiQ2FuY2VsVG9rZW4iLCJpc0NhbmNlbCIsImFsbCIsInByb21pc2VzIiwic3ByZWFkIiwiY29uc3RydWN0b3IiLCJpc1Nsb3dCdWZmZXIiLCJyZWFkRmxvYXRMRSIsIl9pc0J1ZmZlciIsImludGVyY2VwdG9ycyIsIkludGVyY2VwdG9yTWFuYWdlciIsImRpc3BhdGNoUmVxdWVzdCIsImludGVyY2VwdG9yIiwidW5zaGlmdCIsInNoaWZ0IiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwiY2FjaGVkU2V0VGltZW91dCIsInJ1bkNsZWFyVGltZW91dCIsIm1hcmtlciIsImNhY2hlZENsZWFyVGltZW91dCIsImNsZWFyVGltZW91dCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluaW5nIiwiY3VycmVudFF1ZXVlIiwicXVldWVJbmRleCIsImRyYWluUXVldWUiLCJsZW4iLCJydW4iLCJJdGVtIiwibm9vcCIsIm5leHRUaWNrIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJ2ZXJzaW9uIiwidmVyc2lvbnMiLCJvbiIsImFkZExpc3RlbmVyIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJkaXIiLCJ1bWFzayIsIm5vcm1hbGl6ZWROYW1lIiwiZW5jb2RlIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2VyaWFsaXplZFBhcmFtcyIsInBhcnRzIiwidG9JU09TdHJpbmciLCJpZ25vcmVEdXBsaWNhdGVPZiIsInBhcnNlZCIsInNwbGl0IiwibGluZSIsInN1YnN0ciIsInJlc29sdmVVUkwiLCJtc2llIiwidXJsUGFyc2luZ05vZGUiLCJwcm90b2NvbCIsImhvc3QiLCJoYXNoIiwiaG9zdG5hbWUiLCJwb3J0IiwicGF0aG5hbWUiLCJjaGFyQXQiLCJvcmlnaW5VUkwiLCJ0ZXN0IiwidXNlckFnZW50IiwicmVxdWVzdFVSTCIsIkUiLCJpbnB1dCIsImJsb2NrIiwiY2hhckNvZGUiLCJTdHJpbmciLCJvdXRwdXQiLCJjaGFycyIsImNoYXJDb2RlQXQiLCJ3cml0ZSIsImV4cGlyZXMiLCJwYXRoIiwiZG9tYWluIiwic2VjdXJlIiwiY29va2llIiwidG9HTVRTdHJpbmciLCJtYXRjaCIsInJlbW92ZSIsIm5vdyIsImhhbmRsZXJzIiwidXNlIiwiZWplY3QiLCJ0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwidGhyb3dJZlJlcXVlc3RlZCIsInRyYW5zZm9ybURhdGEiLCJpc0Fic29sdXRlVVJMIiwiY29tYmluZVVSTHMiLCJiYXNlVVJMIiwicmVhc29uIiwiZm5zIiwicmVsYXRpdmVVUkwiLCJleGVjdXRvciIsInJlc29sdmVQcm9taXNlIiwidG9rZW4iLCJhcnIiXSwibWFwcGluZ3MiOiJDQUFTLFNBQVVBLEdDQW5CLFFBQUFDLEdBQUFDLFNBQ0FDLGlCQUFBRCxHQVNBLFFBQUFFLEdBQUFGLEdBQ0EsR0FBQUcsR0FBQUMsU0FBQUMscUJBQUEsV0FDQUMsRUFBQUYsU0FBQUcsY0FBQSxTQUNBRCxHQUFBRSxLQUFBLGtCQUNBRixFQUFBRyxRQUFBLFFBQ0FILEVBQUFJLElBQUFDLEVBQUFDLEVBQUEsR0FBQVosRUFBQSxJQUFBYSxFQUFBLGlCQUVBVixFQUFBVyxZQUFBUixHQUdBLFFBQUFTLEdBQUFDLEdBRUEsTUFEQUEsTUFBQSxJQUNBLEdBQUFDLFNBQUEsU0FBQUMsRUFBQUMsR0FDQSxzQkFBQUMsZ0JBQ0EsTUFBQUQsR0FBQSxHQUFBRSxPQUFBLHNCQUNBLEtBQ0EsR0FBQUMsR0FBQSxHQUFBRixnQkFDQUcsRUFBQVosRUFBQUMsRUFBQSxHQUFBQyxFQUFBLGtCQUNBUyxHQUFBRSxLQUFBLE1BQUFELEdBQUEsR0FDQUQsRUFBQUcsUUFBQVQsRUFDQU0sRUFBQUksS0FBQSxNQUNLLE1BQUFDLEdBQ0wsTUFBQVIsR0FBQVEsR0FFQUwsRUFBQU0sbUJBQUEsV0FDQSxPQUFBTixFQUFBTyxXQUNBLE9BQUFQLEVBQUFRLE9BRUFYLEVBQUEsR0FBQUUsT0FBQSx1QkFBQUUsRUFBQSxvQkFDTSxVQUFBRCxFQUFBUSxPQUVOWixRQUNNLFVBQUFJLEVBQUFRLFFBQUEsTUFBQVIsRUFBQVEsT0FFTlgsRUFBQSxHQUFBRSxPQUFBLHVCQUFBRSxFQUFBLGlCQUNNLENBRU4sSUFDQSxH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WTBCbGhHQWtILEdBQUF5QyxRQUFBLFNBQUFtRixHQUlBLHNDQUFBK1csS0FBQS9XLEsxQmlpR00sU0FBVTVILEVBQVF5QyxFQUFTM0osR0FFakMsWTJCdGlHQWtILEdBQUF5QyxRQUFBLFNBQUErZCxFQUFBRyxHQUNBLE1BQUFBLEdBQ0FILEVBQUExYixRQUFBLGVBQUE2YixFQUFBN2IsUUFBQSxXQUNBMGIsSTNCc2pHTSxTQUFVeGdCLEVBQVF5QyxFQUFTM0osR0FFakMsWTRCMWpHQSxTQUFBaWhCLEdBQUE2RyxHQUNBLHFCQUFBQSxHQUNBLFNBQUE1SyxXQUFBLCtCQUdBLElBQUE2SyxFQUNBN1csTUFBQS9LLFFBQUEsR0FBQTdGLFNBQUEsU0FBQUMsR0FDQXduQixFQUFBeG5CLEdBR0EsSUFBQXluQixHQUFBOVcsSUFDQTRXLEdBQUEsU0FBQWhYLEdBQ0FrWCxFQUFBTCxTQUtBSyxFQUFBTCxPQUFBLEdBQUExVyxHQUFBSCxHQUNBaVgsRUFBQUMsRUFBQUwsV0ExQkEsR0FBQTFXLEdBQUFqUixFQUFBLEVBaUNBaWhCLEdBQUF2ZSxVQUFBNGtCLGlCQUFBLFdBQ0EsR0FBQXBXLEtBQUF5VyxPQUNBLEtBQUF6VyxNQUFBeVcsUUFRQTFHLEVBQUFuSCxPQUFBLFdBQ0EsR0FBQW5KLEVBSUEsUUFDQXFYLE1BSkEsR0FBQS9HLEdBQUEsU0FBQWpiLEdBQ0EySyxFQUFBM0ssSUFJQTJLLFdBSUF6SixFQUFBeUMsUUFBQXNYLEc1QjBrR00sU0FBVS9aLEVBQVF5QyxFQUFTM0osR0FFakMsWTZCOW1HQWtILEdBQUF5QyxRQUFBLFNBQUF0RixHQUNBLGdCQUFBNGpCLEdBQ0EsTUFBQTVqQixHQUFBVyxNQUFBLEtBQUFpakIiLCJmaWxlIjoiZHN0L2J1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0ZnVuY3Rpb24gaG90RGlzcG9zZUNodW5rKGNodW5rSWQpIHtcbi8qKioqKiovIFx0XHRkZWxldGUgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdO1xuLyoqKioqKi8gXHR9XG4vKioqKioqLyBcdHZhciBwYXJlbnRIb3RVcGRhdGVDYWxsYmFjayA9IHdpbmRvd1tcIndlYnBhY2tIb3RVcGRhdGVcIl07XG4vKioqKioqLyBcdHdpbmRvd1tcIndlYnBhY2tIb3RVcGRhdGVcIl0gPSBcclxuLyoqKioqKi8gXHRmdW5jdGlvbiB3ZWJwYWNrSG90VXBkYXRlQ2FsbGJhY2soY2h1bmtJZCwgbW9yZU1vZHVsZXMpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xyXG4vKioqKioqLyBcdFx0aG90QWRkVXBkYXRlQ2h1bmsoY2h1bmtJZCwgbW9yZU1vZHVsZXMpO1xyXG4vKioqKioqLyBcdFx0aWYocGFyZW50SG90VXBkYXRlQ2FsbGJhY2spIHBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrKGNodW5rSWQsIG1vcmVNb2R1bGVzKTtcclxuLyoqKioqKi8gXHR9IDtcclxuLyoqKioqKi8gXHRcclxuLyoqKioqKi8gXHRmdW5jdGlvbiBob3REb3dubG9hZFVwZGF0ZUNodW5rKGNodW5rSWQpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xyXG4vKioqKioqLyBcdFx0dmFyIGhlYWQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF07XHJcbi8qKioqKiovIFx0XHR2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcclxuLyoqKioqKi8gXHRcdHNjcmlwdC50eXBlID0gXCJ0ZXh0L2phdmFzY3JpcHRcIjtcclxuLyoqKioqKi8gXHRcdHNjcmlwdC5jaGFyc2V0ID0gXCJ1dGYtOFwiO1xyXG4vKioqKioqLyBcdFx0c2NyaXB0LnNyYyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFwiXCIgKyBjaHVua0lkICsgXCIuXCIgKyBob3RDdXJyZW50SGFzaCArIFwiLmhvdC11cGRhdGUuanNcIjtcclxuLyoqKioqKi8gXHRcdDtcclxuLyoqKioqKi8gXHRcdGhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcclxuLyoqKioqKi8gXHR9XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0ZnVuY3Rpb24gaG90RG93bmxvYWRNYW5pZmVzdChyZXF1ZXN0VGltZW91dCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXHJcbi8qKioqKiovIFx0XHRyZXF1ZXN0VGltZW91dCA9IHJlcXVlc3RUaW1lb3V0IHx8IDEwMDAwO1xyXG4vKioqKioqLyBcdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4vKioqKioqLyBcdFx0XHRpZih0eXBlb2YgWE1MSHR0cFJlcXVlc3QgPT09IFwidW5kZWZpbmVkXCIpXHJcbi8qKioqKiovIFx0XHRcdFx0cmV0dXJuIHJlamVjdChuZXcgRXJyb3IoXCJObyBicm93c2VyIHN1cHBvcnRcIikpO1xyXG4vKioqKioqLyBcdFx0XHR0cnkge1xyXG4vKioqKioqLyBcdFx0XHRcdHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcbi8qKioqKiovIFx0XHRcdFx0dmFyIHJlcXVlc3RQYXRoID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgXCJcIiArIGhvdEN1cnJlbnRIYXNoICsgXCIuaG90LXVwZGF0ZS5qc29uXCI7XHJcbi8qKioqKiovIFx0XHRcdFx0cmVxdWVzdC5vcGVuKFwiR0VUXCIsIHJlcXVlc3RQYXRoLCB0cnVlKTtcclxuLyoqKioqKi8gXHRcdFx0XHRyZXF1ZXN0LnRpbWVvdXQgPSByZXF1ZXN0VGltZW91dDtcclxuLyoqKioqKi8gXHRcdFx0XHRyZXF1ZXN0LnNlbmQobnVsbCk7XHJcbi8qKioqKiovIFx0XHRcdH0gY2F0Y2goZXJyKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0cmV0dXJuIHJlamVjdChlcnIpO1xyXG4vKioqKioqLyBcdFx0XHR9XHJcbi8qKioqKiovIFx0XHRcdHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0aWYocmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSByZXR1cm47XHJcbi8qKioqKiovIFx0XHRcdFx0aWYocmVxdWVzdC5zdGF0dXMgPT09IDApIHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdC8vIHRpbWVvdXRcclxuLyoqKioqKi8gXHRcdFx0XHRcdHJlamVjdChuZXcgRXJyb3IoXCJNYW5pZmVzdCByZXF1ZXN0IHRvIFwiICsgcmVxdWVzdFBhdGggKyBcIiB0aW1lZCBvdXQuXCIpKTtcclxuLyoqKioqKi8gXHRcdFx0XHR9IGVsc2UgaWYocmVxdWVzdC5zdGF0dXMgPT09IDQwNCkge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0Ly8gbm8gdXBkYXRlIGF2YWlsYWJsZVxyXG4vKioqKioqLyBcdFx0XHRcdFx0cmVzb2x2ZSgpO1xyXG4vKioqKioqLyBcdFx0XHRcdH0gZWxzZSBpZihyZXF1ZXN0LnN0YXR1cyAhPT0gMjAwICYmIHJlcXVlc3Quc3RhdHVzICE9PSAzMDQpIHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdC8vIG90aGVyIGZhaWx1cmVcclxuLyoqKioqKi8gXHRcdFx0XHRcdHJlamVjdChuZXcgRXJyb3IoXCJNYW5pZmVzdCByZXF1ZXN0IHRvIFwiICsgcmVxdWVzdFBhdGggKyBcIiBmYWlsZWQuXCIpKTtcclxuLyoqKioqKi8gXHRcdFx0XHR9IGVsc2Uge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0Ly8gc3VjY2Vzc1xyXG4vKioqKioqLyBcdFx0XHRcdFx0dHJ5IHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0dmFyIHVwZGF0ZSA9IEpTT04ucGFyc2UocmVxdWVzdC5yZXNwb25zZVRleHQpO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0fSBjYXRjaChlKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdHJlamVjdChlKTtcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0cmV0dXJuO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHRcdFx0cmVzb2x2ZSh1cGRhdGUpO1xyXG4vKioqKioqLyBcdFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdFx0fTtcclxuLyoqKioqKi8gXHRcdH0pO1xyXG4vKioqKioqLyBcdH1cclxuLyoqKioqKi9cbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0dmFyIGhvdEFwcGx5T25VcGRhdGUgPSB0cnVlO1xyXG4vKioqKioqLyBcdHZhciBob3RDdXJyZW50SGFzaCA9IFwiOTRiZjQ5OTUyZTllZGYyNGE0MjlcIjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xyXG4vKioqKioqLyBcdHZhciBob3RSZXF1ZXN0VGltZW91dCA9IDEwMDAwO1xyXG4vKioqKioqLyBcdHZhciBob3RDdXJyZW50TW9kdWxlRGF0YSA9IHt9O1xyXG4vKioqKioqLyBcdHZhciBob3RDdXJyZW50Q2hpbGRNb2R1bGU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcclxuLyoqKioqKi8gXHR2YXIgaG90Q3VycmVudFBhcmVudHMgPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xyXG4vKioqKioqLyBcdHZhciBob3RDdXJyZW50UGFyZW50c1RlbXAgPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdGZ1bmN0aW9uIGhvdENyZWF0ZVJlcXVpcmUobW9kdWxlSWQpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xyXG4vKioqKioqLyBcdFx0dmFyIG1lID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XHJcbi8qKioqKiovIFx0XHRpZighbWUpIHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fO1xyXG4vKioqKioqLyBcdFx0dmFyIGZuID0gZnVuY3Rpb24ocmVxdWVzdCkge1xyXG4vKioqKioqLyBcdFx0XHRpZihtZS5ob3QuYWN0aXZlKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XSkge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XS5wYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpIDwgMClcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0aW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XS5wYXJlbnRzLnB1c2gobW9kdWxlSWQpO1xyXG4vKioqKioqLyBcdFx0XHRcdH0gZWxzZSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRob3RDdXJyZW50UGFyZW50cyA9IFttb2R1bGVJZF07XHJcbi8qKioqKiovIFx0XHRcdFx0XHRob3RDdXJyZW50Q2hpbGRNb2R1bGUgPSByZXF1ZXN0O1xyXG4vKioqKioqLyBcdFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdFx0XHRpZihtZS5jaGlsZHJlbi5pbmRleE9mKHJlcXVlc3QpIDwgMClcclxuLyoqKioqKi8gXHRcdFx0XHRcdG1lLmNoaWxkcmVuLnB1c2gocmVxdWVzdCk7XHJcbi8qKioqKiovIFx0XHRcdH0gZWxzZSB7XHJcbi8qKioqKiovIFx0XHRcdFx0Y29uc29sZS53YXJuKFwiW0hNUl0gdW5leHBlY3RlZCByZXF1aXJlKFwiICsgcmVxdWVzdCArIFwiKSBmcm9tIGRpc3Bvc2VkIG1vZHVsZSBcIiArIG1vZHVsZUlkKTtcclxuLyoqKioqKi8gXHRcdFx0XHRob3RDdXJyZW50UGFyZW50cyA9IFtdO1xyXG4vKioqKioqLyBcdFx0XHR9XHJcbi8qKioqKiovIFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKHJlcXVlc3QpO1xyXG4vKioqKioqLyBcdFx0fTtcclxuLyoqKioqKi8gXHRcdHZhciBPYmplY3RGYWN0b3J5ID0gZnVuY3Rpb24gT2JqZWN0RmFjdG9yeShuYW1lKSB7XHJcbi8qKioqKiovIFx0XHRcdHJldHVybiB7XHJcbi8qKioqKiovIFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxyXG4vKioqKioqLyBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcbi8qKioqKiovIFx0XHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fW25hbWVdO1xyXG4vKioqKioqLyBcdFx0XHRcdH0sXHJcbi8qKioqKiovIFx0XHRcdFx0c2V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfX1tuYW1lXSA9IHZhbHVlO1xyXG4vKioqKioqLyBcdFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdFx0fTtcclxuLyoqKioqKi8gXHRcdH07XHJcbi8qKioqKiovIFx0XHRmb3IodmFyIG5hbWUgaW4gX193ZWJwYWNrX3JlcXVpcmVfXykge1xyXG4vKioqKioqLyBcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX193ZWJwYWNrX3JlcXVpcmVfXywgbmFtZSkgJiYgbmFtZSAhPT0gXCJlXCIpIHtcclxuLyoqKioqKi8gXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sIG5hbWUsIE9iamVjdEZhY3RvcnkobmFtZSkpO1xyXG4vKioqKioqLyBcdFx0XHR9XHJcbi8qKioqKiovIFx0XHR9XHJcbi8qKioqKiovIFx0XHRmbi5lID0gZnVuY3Rpb24oY2h1bmtJZCkge1xyXG4vKioqKioqLyBcdFx0XHRpZihob3RTdGF0dXMgPT09IFwicmVhZHlcIilcclxuLyoqKioqKi8gXHRcdFx0XHRob3RTZXRTdGF0dXMoXCJwcmVwYXJlXCIpO1xyXG4vKioqKioqLyBcdFx0XHRob3RDaHVua3NMb2FkaW5nKys7XHJcbi8qKioqKiovIFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLmUoY2h1bmtJZCkudGhlbihmaW5pc2hDaHVua0xvYWRpbmcsIGZ1bmN0aW9uKGVycikge1xyXG4vKioqKioqLyBcdFx0XHRcdGZpbmlzaENodW5rTG9hZGluZygpO1xyXG4vKioqKioqLyBcdFx0XHRcdHRocm93IGVycjtcclxuLyoqKioqKi8gXHRcdFx0fSk7XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGZpbmlzaENodW5rTG9hZGluZygpIHtcclxuLyoqKioqKi8gXHRcdFx0XHRob3RDaHVua3NMb2FkaW5nLS07XHJcbi8qKioqKiovIFx0XHRcdFx0aWYoaG90U3RhdHVzID09PSBcInByZXBhcmVcIikge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0aWYoIWhvdFdhaXRpbmdGaWxlc01hcFtjaHVua0lkXSkge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRob3RFbnN1cmVVcGRhdGVDaHVuayhjaHVua0lkKTtcclxuLyoqKioqKi8gXHRcdFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdFx0XHRcdGlmKGhvdENodW5rc0xvYWRpbmcgPT09IDAgJiYgaG90V2FpdGluZ0ZpbGVzID09PSAwKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdGhvdFVwZGF0ZURvd25sb2FkZWQoKTtcclxuLyoqKioqKi8gXHRcdFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdFx0XHR9XHJcbi8qKioqKiovIFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdH07XHJcbi8qKioqKiovIFx0XHRyZXR1cm4gZm47XHJcbi8qKioqKiovIFx0fVxyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdGZ1bmN0aW9uIGhvdENyZWF0ZU1vZHVsZShtb2R1bGVJZCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXHJcbi8qKioqKiovIFx0XHR2YXIgaG90ID0ge1xyXG4vKioqKioqLyBcdFx0XHQvLyBwcml2YXRlIHN0dWZmXHJcbi8qKioqKiovIFx0XHRcdF9hY2NlcHRlZERlcGVuZGVuY2llczoge30sXHJcbi8qKioqKiovIFx0XHRcdF9kZWNsaW5lZERlcGVuZGVuY2llczoge30sXHJcbi8qKioqKiovIFx0XHRcdF9zZWxmQWNjZXB0ZWQ6IGZhbHNlLFxyXG4vKioqKioqLyBcdFx0XHRfc2VsZkRlY2xpbmVkOiBmYWxzZSxcclxuLyoqKioqKi8gXHRcdFx0X2Rpc3Bvc2VIYW5kbGVyczogW10sXHJcbi8qKioqKiovIFx0XHRcdF9tYWluOiBob3RDdXJyZW50Q2hpbGRNb2R1bGUgIT09IG1vZHVsZUlkLFxyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdFx0XHQvLyBNb2R1bGUgQVBJXHJcbi8qKioqKiovIFx0XHRcdGFjdGl2ZTogdHJ1ZSxcclxuLyoqKioqKi8gXHRcdFx0YWNjZXB0OiBmdW5jdGlvbihkZXAsIGNhbGxiYWNrKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0aWYodHlwZW9mIGRlcCA9PT0gXCJ1bmRlZmluZWRcIilcclxuLyoqKioqKi8gXHRcdFx0XHRcdGhvdC5fc2VsZkFjY2VwdGVkID0gdHJ1ZTtcclxuLyoqKioqKi8gXHRcdFx0XHRlbHNlIGlmKHR5cGVvZiBkZXAgPT09IFwiZnVuY3Rpb25cIilcclxuLyoqKioqKi8gXHRcdFx0XHRcdGhvdC5fc2VsZkFjY2VwdGVkID0gZGVwO1xyXG4vKioqKioqLyBcdFx0XHRcdGVsc2UgaWYodHlwZW9mIGRlcCA9PT0gXCJvYmplY3RcIilcclxuLyoqKioqKi8gXHRcdFx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBkZXAubGVuZ3RoOyBpKyspXHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uKCkge307XHJcbi8qKioqKiovIFx0XHRcdFx0ZWxzZVxyXG4vKioqKioqLyBcdFx0XHRcdFx0aG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBdID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24oKSB7fTtcclxuLyoqKioqKi8gXHRcdFx0fSxcclxuLyoqKioqKi8gXHRcdFx0ZGVjbGluZTogZnVuY3Rpb24oZGVwKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0aWYodHlwZW9mIGRlcCA9PT0gXCJ1bmRlZmluZWRcIilcclxuLyoqKioqKi8gXHRcdFx0XHRcdGhvdC5fc2VsZkRlY2xpbmVkID0gdHJ1ZTtcclxuLyoqKioqKi8gXHRcdFx0XHRlbHNlIGlmKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIpXHJcbi8qKioqKiovIFx0XHRcdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKVxyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSB0cnVlO1xyXG4vKioqKioqLyBcdFx0XHRcdGVsc2VcclxuLyoqKioqKi8gXHRcdFx0XHRcdGhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbZGVwXSA9IHRydWU7XHJcbi8qKioqKiovIFx0XHRcdH0sXHJcbi8qKioqKiovIFx0XHRcdGRpc3Bvc2U6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0aG90Ll9kaXNwb3NlSGFuZGxlcnMucHVzaChjYWxsYmFjayk7XHJcbi8qKioqKiovIFx0XHRcdH0sXHJcbi8qKioqKiovIFx0XHRcdGFkZERpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbihjYWxsYmFjaykge1xyXG4vKioqKioqLyBcdFx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xyXG4vKioqKioqLyBcdFx0XHR9LFxyXG4vKioqKioqLyBcdFx0XHRyZW1vdmVEaXNwb3NlSGFuZGxlcjogZnVuY3Rpb24oY2FsbGJhY2spIHtcclxuLyoqKioqKi8gXHRcdFx0XHR2YXIgaWR4ID0gaG90Ll9kaXNwb3NlSGFuZGxlcnMuaW5kZXhPZihjYWxsYmFjayk7XHJcbi8qKioqKiovIFx0XHRcdFx0aWYoaWR4ID49IDApIGhvdC5fZGlzcG9zZUhhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xyXG4vKioqKioqLyBcdFx0XHR9LFxyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdFx0XHQvLyBNYW5hZ2VtZW50IEFQSVxyXG4vKioqKioqLyBcdFx0XHRjaGVjazogaG90Q2hlY2ssXHJcbi8qKioqKiovIFx0XHRcdGFwcGx5OiBob3RBcHBseSxcclxuLyoqKioqKi8gXHRcdFx0c3RhdHVzOiBmdW5jdGlvbihsKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0aWYoIWwpIHJldHVybiBob3RTdGF0dXM7XHJcbi8qKioqKiovIFx0XHRcdFx0aG90U3RhdHVzSGFuZGxlcnMucHVzaChsKTtcclxuLyoqKioqKi8gXHRcdFx0fSxcclxuLyoqKioqKi8gXHRcdFx0YWRkU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24obCkge1xyXG4vKioqKioqLyBcdFx0XHRcdGhvdFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7XHJcbi8qKioqKiovIFx0XHRcdH0sXHJcbi8qKioqKiovIFx0XHRcdHJlbW92ZVN0YXR1c0hhbmRsZXI6IGZ1bmN0aW9uKGwpIHtcclxuLyoqKioqKi8gXHRcdFx0XHR2YXIgaWR4ID0gaG90U3RhdHVzSGFuZGxlcnMuaW5kZXhPZihsKTtcclxuLyoqKioqKi8gXHRcdFx0XHRpZihpZHggPj0gMCkgaG90U3RhdHVzSGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XHJcbi8qKioqKiovIFx0XHRcdH0sXHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0XHRcdC8vaW5oZXJpdCBmcm9tIHByZXZpb3VzIGRpc3Bvc2UgY2FsbFxyXG4vKioqKioqLyBcdFx0XHRkYXRhOiBob3RDdXJyZW50TW9kdWxlRGF0YVttb2R1bGVJZF1cclxuLyoqKioqKi8gXHRcdH07XHJcbi8qKioqKiovIFx0XHRob3RDdXJyZW50Q2hpbGRNb2R1bGUgPSB1bmRlZmluZWQ7XHJcbi8qKioqKiovIFx0XHRyZXR1cm4gaG90O1xyXG4vKioqKioqLyBcdH1cclxuLyoqKioqKi8gXHRcclxuLyoqKioqKi8gXHR2YXIgaG90U3RhdHVzSGFuZGxlcnMgPSBbXTtcclxuLyoqKioqKi8gXHR2YXIgaG90U3RhdHVzID0gXCJpZGxlXCI7XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0ZnVuY3Rpb24gaG90U2V0U3RhdHVzKG5ld1N0YXR1cykge1xyXG4vKioqKioqLyBcdFx0aG90U3RhdHVzID0gbmV3U3RhdHVzO1xyXG4vKioqKioqLyBcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGhvdFN0YXR1c0hhbmRsZXJzLmxlbmd0aDsgaSsrKVxyXG4vKioqKioqLyBcdFx0XHRob3RTdGF0dXNIYW5kbGVyc1tpXS5jYWxsKG51bGwsIG5ld1N0YXR1cyk7XHJcbi8qKioqKiovIFx0fVxyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdC8vIHdoaWxlIGRvd25sb2FkaW5nXHJcbi8qKioqKiovIFx0dmFyIGhvdFdhaXRpbmdGaWxlcyA9IDA7XHJcbi8qKioqKiovIFx0dmFyIGhvdENodW5rc0xvYWRpbmcgPSAwO1xyXG4vKioqKioqLyBcdHZhciBob3RXYWl0aW5nRmlsZXNNYXAgPSB7fTtcclxuLyoqKioqKi8gXHR2YXIgaG90UmVxdWVzdGVkRmlsZXNNYXAgPSB7fTtcclxuLyoqKioqKi8gXHR2YXIgaG90QXZhaWxhYmxlRmlsZXNNYXAgPSB7fTtcclxuLyoqKioqKi8gXHR2YXIgaG90RGVmZXJyZWQ7XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0Ly8gVGhlIHVwZGF0ZSBpbmZvXHJcbi8qKioqKiovIFx0dmFyIGhvdFVwZGF0ZSwgaG90VXBkYXRlTmV3SGFzaDtcclxuLyoqKioqKi8gXHRcclxuLyoqKioqKi8gXHRmdW5jdGlvbiB0b01vZHVsZUlkKGlkKSB7XHJcbi8qKioqKiovIFx0XHR2YXIgaXNOdW1iZXIgPSAoK2lkKSArIFwiXCIgPT09IGlkO1xyXG4vKioqKioqLyBcdFx0cmV0dXJuIGlzTnVtYmVyID8gK2lkIDogaWQ7XHJcbi8qKioqKiovIFx0fVxyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdGZ1bmN0aW9uIGhvdENoZWNrKGFwcGx5KSB7XHJcbi8qKioqKiovIFx0XHRpZihob3RTdGF0dXMgIT09IFwiaWRsZVwiKSB0aHJvdyBuZXcgRXJyb3IoXCJjaGVjaygpIGlzIG9ubHkgYWxsb3dlZCBpbiBpZGxlIHN0YXR1c1wiKTtcclxuLyoqKioqKi8gXHRcdGhvdEFwcGx5T25VcGRhdGUgPSBhcHBseTtcclxuLyoqKioqKi8gXHRcdGhvdFNldFN0YXR1cyhcImNoZWNrXCIpO1xyXG4vKioqKioqLyBcdFx0cmV0dXJuIGhvdERvd25sb2FkTWFuaWZlc3QoaG90UmVxdWVzdFRpbWVvdXQpLnRoZW4oZnVuY3Rpb24odXBkYXRlKSB7XHJcbi8qKioqKiovIFx0XHRcdGlmKCF1cGRhdGUpIHtcclxuLyoqKioqKi8gXHRcdFx0XHRob3RTZXRTdGF0dXMoXCJpZGxlXCIpO1xyXG4vKioqKioqLyBcdFx0XHRcdHJldHVybiBudWxsO1xyXG4vKioqKioqLyBcdFx0XHR9XHJcbi8qKioqKiovIFx0XHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwID0ge307XHJcbi8qKioqKiovIFx0XHRcdGhvdFdhaXRpbmdGaWxlc01hcCA9IHt9O1xyXG4vKioqKioqLyBcdFx0XHRob3RBdmFpbGFibGVGaWxlc01hcCA9IHVwZGF0ZS5jO1xyXG4vKioqKioqLyBcdFx0XHRob3RVcGRhdGVOZXdIYXNoID0gdXBkYXRlLmg7XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0XHRcdGhvdFNldFN0YXR1cyhcInByZXBhcmVcIik7XHJcbi8qKioqKiovIFx0XHRcdHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbi8qKioqKiovIFx0XHRcdFx0aG90RGVmZXJyZWQgPSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRyZXNvbHZlOiByZXNvbHZlLFxyXG4vKioqKioqLyBcdFx0XHRcdFx0cmVqZWN0OiByZWplY3RcclxuLyoqKioqKi8gXHRcdFx0XHR9O1xyXG4vKioqKioqLyBcdFx0XHR9KTtcclxuLyoqKioqKi8gXHRcdFx0aG90VXBkYXRlID0ge307XHJcbi8qKioqKiovIFx0XHRcdHZhciBjaHVua0lkID0gMDtcclxuLyoqKioqKi8gXHRcdFx0eyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWxvbmUtYmxvY2tzXHJcbi8qKioqKiovIFx0XHRcdFx0LypnbG9iYWxzIGNodW5rSWQgKi9cclxuLyoqKioqKi8gXHRcdFx0XHRob3RFbnN1cmVVcGRhdGVDaHVuayhjaHVua0lkKTtcclxuLyoqKioqKi8gXHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHRpZihob3RTdGF0dXMgPT09IFwicHJlcGFyZVwiICYmIGhvdENodW5rc0xvYWRpbmcgPT09IDAgJiYgaG90V2FpdGluZ0ZpbGVzID09PSAwKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0aG90VXBkYXRlRG93bmxvYWRlZCgpO1xyXG4vKioqKioqLyBcdFx0XHR9XHJcbi8qKioqKiovIFx0XHRcdHJldHVybiBwcm9taXNlO1xyXG4vKioqKioqLyBcdFx0fSk7XHJcbi8qKioqKiovIFx0fVxyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdGZ1bmN0aW9uIGhvdEFkZFVwZGF0ZUNodW5rKGNodW5rSWQsIG1vcmVNb2R1bGVzKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcclxuLyoqKioqKi8gXHRcdGlmKCFob3RBdmFpbGFibGVGaWxlc01hcFtjaHVua0lkXSB8fCAhaG90UmVxdWVzdGVkRmlsZXNNYXBbY2h1bmtJZF0pXHJcbi8qKioqKiovIFx0XHRcdHJldHVybjtcclxuLyoqKioqKi8gXHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdID0gZmFsc2U7XHJcbi8qKioqKiovIFx0XHRmb3IodmFyIG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XHJcbi8qKioqKiovIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0aG90VXBkYXRlW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcclxuLyoqKioqKi8gXHRcdFx0fVxyXG4vKioqKioqLyBcdFx0fVxyXG4vKioqKioqLyBcdFx0aWYoLS1ob3RXYWl0aW5nRmlsZXMgPT09IDAgJiYgaG90Q2h1bmtzTG9hZGluZyA9PT0gMCkge1xyXG4vKioqKioqLyBcdFx0XHRob3RVcGRhdGVEb3dubG9hZGVkKCk7XHJcbi8qKioqKiovIFx0XHR9XHJcbi8qKioqKiovIFx0fVxyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdGZ1bmN0aW9uIGhvdEVuc3VyZVVwZGF0ZUNodW5rKGNodW5rSWQpIHtcclxuLyoqKioqKi8gXHRcdGlmKCFob3RBdmFpbGFibGVGaWxlc01hcFtjaHVua0lkXSkge1xyXG4vKioqKioqLyBcdFx0XHRob3RXYWl0aW5nRmlsZXNNYXBbY2h1bmtJZF0gPSB0cnVlO1xyXG4vKioqKioqLyBcdFx0fSBlbHNlIHtcclxuLyoqKioqKi8gXHRcdFx0aG90UmVxdWVzdGVkRmlsZXNNYXBbY2h1bmtJZF0gPSB0cnVlO1xyXG4vKioqKioqLyBcdFx0XHRob3RXYWl0aW5nRmlsZXMrKztcclxuLyoqKioqKi8gXHRcdFx0aG90RG93bmxvYWRVcGRhdGVDaHVuayhjaHVua0lkKTtcclxuLyoqKioqKi8gXHRcdH1cclxuLyoqKioqKi8gXHR9XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0ZnVuY3Rpb24gaG90VXBkYXRlRG93bmxvYWRlZCgpIHtcclxuLyoqKioqKi8gXHRcdGhvdFNldFN0YXR1cyhcInJlYWR5XCIpO1xyXG4vKioqKioqLyBcdFx0dmFyIGRlZmVycmVkID0gaG90RGVmZXJyZWQ7XHJcbi8qKioqKiovIFx0XHRob3REZWZlcnJlZCA9IG51bGw7XHJcbi8qKioqKiovIFx0XHRpZighZGVmZXJyZWQpIHJldHVybjtcclxuLyoqKioqKi8gXHRcdGlmKGhvdEFwcGx5T25VcGRhdGUpIHtcclxuLyoqKioqKi8gXHRcdFx0Ly8gV3JhcCBkZWZlcnJlZCBvYmplY3QgaW4gUHJvbWlzZSB0byBtYXJrIGl0IGFzIGEgd2VsbC1oYW5kbGVkIFByb21pc2UgdG9cclxuLyoqKioqKi8gXHRcdFx0Ly8gYXZvaWQgdHJpZ2dlcmluZyB1bmNhdWdodCBleGNlcHRpb24gd2FybmluZyBpbiBDaHJvbWUuXHJcbi8qKioqKiovIFx0XHRcdC8vIFNlZSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NjU2NjZcclxuLyoqKioqKi8gXHRcdFx0UHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbigpIHtcclxuLyoqKioqKi8gXHRcdFx0XHRyZXR1cm4gaG90QXBwbHkoaG90QXBwbHlPblVwZGF0ZSk7XHJcbi8qKioqKiovIFx0XHRcdH0pLnRoZW4oXHJcbi8qKioqKiovIFx0XHRcdFx0ZnVuY3Rpb24ocmVzdWx0KSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlKHJlc3VsdCk7XHJcbi8qKioqKiovIFx0XHRcdFx0fSxcclxuLyoqKioqKi8gXHRcdFx0XHRmdW5jdGlvbihlcnIpIHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdChlcnIpO1xyXG4vKioqKioqLyBcdFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdFx0KTtcclxuLyoqKioqKi8gXHRcdH0gZWxzZSB7XHJcbi8qKioqKiovIFx0XHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbXTtcclxuLyoqKioqKi8gXHRcdFx0Zm9yKHZhciBpZCBpbiBob3RVcGRhdGUpIHtcclxuLyoqKioqKi8gXHRcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaG90VXBkYXRlLCBpZCkpIHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKHRvTW9kdWxlSWQoaWQpKTtcclxuLyoqKioqKi8gXHRcdFx0XHR9XHJcbi8qKioqKiovIFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZShvdXRkYXRlZE1vZHVsZXMpO1xyXG4vKioqKioqLyBcdFx0fVxyXG4vKioqKioqLyBcdH1cclxuLyoqKioqKi8gXHRcclxuLyoqKioqKi8gXHRmdW5jdGlvbiBob3RBcHBseShvcHRpb25zKSB7XHJcbi8qKioqKiovIFx0XHRpZihob3RTdGF0dXMgIT09IFwicmVhZHlcIikgdGhyb3cgbmV3IEVycm9yKFwiYXBwbHkoKSBpcyBvbmx5IGFsbG93ZWQgaW4gcmVhZHkgc3RhdHVzXCIpO1xyXG4vKioqKioqLyBcdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0XHR2YXIgY2I7XHJcbi8qKioqKiovIFx0XHR2YXIgaTtcclxuLyoqKioqKi8gXHRcdHZhciBqO1xyXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZTtcclxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGVJZDtcclxuLyoqKioqKi8gXHRcclxuLyoqKioqKi8gXHRcdGZ1bmN0aW9uIGdldEFmZmVjdGVkU3R1ZmYodXBkYXRlTW9kdWxlSWQpIHtcclxuLyoqKioqKi8gXHRcdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFt1cGRhdGVNb2R1bGVJZF07XHJcbi8qKioqKiovIFx0XHRcdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdFx0XHR2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMuc2xpY2UoKS5tYXAoZnVuY3Rpb24oaWQpIHtcclxuLyoqKioqKi8gXHRcdFx0XHRyZXR1cm4ge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0Y2hhaW46IFtpZF0sXHJcbi8qKioqKiovIFx0XHRcdFx0XHRpZDogaWRcclxuLyoqKioqKi8gXHRcdFx0XHR9O1xyXG4vKioqKioqLyBcdFx0XHR9KTtcclxuLyoqKioqKi8gXHRcdFx0d2hpbGUocXVldWUubGVuZ3RoID4gMCkge1xyXG4vKioqKioqLyBcdFx0XHRcdHZhciBxdWV1ZUl0ZW0gPSBxdWV1ZS5wb3AoKTtcclxuLyoqKioqKi8gXHRcdFx0XHR2YXIgbW9kdWxlSWQgPSBxdWV1ZUl0ZW0uaWQ7XHJcbi8qKioqKiovIFx0XHRcdFx0dmFyIGNoYWluID0gcXVldWVJdGVtLmNoYWluO1xyXG4vKioqKioqLyBcdFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xyXG4vKioqKioqLyBcdFx0XHRcdGlmKCFtb2R1bGUgfHwgbW9kdWxlLmhvdC5fc2VsZkFjY2VwdGVkKVxyXG4vKioqKioqLyBcdFx0XHRcdFx0Y29udGludWU7XHJcbi8qKioqKiovIFx0XHRcdFx0aWYobW9kdWxlLmhvdC5fc2VsZkRlY2xpbmVkKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRyZXR1cm4ge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtZGVjbGluZWRcIixcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLFxyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcclxuLyoqKioqKi8gXHRcdFx0XHRcdH07XHJcbi8qKioqKiovIFx0XHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHRcdGlmKG1vZHVsZS5ob3QuX21haW4pIHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdHJldHVybiB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdHR5cGU6IFwidW5hY2NlcHRlZFwiLFxyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4sXHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxyXG4vKioqKioqLyBcdFx0XHRcdFx0fTtcclxuLyoqKioqKi8gXHRcdFx0XHR9XHJcbi8qKioqKiovIFx0XHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IG1vZHVsZS5wYXJlbnRzLmxlbmd0aDsgaSsrKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHR2YXIgcGFyZW50SWQgPSBtb2R1bGUucGFyZW50c1tpXTtcclxuLyoqKioqKi8gXHRcdFx0XHRcdHZhciBwYXJlbnQgPSBpbnN0YWxsZWRNb2R1bGVzW3BhcmVudElkXTtcclxuLyoqKioqKi8gXHRcdFx0XHRcdGlmKCFwYXJlbnQpIGNvbnRpbnVlO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0aWYocGFyZW50LmhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdHJldHVybiB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0dHlwZTogXCJkZWNsaW5lZFwiLFxyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbi5jb25jYXQoW3BhcmVudElkXSksXHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdHBhcmVudElkOiBwYXJlbnRJZFxyXG4vKioqKioqLyBcdFx0XHRcdFx0XHR9O1xyXG4vKioqKioqLyBcdFx0XHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHRcdFx0aWYob3V0ZGF0ZWRNb2R1bGVzLmluZGV4T2YocGFyZW50SWQpID49IDApIGNvbnRpbnVlO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0aWYocGFyZW50LmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdGlmKCFvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0pXHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdID0gW107XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSwgW21vZHVsZUlkXSk7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHRcdFx0ZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXTtcclxuLyoqKioqKi8gXHRcdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKHBhcmVudElkKTtcclxuLyoqKioqKi8gXHRcdFx0XHRcdHF1ZXVlLnB1c2goe1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4uY29uY2F0KFtwYXJlbnRJZF0pLFxyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRpZDogcGFyZW50SWRcclxuLyoqKioqKi8gXHRcdFx0XHRcdH0pO1xyXG4vKioqKioqLyBcdFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdFx0fVxyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdFx0XHRyZXR1cm4ge1xyXG4vKioqKioqLyBcdFx0XHRcdHR5cGU6IFwiYWNjZXB0ZWRcIixcclxuLyoqKioqKi8gXHRcdFx0XHRtb2R1bGVJZDogdXBkYXRlTW9kdWxlSWQsXHJcbi8qKioqKiovIFx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzOiBvdXRkYXRlZE1vZHVsZXMsXHJcbi8qKioqKiovIFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXM6IG91dGRhdGVkRGVwZW5kZW5jaWVzXHJcbi8qKioqKiovIFx0XHRcdH07XHJcbi8qKioqKiovIFx0XHR9XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0XHRmdW5jdGlvbiBhZGRBbGxUb1NldChhLCBiKSB7XHJcbi8qKioqKiovIFx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0dmFyIGl0ZW0gPSBiW2ldO1xyXG4vKioqKioqLyBcdFx0XHRcdGlmKGEuaW5kZXhPZihpdGVtKSA8IDApXHJcbi8qKioqKiovIFx0XHRcdFx0XHRhLnB1c2goaXRlbSk7XHJcbi8qKioqKiovIFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdH1cclxuLyoqKioqKi8gXHRcclxuLyoqKioqKi8gXHRcdC8vIGF0IGJlZ2luIGFsbCB1cGRhdGVzIG1vZHVsZXMgYXJlIG91dGRhdGVkXHJcbi8qKioqKiovIFx0XHQvLyB0aGUgXCJvdXRkYXRlZFwiIHN0YXR1cyBjYW4gcHJvcGFnYXRlIHRvIHBhcmVudHMgaWYgdGhleSBkb24ndCBhY2NlcHQgdGhlIGNoaWxkcmVuXHJcbi8qKioqKiovIFx0XHR2YXIgb3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSB7fTtcclxuLyoqKioqKi8gXHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbXTtcclxuLyoqKioqKi8gXHRcdHZhciBhcHBsaWVkVXBkYXRlID0ge307XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0XHR2YXIgd2FyblVuZXhwZWN0ZWRSZXF1aXJlID0gZnVuY3Rpb24gd2FyblVuZXhwZWN0ZWRSZXF1aXJlKCkge1xyXG4vKioqKioqLyBcdFx0XHRjb25zb2xlLndhcm4oXCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIgKyByZXN1bHQubW9kdWxlSWQgKyBcIikgdG8gZGlzcG9zZWQgbW9kdWxlXCIpO1xyXG4vKioqKioqLyBcdFx0fTtcclxuLyoqKioqKi8gXHRcclxuLyoqKioqKi8gXHRcdGZvcih2YXIgaWQgaW4gaG90VXBkYXRlKSB7XHJcbi8qKioqKiovIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChob3RVcGRhdGUsIGlkKSkge1xyXG4vKioqKioqLyBcdFx0XHRcdG1vZHVsZUlkID0gdG9Nb2R1bGVJZChpZCk7XHJcbi8qKioqKiovIFx0XHRcdFx0dmFyIHJlc3VsdDtcclxuLyoqKioqKi8gXHRcdFx0XHRpZihob3RVcGRhdGVbaWRdKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRyZXN1bHQgPSBnZXRBZmZlY3RlZFN0dWZmKG1vZHVsZUlkKTtcclxuLyoqKioqKi8gXHRcdFx0XHR9IGVsc2Uge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0cmVzdWx0ID0ge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHR0eXBlOiBcImRpc3Bvc2VkXCIsXHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBpZFxyXG4vKioqKioqLyBcdFx0XHRcdFx0fTtcclxuLyoqKioqKi8gXHRcdFx0XHR9XHJcbi8qKioqKiovIFx0XHRcdFx0dmFyIGFib3J0RXJyb3IgPSBmYWxzZTtcclxuLyoqKioqKi8gXHRcdFx0XHR2YXIgZG9BcHBseSA9IGZhbHNlO1xyXG4vKioqKioqLyBcdFx0XHRcdHZhciBkb0Rpc3Bvc2UgPSBmYWxzZTtcclxuLyoqKioqKi8gXHRcdFx0XHR2YXIgY2hhaW5JbmZvID0gXCJcIjtcclxuLyoqKioqKi8gXHRcdFx0XHRpZihyZXN1bHQuY2hhaW4pIHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdGNoYWluSW5mbyA9IFwiXFxuVXBkYXRlIHByb3BhZ2F0aW9uOiBcIiArIHJlc3VsdC5jaGFpbi5qb2luKFwiIC0+IFwiKTtcclxuLyoqKioqKi8gXHRcdFx0XHR9XHJcbi8qKioqKiovIFx0XHRcdFx0c3dpdGNoKHJlc3VsdC50eXBlKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRjYXNlIFwic2VsZi1kZWNsaW5lZFwiOlxyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRpZihvcHRpb25zLm9uRGVjbGluZWQpXHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkRlY2xpbmVkKHJlc3VsdCk7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdGlmKCFvcHRpb25zLmlnbm9yZURlY2xpbmVkKVxyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXCJBYm9ydGVkIGJlY2F1c2Ugb2Ygc2VsZiBkZWNsaW5lOiBcIiArIHJlc3VsdC5tb2R1bGVJZCArIGNoYWluSW5mbyk7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdGJyZWFrO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0Y2FzZSBcImRlY2xpbmVkXCI6XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdGlmKG9wdGlvbnMub25EZWNsaW5lZClcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTtcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0aWYoIW9wdGlvbnMuaWdub3JlRGVjbGluZWQpXHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcIkFib3J0ZWQgYmVjYXVzZSBvZiBkZWNsaW5lZCBkZXBlbmRlbmN5OiBcIiArIHJlc3VsdC5tb2R1bGVJZCArIFwiIGluIFwiICsgcmVzdWx0LnBhcmVudElkICsgY2hhaW5JbmZvKTtcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0YnJlYWs7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRjYXNlIFwidW5hY2NlcHRlZFwiOlxyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRpZihvcHRpb25zLm9uVW5hY2NlcHRlZClcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uVW5hY2NlcHRlZChyZXN1bHQpO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRpZighb3B0aW9ucy5pZ25vcmVVbmFjY2VwdGVkKVxyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXCJBYm9ydGVkIGJlY2F1c2UgXCIgKyBtb2R1bGVJZCArIFwiIGlzIG5vdCBhY2NlcHRlZFwiICsgY2hhaW5JbmZvKTtcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0YnJlYWs7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRjYXNlIFwiYWNjZXB0ZWRcIjpcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0aWYob3B0aW9ucy5vbkFjY2VwdGVkKVxyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25BY2NlcHRlZChyZXN1bHQpO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRkb0FwcGx5ID0gdHJ1ZTtcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0YnJlYWs7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRjYXNlIFwiZGlzcG9zZWRcIjpcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0aWYob3B0aW9ucy5vbkRpc3Bvc2VkKVxyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25EaXNwb3NlZChyZXN1bHQpO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRkb0Rpc3Bvc2UgPSB0cnVlO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRicmVhaztcclxuLyoqKioqKi8gXHRcdFx0XHRcdGRlZmF1bHQ6XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIlVuZXhjZXB0aW9uIHR5cGUgXCIgKyByZXN1bHQudHlwZSk7XHJcbi8qKioqKiovIFx0XHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHRcdGlmKGFib3J0RXJyb3IpIHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdGhvdFNldFN0YXR1cyhcImFib3J0XCIpO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KGFib3J0RXJyb3IpO1xyXG4vKioqKioqLyBcdFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdFx0XHRpZihkb0FwcGx5KSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSA9IGhvdFVwZGF0ZVttb2R1bGVJZF07XHJcbi8qKioqKiovIFx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIHJlc3VsdC5vdXRkYXRlZE1vZHVsZXMpO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0Zm9yKG1vZHVsZUlkIGluIHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llcykge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzLCBtb2R1bGVJZCkpIHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRpZighb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKVxyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdID0gW107XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdLCByZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKTtcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdFx0XHRpZihkb0Rpc3Bvc2UpIHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkTW9kdWxlcywgW3Jlc3VsdC5tb2R1bGVJZF0pO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSB3YXJuVW5leHBlY3RlZFJlcXVpcmU7XHJcbi8qKioqKiovIFx0XHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHR9XHJcbi8qKioqKiovIFx0XHR9XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0XHQvLyBTdG9yZSBzZWxmIGFjY2VwdGVkIG91dGRhdGVkIG1vZHVsZXMgdG8gcmVxdWlyZSB0aGVtIGxhdGVyIGJ5IHRoZSBtb2R1bGUgc3lzdGVtXHJcbi8qKioqKiovIFx0XHR2YXIgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzID0gW107XHJcbi8qKioqKiovIFx0XHRmb3IoaSA9IDA7IGkgPCBvdXRkYXRlZE1vZHVsZXMubGVuZ3RoOyBpKyspIHtcclxuLyoqKioqKi8gXHRcdFx0bW9kdWxlSWQgPSBvdXRkYXRlZE1vZHVsZXNbaV07XHJcbi8qKioqKiovIFx0XHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdICYmIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmhvdC5fc2VsZkFjY2VwdGVkKVxyXG4vKioqKioqLyBcdFx0XHRcdG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5wdXNoKHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdG1vZHVsZTogbW9kdWxlSWQsXHJcbi8qKioqKiovIFx0XHRcdFx0XHRlcnJvckhhbmRsZXI6IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmhvdC5fc2VsZkFjY2VwdGVkXHJcbi8qKioqKiovIFx0XHRcdFx0fSk7XHJcbi8qKioqKiovIFx0XHR9XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0XHQvLyBOb3cgaW4gXCJkaXNwb3NlXCIgcGhhc2VcclxuLyoqKioqKi8gXHRcdGhvdFNldFN0YXR1cyhcImRpc3Bvc2VcIik7XHJcbi8qKioqKiovIFx0XHRPYmplY3Qua2V5cyhob3RBdmFpbGFibGVGaWxlc01hcCkuZm9yRWFjaChmdW5jdGlvbihjaHVua0lkKSB7XHJcbi8qKioqKiovIFx0XHRcdGlmKGhvdEF2YWlsYWJsZUZpbGVzTWFwW2NodW5rSWRdID09PSBmYWxzZSkge1xyXG4vKioqKioqLyBcdFx0XHRcdGhvdERpc3Bvc2VDaHVuayhjaHVua0lkKTtcclxuLyoqKioqKi8gXHRcdFx0fVxyXG4vKioqKioqLyBcdFx0fSk7XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0XHR2YXIgaWR4O1xyXG4vKioqKioqLyBcdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLnNsaWNlKCk7XHJcbi8qKioqKiovIFx0XHR3aGlsZShxdWV1ZS5sZW5ndGggPiAwKSB7XHJcbi8qKioqKiovIFx0XHRcdG1vZHVsZUlkID0gcXVldWUucG9wKCk7XHJcbi8qKioqKiovIFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xyXG4vKioqKioqLyBcdFx0XHRpZighbW9kdWxlKSBjb250aW51ZTtcclxuLyoqKioqKi8gXHRcclxuLyoqKioqKi8gXHRcdFx0dmFyIGRhdGEgPSB7fTtcclxuLyoqKioqKi8gXHRcclxuLyoqKioqKi8gXHRcdFx0Ly8gQ2FsbCBkaXNwb3NlIGhhbmRsZXJzXHJcbi8qKioqKiovIFx0XHRcdHZhciBkaXNwb3NlSGFuZGxlcnMgPSBtb2R1bGUuaG90Ll9kaXNwb3NlSGFuZGxlcnM7XHJcbi8qKioqKiovIFx0XHRcdGZvcihqID0gMDsgaiA8IGRpc3Bvc2VIYW5kbGVycy5sZW5ndGg7IGorKykge1xyXG4vKioqKioqLyBcdFx0XHRcdGNiID0gZGlzcG9zZUhhbmRsZXJzW2pdO1xyXG4vKioqKioqLyBcdFx0XHRcdGNiKGRhdGEpO1xyXG4vKioqKioqLyBcdFx0XHR9XHJcbi8qKioqKiovIFx0XHRcdGhvdEN1cnJlbnRNb2R1bGVEYXRhW21vZHVsZUlkXSA9IGRhdGE7XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0XHRcdC8vIGRpc2FibGUgbW9kdWxlICh0aGlzIGRpc2FibGVzIHJlcXVpcmVzIGZyb20gdGhpcyBtb2R1bGUpXHJcbi8qKioqKiovIFx0XHRcdG1vZHVsZS5ob3QuYWN0aXZlID0gZmFsc2U7XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0XHRcdC8vIHJlbW92ZSBtb2R1bGUgZnJvbSBjYWNoZVxyXG4vKioqKioqLyBcdFx0XHRkZWxldGUgaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0XHRcdC8vIHdoZW4gZGlzcG9zaW5nIHRoZXJlIGlzIG5vIG5lZWQgdG8gY2FsbCBkaXNwb3NlIGhhbmRsZXJcclxuLyoqKioqKi8gXHRcdFx0ZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcclxuLyoqKioqKi8gXHRcclxuLyoqKioqKi8gXHRcdFx0Ly8gcmVtb3ZlIFwicGFyZW50c1wiIHJlZmVyZW5jZXMgZnJvbSBhbGwgY2hpbGRyZW5cclxuLyoqKioqKi8gXHRcdFx0Zm9yKGogPSAwOyBqIDwgbW9kdWxlLmNoaWxkcmVuLmxlbmd0aDsgaisrKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0dmFyIGNoaWxkID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGUuY2hpbGRyZW5bal1dO1xyXG4vKioqKioqLyBcdFx0XHRcdGlmKCFjaGlsZCkgY29udGludWU7XHJcbi8qKioqKiovIFx0XHRcdFx0aWR4ID0gY2hpbGQucGFyZW50cy5pbmRleE9mKG1vZHVsZUlkKTtcclxuLyoqKioqKi8gXHRcdFx0XHRpZihpZHggPj0gMCkge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0Y2hpbGQucGFyZW50cy5zcGxpY2UoaWR4LCAxKTtcclxuLyoqKioqKi8gXHRcdFx0XHR9XHJcbi8qKioqKiovIFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdH1cclxuLyoqKioqKi8gXHRcclxuLyoqKioqKi8gXHRcdC8vIHJlbW92ZSBvdXRkYXRlZCBkZXBlbmRlbmN5IGZyb20gbW9kdWxlIGNoaWxkcmVuXHJcbi8qKioqKiovIFx0XHR2YXIgZGVwZW5kZW5jeTtcclxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcztcclxuLyoqKioqKi8gXHRcdGZvcihtb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykge1xyXG4vKioqKioqLyBcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG1vZHVsZUlkKSkge1xyXG4vKioqKioqLyBcdFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xyXG4vKioqKioqLyBcdFx0XHRcdGlmKG1vZHVsZSkge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0bW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XHJcbi8qKioqKiovIFx0XHRcdFx0XHRmb3IoaiA9IDA7IGogPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGorKykge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbal07XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdGlkeCA9IG1vZHVsZS5jaGlsZHJlbi5pbmRleE9mKGRlcGVuZGVuY3kpO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRpZihpZHggPj0gMCkgbW9kdWxlLmNoaWxkcmVuLnNwbGljZShpZHgsIDEpO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdFx0fVxyXG4vKioqKioqLyBcdFx0fVxyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdFx0Ly8gTm90IGluIFwiYXBwbHlcIiBwaGFzZVxyXG4vKioqKioqLyBcdFx0aG90U2V0U3RhdHVzKFwiYXBwbHlcIik7XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0XHRob3RDdXJyZW50SGFzaCA9IGhvdFVwZGF0ZU5ld0hhc2g7XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0XHQvLyBpbnNlcnQgbmV3IGNvZGVcclxuLyoqKioqKi8gXHRcdGZvcihtb2R1bGVJZCBpbiBhcHBsaWVkVXBkYXRlKSB7XHJcbi8qKioqKiovIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhcHBsaWVkVXBkYXRlLCBtb2R1bGVJZCkpIHtcclxuLyoqKioqKi8gXHRcdFx0XHRtb2R1bGVzW21vZHVsZUlkXSA9IGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdO1xyXG4vKioqKioqLyBcdFx0XHR9XHJcbi8qKioqKiovIFx0XHR9XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0XHQvLyBjYWxsIGFjY2VwdCBoYW5kbGVyc1xyXG4vKioqKioqLyBcdFx0dmFyIGVycm9yID0gbnVsbDtcclxuLyoqKioqKi8gXHRcdGZvcihtb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykge1xyXG4vKioqKioqLyBcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG1vZHVsZUlkKSkge1xyXG4vKioqKioqLyBcdFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xyXG4vKioqKioqLyBcdFx0XHRcdGlmKG1vZHVsZSkge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0bW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XHJcbi8qKioqKiovIFx0XHRcdFx0XHR2YXIgY2FsbGJhY2tzID0gW107XHJcbi8qKioqKiovIFx0XHRcdFx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGkrKykge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbaV07XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdGNiID0gbW9kdWxlLmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwZW5kZW5jeV07XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdGlmKGNiKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0aWYoY2FsbGJhY2tzLmluZGV4T2YoY2IpID49IDApIGNvbnRpbnVlO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdGNhbGxiYWNrcy5wdXNoKGNiKTtcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHRcdFx0Zm9yKGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdGNiID0gY2FsbGJhY2tzW2ldO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHR0cnkge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdGNiKG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzKTtcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0fSBjYXRjaChlcnIpIHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRpZihvcHRpb25zLm9uRXJyb3JlZCkge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcImFjY2VwdC1lcnJvcmVkXCIsXHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jeUlkOiBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tpXSxcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVyclxyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdFx0fSk7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdGlmKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRcdGlmKCFlcnJvcilcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3IgPSBlcnI7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHRcdFx0XHR9XHJcbi8qKioqKiovIFx0XHRcdFx0XHR9XHJcbi8qKioqKiovIFx0XHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHR9XHJcbi8qKioqKiovIFx0XHR9XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0XHQvLyBMb2FkIHNlbGYgYWNjZXB0ZWQgbW9kdWxlc1xyXG4vKioqKioqLyBcdFx0Zm9yKGkgPSAwOyBpIDwgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XHJcbi8qKioqKiovIFx0XHRcdHZhciBpdGVtID0gb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzW2ldO1xyXG4vKioqKioqLyBcdFx0XHRtb2R1bGVJZCA9IGl0ZW0ubW9kdWxlO1xyXG4vKioqKioqLyBcdFx0XHRob3RDdXJyZW50UGFyZW50cyA9IFttb2R1bGVJZF07XHJcbi8qKioqKiovIFx0XHRcdHRyeSB7XHJcbi8qKioqKiovIFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCk7XHJcbi8qKioqKiovIFx0XHRcdH0gY2F0Y2goZXJyKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0aWYodHlwZW9mIGl0ZW0uZXJyb3JIYW5kbGVyID09PSBcImZ1bmN0aW9uXCIpIHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdHRyeSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdGl0ZW0uZXJyb3JIYW5kbGVyKGVycik7XHJcbi8qKioqKiovIFx0XHRcdFx0XHR9IGNhdGNoKGVycjIpIHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0aWYob3B0aW9ucy5vbkVycm9yZWQpIHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtYWNjZXB0LWVycm9yLWhhbmRsZXItZXJyb3JlZFwiLFxyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVycjIsXHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0XHRvcmdpbmFsRXJyb3I6IGVyciwgLy8gVE9ETyByZW1vdmUgaW4gd2VicGFjayA0XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0XHRvcmlnaW5hbEVycm9yOiBlcnJcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHR9KTtcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRpZighb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0aWYoIWVycm9yKVxyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdFx0ZXJyb3IgPSBlcnIyO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHR9XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdGlmKCFlcnJvcilcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRlcnJvciA9IGVycjtcclxuLyoqKioqKi8gXHRcdFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdFx0XHR9IGVsc2Uge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0aWYob3B0aW9ucy5vbkVycm9yZWQpIHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1hY2NlcHQtZXJyb3JlZFwiLFxyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyXHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdH0pO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHRcdFx0aWYoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRpZighZXJyb3IpXHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0ZXJyb3IgPSBlcnI7XHJcbi8qKioqKiovIFx0XHRcdFx0XHR9XHJcbi8qKioqKiovIFx0XHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHR9XHJcbi8qKioqKiovIFx0XHR9XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0XHQvLyBoYW5kbGUgZXJyb3JzIGluIGFjY2VwdCBoYW5kbGVycyBhbmQgc2VsZiBhY2NlcHRlZCBtb2R1bGUgbG9hZFxyXG4vKioqKioqLyBcdFx0aWYoZXJyb3IpIHtcclxuLyoqKioqKi8gXHRcdFx0aG90U2V0U3RhdHVzKFwiZmFpbFwiKTtcclxuLyoqKioqKi8gXHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcclxuLyoqKioqKi8gXHRcdH1cclxuLyoqKioqKi8gXHRcclxuLyoqKioqKi8gXHRcdGhvdFNldFN0YXR1cyhcImlkbGVcIik7XHJcbi8qKioqKiovIFx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xyXG4vKioqKioqLyBcdFx0XHRyZXNvbHZlKG91dGRhdGVkTW9kdWxlcyk7XHJcbi8qKioqKiovIFx0XHR9KTtcclxuLyoqKioqKi8gXHR9XHJcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fSxcbi8qKioqKiovIFx0XHRcdGhvdDogaG90Q3JlYXRlTW9kdWxlKG1vZHVsZUlkKSxcbi8qKioqKiovIFx0XHRcdHBhcmVudHM6IChob3RDdXJyZW50UGFyZW50c1RlbXAgPSBob3RDdXJyZW50UGFyZW50cywgaG90Q3VycmVudFBhcmVudHMgPSBbXSwgaG90Q3VycmVudFBhcmVudHNUZW1wKSxcbi8qKioqKiovIFx0XHRcdGNoaWxkcmVuOiBbXVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIGhvdENyZWF0ZVJlcXVpcmUobW9kdWxlSWQpKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuLyoqKioqKi8gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuLyoqKioqKi8gXHRcdFx0XHRnZXQ6IGdldHRlclxuLyoqKioqKi8gXHRcdFx0fSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX2hhc2hfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmggPSBmdW5jdGlvbigpIHsgcmV0dXJuIGhvdEN1cnJlbnRIYXNoOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBob3RDcmVhdGVSZXF1aXJlKDcpKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDcpO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgYmluZCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG52YXIgaXNCdWZmZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTtcblxuLypnbG9iYWwgdG9TdHJpbmc6dHJ1ZSovXG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXkodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGb3JtRGF0YSh2YWwpIHtcbiAgcmV0dXJuICh0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnKSAmJiAodmFsIGluc3RhbmNlb2YgRm9ybURhdGEpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmICh2YWwuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcic7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBEYXRlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNEYXRlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGaWxlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGaWxlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCbG9iXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCbG9iKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBCbG9iXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRnVuY3Rpb24sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJlYW0sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmVhbSh2YWwpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwucGlwZSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVUkxTZWFyY2hQYXJhbXModmFsKSB7XG4gIHJldHVybiB0eXBlb2YgVVJMU2VhcmNoUGFyYW1zICE9PSAndW5kZWZpbmVkJyAmJiB2YWwgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXM7XG59XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL1xuZnVuY3Rpb24gdHJpbShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzKi8sICcnKS5yZXBsYWNlKC9cXHMqJC8sICcnKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKi9cbmZ1bmN0aW9uIGlzU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcbiAgKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodHlwZW9mIHJlc3VsdFtrZXldID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGEsIGIsIHRoaXNBcmcpIHtcbiAgZm9yRWFjaChiLCBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0aGlzQXJnICYmIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcjogaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhOiBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldzogaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzVW5kZWZpbmVkOiBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlOiBpc0RhdGUsXG4gIGlzRmlsZTogaXNGaWxlLFxuICBpc0Jsb2I6IGlzQmxvYixcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgaXNTdHJlYW06IGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtczogaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52OiBpc1N0YW5kYXJkQnJvd3NlckVudixcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgbWVyZ2U6IG1lcmdlLFxuICBleHRlbmQ6IGV4dGVuZCxcbiAgdHJpbTogdHJpbVxufTtcblxuXG4vKioqLyB9KSxcbi8qIDEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24ocHJvY2Vzcykge1xuXG52YXIgdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG4gIH1cbiAgcmV0dXJuIGFkYXB0ZXI7XG59XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgYWRhcHRlcjogZ2V0RGVmYXVsdEFkYXB0ZXIoKSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQ29udGVudC1UeXBlJyk7XG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc1N0cmVhbShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNGaWxlKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0Jsb2IoZGF0YSlcbiAgICApIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhLmJ1ZmZlcjtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0cnkge1xuICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgLyogSWdub3JlICovIH1cbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRpbWVvdXQ6IDAsXG5cbiAgeHNyZkNvb2tpZU5hbWU6ICdYU1JGLVRPS0VOJyxcbiAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nLFxuXG4gIG1heENvbnRlbnRMZW5ndGg6IC0xLFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH1cbn07XG5cbmRlZmF1bHRzLmhlYWRlcnMgPSB7XG4gIGNvbW1vbjoge1xuICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJ1xuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHV0aWxzLm1lcmdlKERFRkFVTFRfQ09OVEVOVF9UWVBFKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRzO1xuXG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXygxMikpKVxuXG4vKioqLyB9KSxcbi8qIDIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9O1xufTtcblxuXG4vKioqLyB9KSxcbi8qIDMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIHV0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBzZXR0bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KTtcbnZhciBidWlsZFVSTCA9IF9fd2VicGFja19yZXF1aXJlX18oMTYpO1xudmFyIHBhcnNlSGVhZGVycyA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpO1xudmFyIGlzVVJMU2FtZU9yaWdpbiA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpO1xudmFyIGNyZWF0ZUVycm9yID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcbnZhciBidG9hID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5idG9hICYmIHdpbmRvdy5idG9hLmJpbmQod2luZG93KSkgfHwgX193ZWJwYWNrX3JlcXVpcmVfXygxOSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geGhyQWRhcHRlcihjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICB2YXIgcmVxdWVzdEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKHJlcXVlc3REYXRhKSkge1xuICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgdmFyIGxvYWRFdmVudCA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnO1xuICAgIHZhciB4RG9tYWluID0gZmFsc2U7XG5cbiAgICAvLyBGb3IgSUUgOC85IENPUlMgc3VwcG9ydFxuICAgIC8vIE9ubHkgc3VwcG9ydHMgUE9TVCBhbmQgR0VUIGNhbGxzIGFuZCBkb2Vzbid0IHJldHVybnMgdGhlIHJlc3BvbnNlIGhlYWRlcnMuXG4gICAgLy8gRE9OJ1QgZG8gdGhpcyBmb3IgdGVzdGluZyBiL2MgWE1MSHR0cFJlcXVlc3QgaXMgbW9ja2VkLCBub3QgWERvbWFpblJlcXVlc3QuXG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAndGVzdCcgJiZcbiAgICAgICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgd2luZG93LlhEb21haW5SZXF1ZXN0ICYmICEoJ3dpdGhDcmVkZW50aWFscycgaW4gcmVxdWVzdCkgJiZcbiAgICAgICAgIWlzVVJMU2FtZU9yaWdpbihjb25maWcudXJsKSkge1xuICAgICAgcmVxdWVzdCA9IG5ldyB3aW5kb3cuWERvbWFpblJlcXVlc3QoKTtcbiAgICAgIGxvYWRFdmVudCA9ICdvbmxvYWQnO1xuICAgICAgeERvbWFpbiA9IHRydWU7XG4gICAgICByZXF1ZXN0Lm9ucHJvZ3Jlc3MgPSBmdW5jdGlvbiBoYW5kbGVQcm9ncmVzcygpIHt9O1xuICAgICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge307XG4gICAgfVxuXG4gICAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgdmFyIHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICB2YXIgcGFzc3dvcmQgPSBjb25maWcuYXV0aC5wYXNzd29yZCB8fCAnJztcbiAgICAgIHJlcXVlc3RIZWFkZXJzLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArIGJ0b2EodXNlcm5hbWUgKyAnOicgKyBwYXNzd29yZCk7XG4gICAgfVxuXG4gICAgcmVxdWVzdC5vcGVuKGNvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSwgYnVpbGRVUkwoY29uZmlnLnVybCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQ7XG5cbiAgICAvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlXG4gICAgcmVxdWVzdFtsb2FkRXZlbnRdID0gZnVuY3Rpb24gaGFuZGxlTG9hZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCB8fCAocmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0ICYmICF4RG9tYWluKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSByZXF1ZXN0IGVycm9yZWQgb3V0IGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmVzcG9uc2UsIHRoaXMgd2lsbCBiZVxuICAgICAgLy8gaGFuZGxlZCBieSBvbmVycm9yIGluc3RlYWRcbiAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAvLyB3aWxsIHJldHVybiBzdGF0dXMgYXMgMCBldmVuIHRob3VnaCBpdCdzIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDAgJiYgIShyZXF1ZXN0LnJlc3BvbnNlVVJMICYmIHJlcXVlc3QucmVzcG9uc2VVUkwuaW5kZXhPZignZmlsZTonKSA9PT0gMCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgdmFyIHJlc3BvbnNlSGVhZGVycyA9ICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgPyBwYXJzZUhlYWRlcnMocmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkgOiBudWxsO1xuICAgICAgdmFyIHJlc3BvbnNlRGF0YSA9ICFjb25maWcucmVzcG9uc2VUeXBlIHx8IGNvbmZpZy5yZXNwb25zZVR5cGUgPT09ICd0ZXh0JyA/IHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIHZhciByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICAvLyBJRSBzZW5kcyAxMjIzIGluc3RlYWQgb2YgMjA0IChodHRwczovL2dpdGh1Yi5jb20vYXhpb3MvYXhpb3MvaXNzdWVzLzIwMSlcbiAgICAgICAgc3RhdHVzOiByZXF1ZXN0LnN0YXR1cyA9PT0gMTIyMyA/IDIwNCA6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1cyA9PT0gMTIyMyA/ICdObyBDb250ZW50JyA6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignTmV0d29yayBFcnJvcicsIGNvbmZpZywgbnVsbCwgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ3RpbWVvdXQgb2YgJyArIGNvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJywgY29uZmlnLCAnRUNPTk5BQk9SVEVEJyxcbiAgICAgICAgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gICAgLy8gU3BlY2lmaWNhbGx5IG5vdCBpZiB3ZSdyZSBpbiBhIHdlYiB3b3JrZXIsIG9yIHJlYWN0LW5hdGl2ZS5cbiAgICBpZiAodXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSkge1xuICAgICAgdmFyIGNvb2tpZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwKTtcblxuICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICB2YXIgeHNyZlZhbHVlID0gKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMgfHwgaXNVUkxTYW1lT3JpZ2luKGNvbmZpZy51cmwpKSAmJiBjb25maWcueHNyZkNvb2tpZU5hbWUgP1xuICAgICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnNbY29uZmlnLnhzcmZIZWFkZXJOYW1lXSA9IHhzcmZWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gRXhwZWN0ZWQgRE9NRXhjZXB0aW9uIHRocm93biBieSBicm93c2VycyBub3QgY29tcGF0aWJsZSBYTUxIdHRwUmVxdWVzdCBMZXZlbCAyLlxuICAgICAgICAvLyBCdXQsIHRoaXMgY2FuIGJlIHN1cHByZXNzZWQgZm9yICdqc29uJyB0eXBlIGFzIGl0IGNhbiBiZSBwYXJzZWQgYnkgZGVmYXVsdCAndHJhbnNmb3JtUmVzcG9uc2UnIGZ1bmN0aW9uLlxuICAgICAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi5wcm9taXNlLnRoZW4oZnVuY3Rpb24gb25DYW5jZWxlZChjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZWplY3QoY2FuY2VsKTtcbiAgICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXF1ZXN0RGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXF1ZXN0RGF0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcblxuXG4vKioqLyB9KSxcbi8qIDQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGVuaGFuY2VFcnJvciA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFcnJvcihtZXNzYWdlLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSk7XG59O1xuXG5cbi8qKiovIH0pLFxuLyogNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG5cblxuLyoqKi8gfSksXG4vKiA2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8qKlxuICogQSBgQ2FuY2VsYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbChtZXNzYWdlKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG59XG5cbkNhbmNlbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdDYW5jZWwnICsgKHRoaXMubWVzc2FnZSA/ICc6ICcgKyB0aGlzLm1lc3NhZ2UgOiAnJyk7XG59O1xuXG5DYW5jZWwucHJvdG90eXBlLl9fQ0FOQ0VMX18gPSB0cnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbDtcblxuXG4vKioqLyB9KSxcbi8qIDcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUocmVzdWx0LnZhbHVlKTsgfSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IHlbb3BbMF0gJiAyID8gXCJyZXR1cm5cIiA6IG9wWzBdID8gXCJ0aHJvd1wiIDogXCJuZXh0XCJdKSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbMCwgdC52YWx1ZV07XG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcbiAgICB9XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGF4aW9zXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xudmFyIEtSVyA9IHsgbmFtZTogXCJrcndcIiB9O1xudmFyIFVTRCA9IHsgbmFtZTogXCJ1c2RcIiB9O1xudmFyIEpQWSA9IHsgbmFtZTogXCJqcHlcIiB9O1xudmFyIENVUlJFTkNJRVMgPSBbS1JXLCBVU0QsIEpQWV07XG52YXIgQklURklORVggPSB7IG5hbWU6IFwiYml0ZmluZXhcIiwgY3VycmVuY3k6IFVTRCwgdXJsOiAnaHR0cHM6Ly93d3cuYml0ZmluZXguY29tJywgZGlzcGxheU5hbWU6ICdCSVRGSU5FWCcgfTtcbnZhciBCSVRIVU1CID0geyBuYW1lOiBcImJpdGh1bWJcIiwgY3VycmVuY3k6IEtSVywgdXJsOiAnaHR0cHM6Ly93d3cuYml0aHVtYi5jb20nLCBkaXNwbGF5TmFtZTogJ+u5l+yNuCcgfTtcbnZhciBDT0lOT05FID0geyBuYW1lOiBcImNvaW5vbmVcIiwgY3VycmVuY3k6IEtSVywgdXJsOiAnaHR0cHM6Ly93d3cuY29pbm9uZS5jby5rcicsIGRpc3BsYXlOYW1lOiAn7L2U7J247JuQJyB9O1xudmFyIFVQQklUID0geyBuYW1lOiBcInVwYml0XCIsIGN1cnJlbmN5OiBLUlcsIHVybDogJ2h0dHBzOi8vdXBiaXQuY29tJywgZGlzcGxheU5hbWU6ICfsl4XruYTtirgnIH07XG52YXIgQklOQU5DRSA9IHsgbmFtZTogXCJiaW5hbmNlXCIsIGN1cnJlbmN5OiBVU0QsIHVybDogJ2h0dHBzOi8vd3d3LmJpbmFuY2UuY29tJywgZGlzcGxheU5hbWU6ICdCSU5BTkNFJyB9O1xudmFyIEVYQ0hBTkdFUyA9IFtCSVRGSU5FWCwgQklOQU5DRSwgQklUSFVNQiwgQ09JTk9ORSwgVVBCSVRdO1xudmFyIEJUQyA9IHsgbmFtZTogXCJidGNcIiB9O1xudmFyIEVUSCA9IHsgbmFtZTogXCJldGhcIiB9O1xudmFyIFhSUCA9IHsgbmFtZTogXCJ4cnBcIiB9O1xudmFyIExUQyA9IHsgbmFtZTogXCJsdGNcIiB9O1xudmFyIFFUVU0gPSB7IG5hbWU6IFwicXR1bVwiIH07XG52YXIgREFTSCA9IHsgbmFtZTogXCJkYXNoXCIgfTtcbnZhciBFVEMgPSB7IG5hbWU6IFwiZXRjXCIgfTtcbnZhciBCQ0ggPSB7IG5hbWU6IFwiYmNoXCIgfTtcbnZhciBYTVIgPSB7IG5hbWU6IFwieG1yXCIgfTtcbnZhciBaRUMgPSB7IG5hbWU6IFwiemVjXCIgfTtcbnZhciBCVEcgPSB7IG5hbWU6IFwiYnRnXCIgfTtcbnZhciBFT1MgPSB7IG5hbWU6IFwiZW9zXCIgfTtcbnZhciBJT1RBID0geyBuYW1lOiBcImlvdGFcIiB9O1xudmFyIFNOVCA9IHsgbmFtZTogXCJzbnRcIiB9O1xudmFyIE5FTyA9IHsgbmFtZTogXCJuZW9cIiB9O1xudmFyIEFEQSA9IHsgbmFtZTogXCJhZGFcIiB9O1xudmFyIFhMTSA9IHsgbmFtZTogXCJ4bG1cIiB9O1xudmFyIFhFTSA9IHsgbmFtZTogJ3hlbScgfTtcbnZhciBTVEVFTSA9IHsgbmFtZTogJ3N0ZWVtJyB9O1xudmFyIE1FUiA9IHsgbmFtZTogJ21lcicgfTtcbnZhciBTVFJBVCA9IHsgbmFtZTogJ3N0cmF0JyB9O1xudmFyIFNCRCA9IHsgbmFtZTogJ3NiZCcgfTtcbnZhciBPTUcgPSB7IG5hbWU6ICdvbWcnIH07XG52YXIgTFNLID0geyBuYW1lOiAnbHNrJyB9O1xudmFyIFRJWCA9IHsgbmFtZTogJ3RpeCcgfTtcbnZhciBFTUMyID0geyBuYW1lOiAnZW1jMicgfTtcbnZhciBBUkRSID0geyBuYW1lOiAnYXJkcicgfTtcbnZhciBQSVZYID0geyBuYW1lOiAncGl2eCcgfTtcbnZhciBQT1dSID0geyBuYW1lOiAncG93cicgfTtcbnZhciBNVEwgPSB7IG5hbWU6ICdtdGwnIH07XG52YXIgR1JTID0geyBuYW1lOiAnZ3JzJyB9O1xudmFyIFNUT1JKID0geyBuYW1lOiAnc3RvcmonIH07XG52YXIgQVJLID0geyBuYW1lOiAnYXJrJyB9O1xudmFyIFJFUCA9IHsgbmFtZTogJ3JlcCcgfTtcbnZhciBLTUQgPSB7IG5hbWU6ICdrbWQnIH07XG52YXIgV0FWRVMgPSB7IG5hbWU6ICd3YXZlcycgfTtcbnZhciBWVEMgPSB7IG5hbWU6ICd2dGMnIH07XG52YXIgVkVOID0geyBuYW1lOiAndmVuJyB9O1xudmFyIElDWCA9IHsgbmFtZTogJ2ljeCcgfTtcbnZhciBFTEYgPSB7IG5hbWU6ICdlbGYnIH07XG52YXIgTUlUSCA9IHsgbmFtZTogJ21pdGgnIH07XG52YXIgS05DID0geyBuYW1lOiAna25jJyB9O1xudmFyIE1DTyA9IHsgbmFtZTogJ21jbycgfTtcbnZhciBUUlggPSB7IG5hbWU6ICd0cngnIH07XG52YXIgQ09JTlMgPSBbQlRDLCBFVEgsIEVPUywgWFJQLCBMVEMsIFFUVU0sIEVUQywgQkNILCBCVEcsIE9NRywgVFJYLCBEQVNILCBYTVIsIFpFQywgRUxGLCBNSVRILCBJT1RBLCBTTlQsIE5FTywgUkVQLCBYTE0sIFNUT1JKLCBJQ1gsIE1DTywgVkVOLCBLTkMsIEFEQSwgWEVNLCBTVEVFTSwgTUVSLCBTVFJBVCwgU0JELCBMU0ssIFRJWCwgRU1DMiwgQVJEUiwgUElWWCwgUE9XUiwgTVRMLCBHUlMsIEFSSywgS01ELCBXQVZFUywgVlRDXTtcbnZhciBCSVRIVU1CX0NPSU5TID0gW0lDWCwgTUNPLCBWRU4sIEtOQ107XG52YXIgVVBCSVRfQ09JTlMgPSBbQURBLCBYTE0sIFhFTSwgU1RFRU0sIE1FUiwgU1RSQVQsIFNCRCwgTFNLLCBUSVgsIEVNQzIsIEFSRFIsIFBJVlgsIFBPV1IsIE1UTCwgR1JTLCBTVE9SSiwgQVJLLCBLTUQsIFdBVkVTLCBWVENdO1xuZnVuY3Rpb24gZm9yRWFjaChsaXN0LCBjYWxsYmFjaykge1xuICAgIGlmIChsaXN0LmZvckVhY2gpIHtcbiAgICAgICAgbGlzdC5mb3JFYWNoKGNhbGxiYWNrKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoQXJyYXkgJiYgQXJyYXkuZnJvbSkge1xuICAgICAgICBBcnJheS5mcm9tKGxpc3QpLmZvckVhY2goY2FsbGJhY2spO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIGFycmF5ID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJyYXkucHVzaChsaXN0W2ldKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXJyYXkuZm9yRWFjaCkge1xuICAgICAgICAgICAgYXJyYXkuZm9yRWFjaChjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soYXJyYXlbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gZmluZChsaXN0LCBjYWxsYmFjaykge1xuICAgIGlmIChsaXN0LmZpbmQpIHtcbiAgICAgICAgcmV0dXJuIGxpc3QuZmluZChjYWxsYmFjayk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGxpc3QuZmlsdGVyKSB7XG4gICAgICAgIHJldHVybiBsaXN0LmZpbHRlcihjYWxsYmFjaylbMF07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcnJheS5wdXNoKGxpc3RbaV0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhcnJheS5maW5kKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJyYXkuZmluZChjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKGFycmF5W2ldKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJyYXlbaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gcmVhZHkoZm4pIHtcbiAgICBpZiAoZG9jdW1lbnQuYXR0YWNoRXZlbnQgPyBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgOiBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIikge1xuICAgICAgICBmbigpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgZm4pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG1haW4oKSB7XG4gICAgdmFyIHJhdGUgPSAndHJhbnNsYXRlJztcbiAgICB2YXIgdGltZSA9IDEwO1xuICAgIHZhciBwcmljZURhdGEgPSBbXTtcbiAgICB2YXIgcmVmcmVzaFRpbWUgPSA2MDtcbiAgICB2YXIgbG9hZGVkID0gZmFsc2U7XG4gICAgdmFyIGN1cnJlbmN5UmF0ZSA9IDA7XG4gICAgZnVuY3Rpb24gc2V0UmF0ZShuZXdSYXRlKSB7XG4gICAgICAgIHN3aXRjaCAobmV3UmF0ZSkge1xuICAgICAgICAgICAgY2FzZSAnZ2ltcCc6XG4gICAgICAgICAgICBjYXNlICd0cmFuc2xhdGUnOlxuICAgICAgICAgICAgICAgIHJhdGUgPSBuZXdSYXRlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnY2hhbmdlJzpcbiAgICAgICAgICAgICAgICByYXRlID0gJ3RyYW5zbGF0ZSc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0UmF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHJhdGU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNldEN1cnJlbmN5UmF0ZShyYXRlKSB7XG4gICAgICAgIGN1cnJlbmN5UmF0ZSA9IHJhdGU7XG4gICAgICAgIHZhciBjdXJyZW5jeSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jdXJyZW5jeScpO1xuICAgICAgICBpZiAoY3VycmVuY3kgIT0gbnVsbCkge1xuICAgICAgICAgICAgY3VycmVuY3kuc2V0QXR0cmlidXRlKCdkYXRhLWNvbnRlbnQnLCBmb3JtYXRQcmljZShyYXRlLCBLUlcubmFtZSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEN1cnJlbmN5UmF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbmN5UmF0ZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2V0VGltZShuZXdUaW1lKSB7XG4gICAgICAgIHN3aXRjaCAobmV3VGltZSkge1xuICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgIGNhc2UgMzA6XG4gICAgICAgICAgICBjYXNlIDYwOlxuICAgICAgICAgICAgY2FzZSA3MjA6XG4gICAgICAgICAgICAgICAgdGltZSA9IG5ld1RpbWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0VGltZSgpIHtcbiAgICAgICAgcmV0dXJuIHRpbWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNldFByaWNlRGF0YShuZXdQcmljZURhdGEpIHtcbiAgICAgICAgcHJpY2VEYXRhID0gbmV3UHJpY2VEYXRhLm1hcChmdW5jdGlvbiAoaXRlbSkgeyByZXR1cm4gZ2V0Q29pblByaWNlKGl0ZW0pOyB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0UHJpY2VEYXRhKCkge1xuICAgICAgICByZXR1cm4gcHJpY2VEYXRhO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRSZWZyZXNoVGltZSgpIHtcbiAgICAgICAgcmV0dXJuIHJlZnJlc2hUaW1lO1xuICAgIH1cbiAgICBmdW5jdGlvbiBkZWNSZWZyZXNoVGltZSgpIHtcbiAgICAgICAgcmVmcmVzaFRpbWUgPSByZWZyZXNoVGltZSAtIDE7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlc2V0UmVmcmVzaFRpbWUoKSB7XG4gICAgICAgIHJlZnJlc2hUaW1lID0gNjA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEJhc2VFeGNobmFnZSgpIHtcbiAgICAgICAgcmV0dXJuIEJJVEZJTkVYO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRFeGNoYW5nZXMoKSB7XG4gICAgICAgIHJldHVybiBbQklUSFVNQiwgQ09JTk9ORSwgVVBCSVRdO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRBbGxFeGNoYW5nZXMoKSB7XG4gICAgICAgIHJldHVybiBbZ2V0QmFzZUV4Y2huYWdlKCldLmNvbmNhdChnZXRFeGNoYW5nZXMoKSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEV4Y2hhbmdlKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZpbmQoRVhDSEFOR0VTLCBmdW5jdGlvbiAoZXhjaGFuZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiBleGNoYW5nZS5uYW1lID09PSBuYW1lO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0Q29pbihuYW1lKSB7XG4gICAgICAgIHJldHVybiBmaW5kKENPSU5TLCBmdW5jdGlvbiAoY29pbikge1xuICAgICAgICAgICAgcmV0dXJuIGNvaW4ubmFtZSA9PT0gbmFtZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEN1cnJlbmN5KG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZpbmQoQ1VSUkVOQ0lFUywgZnVuY3Rpb24gKGN1cnJlbmN5KSB7XG4gICAgICAgICAgICByZXR1cm4gY3VycmVuY3kubmFtZSA9PT0gbmFtZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldENvaW5QcmljZShyZXNwb25zZSkge1xuICAgICAgICB2YXIgdmFsdWUgPSB7XG4gICAgICAgICAgICBleGNoYW5nZTogZ2V0RXhjaGFuZ2UocmVzcG9uc2UuZXhjaGFuZ2UpLFxuICAgICAgICAgICAgY29pbjogZ2V0Q29pbihyZXNwb25zZS5jb2luKSxcbiAgICAgICAgICAgIHByaWNlOiByZXNwb25zZS5wcmljZSxcbiAgICAgICAgICAgIHRpbWU6IHJlc3BvbnNlLnRpbWUsXG4gICAgICAgICAgICBjdXJyZW5jeTogZ2V0Q3VycmVuY3kocmVzcG9uc2UuY3VycmVuY3kpXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0UHJpY2UoZXhjaGFuZ2UsIGNvaW4sIHRpbWUpIHtcbiAgICAgICAgdmFyIGpzb24gPSBmaW5kKGdldFByaWNlRGF0YSgpLCBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW0uZXhjaGFuZ2UgPT09IGV4Y2hhbmdlICYmIGl0ZW0uY29pbiA9PT0gY29pbiAmJiBpdGVtLnRpbWUgPT0gdGltZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBqc29uICYmIGpzb24ucHJpY2UgfHwgMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gZm9ybWF0UHJpY2UocHJpY2UsIGN1cnJlbmN5KSB7XG4gICAgICAgIHZhciBkaWdpdHM7XG4gICAgICAgIGlmIChwcmljZSA8IDEwKSB7XG4gICAgICAgICAgICBkaWdpdHMgPSAzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHByaWNlIDwgMTAwKSB7XG4gICAgICAgICAgICBkaWdpdHMgPSAyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHByaWNlIDwgMTAwMCkge1xuICAgICAgICAgICAgZGlnaXRzID0gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRpZ2l0cyA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZvcm1hdHRlciA9IG5ldyBJbnRsLk51bWJlckZvcm1hdCgnZW4tVVMnLCB7XG4gICAgICAgICAgICBzdHlsZTogJ2N1cnJlbmN5JyxcbiAgICAgICAgICAgIGN1cnJlbmN5OiBjdXJyZW5jeSxcbiAgICAgICAgICAgIG1pbmltdW1GcmFjdGlvbkRpZ2l0czogZGlnaXRzLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZvcm1hdHRlci5mb3JtYXQocHJpY2UpO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZW5kZXJUSGVhZCgpIHtcbiAgICAgICAgdmFyIHRoZWFkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigndGhlYWQnKTtcbiAgICAgICAgZm9yRWFjaCh0aGVhZC5yb3dzLCBmdW5jdGlvbiAocm93KSB7IHJldHVybiB0aGVhZC5yZW1vdmVDaGlsZChyb3cpOyB9KTtcbiAgICAgICAgdmFyIHJvdyA9IHRoZWFkLmluc2VydFJvdygpO1xuICAgICAgICByb3cuaW5zZXJ0Q2VsbCgpLm91dGVySFRNTCA9ICc8dGggc2NvcGU9XCJjb2xcIj48L3RoPic7XG4gICAgICAgIGZvckVhY2goZ2V0QWxsRXhjaGFuZ2VzKCksIGZ1bmN0aW9uIChleGNoYW5nZSkge1xuICAgICAgICAgICAgdmFyIGNlbGwgPSByb3cuaW5zZXJ0Q2VsbCgpO1xuICAgICAgICAgICAgY2VsbC5vdXRlckhUTUwgPSBcIjx0aCBzY29wZT1cXFwiY29sXFxcIj48YSBocmVmPVxcXCJcIiArIGV4Y2hhbmdlLnVybCArIFwiXFxcIiBjbGFzcz1cXFwidGV4dC1kYXJrIFwiICsgZXhjaGFuZ2UubmFtZSArIFwiXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+XCIgKyBleGNoYW5nZS5kaXNwbGF5TmFtZSArIFwiPC9hPjxzbWFsbCBjbGFzcz1cXFwiYmFuLVwiICsgZXhjaGFuZ2UubmFtZSArIFwiXFxcIj48L3NtYWxsPjwvdGg+XCI7XG4gICAgICAgICAgICB1cGRhdGVFeGNoYW5nZVN0YXR1cyhleGNoYW5nZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZW5kZXJUQm9keSgpIHtcbiAgICAgICAgdmFyIHRib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigndGJvZHknKTtcbiAgICAgICAgZm9yRWFjaCh0Ym9keS5yb3dzLCBmdW5jdGlvbiAocm93KSB7IHJldHVybiB0Ym9keS5yZW1vdmVDaGlsZChyb3cpOyB9KTtcbiAgICAgICAgZm9yRWFjaChDT0lOUywgZnVuY3Rpb24gKGNvaW4pIHtcbiAgICAgICAgICAgIHZhciByb3cgPSB0Ym9keS5pbnNlcnRSb3coKTtcbiAgICAgICAgICAgIHZhciBjZWxsID0gcm93Lmluc2VydENlbGwoKTtcbiAgICAgICAgICAgIGNlbGwub3V0ZXJIVE1MID0gXCI8dGggc2NvcGU9XFxcInJvd1xcXCI+XCIgKyBjb2luLm5hbWUudG9VcHBlckNhc2UoKSArIFwiPGJyPjxhIGhyZWY9XFxcIlwiICsgZ2V0Q2hhcnRMaW5rKGNvaW4pICsgXCJcXFwiIGNsYXNzPVxcXCJ0ZXh0LW11dGVkXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+PHNtYWxsIGNsYXNzPVxcXCJvaSBvaS1iYXItY2hhcnRcXFwiPjwvc21hbGw+PC9hPjwvdGg+XCI7XG4gICAgICAgICAgICBmb3JFYWNoKGdldEFsbEV4Y2hhbmdlcygpLCBmdW5jdGlvbiAoZXhjaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgaHRtbDtcbiAgICAgICAgICAgICAgICB2YXIgcHJpY2UgPSBnZXRQcmljZShleGNoYW5nZSwgY29pbiwgMCk7XG4gICAgICAgICAgICAgICAgaWYgKHByaWNlID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaHRtbCA9ICctJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0aW1lXzEgPSBnZXRUaW1lKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsYXN0UHJpY2UgPSBnZXRQcmljZShleGNoYW5nZSwgY29pbiwgdGltZV8xKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJhdGUgPT09ICdnaW1wJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV4Y2hhbmdlID09IGdldEJhc2VFeGNobmFnZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbCA9IHJlbmRlcktvclByaWNlKGV4Y2hhbmdlLCBwcmljZSwgbGFzdFByaWNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiYXNlRXhjaGFuZ2UgPSBnZXRCYXNlRXhjaG5hZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYml0ZmluZXhQcmljZSA9IGdldFByaWNlKGJhc2VFeGNoYW5nZSwgY29pbiwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJpdGZpbmV4TGFzdFByaWNlID0gZ2V0UHJpY2UoYmFzZUV4Y2hhbmdlLCBjb2luLCB0aW1lXzEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0bWwgPSByZW5kZXJHaW1wKGV4Y2hhbmdlLCBwcmljZSwgbGFzdFByaWNlLCBiaXRmaW5leFByaWNlLCBiaXRmaW5leExhc3RQcmljZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBodG1sID0gcmVuZGVyQ2hhbmdlcyhleGNoYW5nZSwgcHJpY2UsIGxhc3RQcmljZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGNlbGwgPSByb3cuaW5zZXJ0Q2VsbCgpO1xuICAgICAgICAgICAgICAgIGNlbGwuaW5uZXJIVE1MID0gaHRtbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZW5kZXJUSGVhZCgpO1xuICAgICAgICByZW5kZXJUQm9keSgpO1xuICAgICAgICAkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICQoJ1tkYXRhLXRvZ2dsZT1cInBvcG92ZXJcIl0nKS5wb3BvdmVyKHsgJ3RyaWdnZXInOiAnaG92ZXInLCB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlbmRlckNoYW5nZXMoZXhjaGFuZ2UsIHByaWNlLCBsYXN0UHJpY2UpIHtcbiAgICAgICAgdmFyIHByaWNlQ2hhbmdlID0gcHJpY2UgLyBsYXN0UHJpY2UgLSAxO1xuICAgICAgICBpZiAobGFzdFByaWNlICE9IDAgJiYgcHJpY2UgIT0gMCkge1xuICAgICAgICAgICAgdmFyIGZvbnRDb2xvciA9IGdldEZvbnRDb2xvcihwcmljZUNoYW5nZSk7XG4gICAgICAgICAgICByZXR1cm4gXCI8c3BhbiBzdHlsZT1cXFwiY29sb3I6IFwiICsgZm9udENvbG9yICsgXCI7XFxcIj5cIiArIGZvcm1hdFByaWNlKHByaWNlLCBleGNoYW5nZS5jdXJyZW5jeS5uYW1lKSArIFwiPC9zcGFuPjxicj48c21hbGwgZGF0YS10b2dnbGU9XFxcInBvcG92ZXJcXFwiIGRhdGEtcGxhY2VtZW50PVxcXCJib3R0b21cXFwiIGRhdGEtY29udGVudD1cXFwiXCIgKyBmb3JtYXRQcmljZShsYXN0UHJpY2UsIGV4Y2hhbmdlLmN1cnJlbmN5Lm5hbWUpICsgXCJcXFwiPlwiICsgKDEwMCAqIHByaWNlQ2hhbmdlKS50b0ZpeGVkKDIpICsgXCIlPC9zbWFsbD5cIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBcIjxzcGFuPlwiICsgZm9ybWF0UHJpY2UocHJpY2UsIGV4Y2hhbmdlLmN1cnJlbmN5Lm5hbWUpICsgXCI8L3NwYW4+XCI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gcmVuZGVyS29yUHJpY2UoZXhjaGFuZ2UsIHByaWNlLCBsYXN0UHJpY2UpIHtcbiAgICAgICAgdmFyIGN1cnJlbmN5UmF0ZSA9IGdldEN1cnJlbmN5UmF0ZSgpO1xuICAgICAgICB2YXIgcHJpY2VDaGFuZ2UgPSBwcmljZSAvIGxhc3RQcmljZSAtIDE7XG4gICAgICAgIHZhciBrb3JQcmljZSA9IHByaWNlICogY3VycmVuY3lSYXRlO1xuICAgICAgICBpZiAobGFzdFByaWNlICE9IDAgJiYga29yUHJpY2UgIT0gMCkge1xuICAgICAgICAgICAgdmFyIGZvbnRDb2xvciA9IGdldEZvbnRDb2xvcihwcmljZUNoYW5nZSk7XG4gICAgICAgICAgICB2YXIgZm9ybWF0dGVkUHJpY2UgPSBmb3JtYXRQcmljZShwcmljZSwgZXhjaGFuZ2UuY3VycmVuY3kubmFtZSk7XG4gICAgICAgICAgICB2YXIgZm9ybWF0dGVkS29yUHJpY2UgPSBmb3JtYXRQcmljZShrb3JQcmljZSwgS1JXLm5hbWUpO1xuICAgICAgICAgICAgcmV0dXJuIFwiPHNwYW4gc3R5bGU9XFxcImNvbG9yOiBcIiArIGZvbnRDb2xvciArIFwiO1xcXCI+XCIgKyBmb3JtYXR0ZWRQcmljZSArIFwiPC9zcGFuPjxicj48c21hbGw+XCIgKyBmb3JtYXR0ZWRLb3JQcmljZSArIFwiPC9zbWFsbD5cIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBcIjxzcGFuPlwiICsgZm9ybWF0UHJpY2UocHJpY2UsIGV4Y2hhbmdlLmN1cnJlbmN5Lm5hbWUpICsgXCI8L3NwYW4+XCI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gcmVuZGVyR2ltcChleGNoYW5nZSwgcHJpY2UsIGxhc3RQcmljZSwgYmFzZVByaWNlLCBiYXNlTGFzdFByaWNlKSB7XG4gICAgICAgIGlmIChwcmljZSA9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJhc2VFeGNoYW5nZSA9IGdldEJhc2VFeGNobmFnZSgpO1xuICAgICAgICB2YXIgY3VycmVuY3lSYXRlO1xuICAgICAgICBpZiAoYmFzZUV4Y2hhbmdlLmN1cnJlbmN5ID09PSBVU0QgJiYgZXhjaGFuZ2UuY3VycmVuY3kgPT09IEtSVykge1xuICAgICAgICAgICAgY3VycmVuY3lSYXRlID0gZ2V0Q3VycmVuY3lSYXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjdXJyZW5jeVJhdGUgPSAxO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcmljZUNoYW5nZSA9IHByaWNlIC8gbGFzdFByaWNlIC0gMTtcbiAgICAgICAgdmFyIGZvbnRDb2xvciA9IGdldEZvbnRDb2xvcihwcmljZUNoYW5nZSk7XG4gICAgICAgIGlmIChiYXNlUHJpY2UgPT0gMCB8fCBjdXJyZW5jeVJhdGUgPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIFwiPHNwYW4gc3R5bGU9XFxcImNvbG9yOiBcIiArIGZvbnRDb2xvciArIFwiO1xcXCI+XCIgKyBmb3JtYXRQcmljZShwcmljZSwgZXhjaGFuZ2UuY3VycmVuY3kubmFtZSkgKyBcIjwvc3Bhbj5cIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBnaW1wID0gcHJpY2UgLyAoYmFzZVByaWNlICogY3VycmVuY3lSYXRlKSAtIDE7XG4gICAgICAgICAgICB2YXIgbGFzdEdpbXAgPSBsYXN0UHJpY2UgLyAoYmFzZUxhc3RQcmljZSAqIGN1cnJlbmN5UmF0ZSkgLSAxO1xuICAgICAgICAgICAgdmFyIGdpbXBDaGFuZ2UgPSAoMTAwICogKGdpbXAgLSBsYXN0R2ltcCkpO1xuICAgICAgICAgICAgdmFyIGZvcm1hdHRlZEdpbXBDaGFuZ2UgPSBnaW1wQ2hhbmdlID4gMCA/IFwiK1wiICsgZ2ltcENoYW5nZS50b0ZpeGVkKDIpICsgXCIlXCIgOiBnaW1wQ2hhbmdlLnRvRml4ZWQoMikgKyBcIiVcIjtcbiAgICAgICAgICAgIHJldHVybiBcIjxzcGFuIHN0eWxlPVxcXCJjb2xvcjogXCIgKyBmb250Q29sb3IgKyBcIjtcXFwiPlwiICsgZm9ybWF0UHJpY2UocHJpY2UsIGV4Y2hhbmdlLmN1cnJlbmN5Lm5hbWUpICsgXCI8L3NwYW4+PGJyPjxzbWFsbCAgZGF0YS10b2dnbGU9XFxcInBvcG92ZXJcXFwiIGRhdGEtcGxhY2VtZW50PVxcXCJib3R0b21cXFwiIGRhdGEtY29udGVudD1cXFwiXCIgKyBmb3JtYXR0ZWRHaW1wQ2hhbmdlICsgXCJcXFwiPlwiICsgKDEwMCAqIGdpbXApLnRvRml4ZWQoMikgKyBcIiU8L3NtYWxsPlwiO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldENoYXJ0TGluayhjb2luKSB7XG4gICAgICAgIGlmIChCSVRIVU1CX0NPSU5TLmluZGV4T2YoY29pbikgPj0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIFwiaHR0cHM6Ly9rci50cmFkaW5ndmlldy5jb20vY2hhcnQvP3N5bWJvbD1CSVRIVU1COlwiICsgY29pbi5uYW1lLnRvVXBwZXJDYXNlKCkgKyBcIktSV1wiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKFVQQklUX0NPSU5TLmluZGV4T2YoY29pbikgPj0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIFwiaHR0cHM6Ly91cGJpdC5jb20vZXhjaGFuZ2U/Y29kZT1DUklYLlVQQklULktSVy1cIiArIGNvaW4ubmFtZS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAoY29pbikge1xuICAgICAgICAgICAgY2FzZSBTVE9SSjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJodHRwczovL2NyeXB0b3dhdC5jaC9tYXJrZXRzL2JpdGZpbmV4L3N0ai91c2RcIjtcbiAgICAgICAgICAgIGNhc2UgSU9UQTpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJodHRwczovL2NyeXB0b3dhdC5jaC9tYXJrZXRzL2JpdGZpbmV4L2lvdC91c2RcIjtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiaHR0cHM6Ly9jcnlwdG93YXQuY2gvbWFya2V0cy9iaXRmaW5leC9cIiArIGNvaW4ubmFtZSArIFwiL3VzZFwiO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEZvbnRDb2xvcihwcmljZUNoYW5nZSkge1xuICAgICAgICBpZiAocHJpY2VDaGFuZ2UgPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3JlZCc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocHJpY2VDaGFuZ2UgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2JsdWUnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICdibGFjayc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gcmVuZGVyVXBkYXRlZEF0KHVwZGF0ZWRBdCkge1xuICAgICAgICB2YXIgdGV4dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy51cGRhdGVkLWF0Jyk7XG4gICAgICAgIHRleHQuaW5uZXJUZXh0ID0gZ2V0Rm9ybWF0VXBkYXRlZEF0KHVwZGF0ZWRBdCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEZvcm1hdFVwZGF0ZWRBdCh1cGRhdGVkQXQpIHtcbiAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSh1cGRhdGVkQXQpO1xuICAgICAgICByZXR1cm4gZGF0ZS5nZXRGdWxsWWVhcigpICsgXCIvXCIgKyAoZGF0ZS5nZXRNb250aCgpICsgMSkgKyBcIi9cIiArIGRhdGUuZ2V0RGF0ZSgpXG4gICAgICAgICAgICArIChcIiBcIiArIGRhdGUudG9Mb2NhbGVUaW1lU3RyaW5nKCkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhZGRMaXNlbmVycygpIHtcbiAgICAgICAgdmFyIHJhZGlvQnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0W3R5cGU9cmFkaW9dJyk7XG4gICAgICAgIGZvckVhY2gocmFkaW9CdXR0b25zLCBmdW5jdGlvbiAoYnV0dG9uKSB7XG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGJ1dHRvbi5uYW1lID09PSAncmF0ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1dHRvbi5pZCA9PT0gJ2dpbXAnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRSYXRlKCdnaW1wJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhKCdzZW5kJywgJ2V2ZW50JywgJ0ZpbHRlcicsICdTZXRJbmRpY2F0b3InLCAnZ2ltcCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJ1dHRvbi5pZCA9PT0gJ3RyYW5zbGF0ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFJhdGUoJ3RyYW5zbGF0ZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBnYSgnc2VuZCcsICdldmVudCcsICdGaWx0ZXInLCAnU2V0SW5kaWNhdG9yJywgJ3RyYW5zbGF0ZScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJ1dHRvbi5uYW1lID09PSAndGltZScpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWVfMiA9IGJ1dHRvbi5pZC5zbGljZSgxLCBidXR0b24uaWQubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZShwYXJzZUludCh0aW1lXzIpKTtcbiAgICAgICAgICAgICAgICAgICAgZmV0Y2hQcmljZURhdGEoKTtcbiAgICAgICAgICAgICAgICAgICAgZ2EoJ3NlbmQnLCAnZXZlbnQnLCAnRmlsdGVyJywgJ1NldFRpbWUnLCB0aW1lXzIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB1cGRhdGVVcmwoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZmV0Y2hQcmljZURhdGEoKSB7XG4gICAgICAgIGF4aW9zXzEuZGVmYXVsdC5nZXQoXCJodHRwczovLzE1MTMwaTN2Z2wuZXhlY3V0ZS1hcGkuYXAtbm9ydGhlYXN0LTIuYW1hem9uYXdzLmNvbS9kZXYvYXNzZXRzP3Q9XCIgKyBnZXRUaW1lKCkpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHNldFByaWNlRGF0YShyZXNwb25zZS5kYXRhLmRhdGEpO1xuICAgICAgICAgICAgcmVuZGVyVXBkYXRlZEF0KHJlc3BvbnNlLmRhdGEudXBkYXRlZF9hdCk7XG4gICAgICAgICAgICByZW5kZXIoKTtcbiAgICAgICAgICAgIHJlc2V0UmVmcmVzaFRpbWUoKTtcbiAgICAgICAgICAgIHVwZGF0ZVJlZnJlc2hUZXh0KCk7XG4gICAgICAgICAgICBzaG93TG9hZGluZyhmYWxzZSk7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IucmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yLnJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yLnJlc3BvbnNlLnN0YXR1cyk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IucmVzcG9uc2UuaGVhZGVycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc2V0UmVmcmVzaFRpbWUoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBhcnNlVXJsKCkge1xuICAgICAgICB2YXIgcmF0ZSA9IGdldFBhcmFtZXRlckJ5TmFtZSgncmF0ZScpO1xuICAgICAgICBpZiAocmF0ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBzZXRSYXRlKHJhdGUpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0aW1lID0gZ2V0UGFyYW1ldGVyQnlOYW1lKCd0aW1lJyk7XG4gICAgICAgIGlmICh0aW1lICE9IG51bGwpIHtcbiAgICAgICAgICAgIHNldFRpbWUocGFyc2VJbnQodGltZSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHVwZGF0ZVVybCgpIHtcbiAgICAgICAgaWYgKHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSkge1xuICAgICAgICAgICAgdmFyIHBhcnNlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgICAgICAgIHBhcnNlci5ocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gICAgICAgICAgICBwYXJzZXIuc2VhcmNoID0gXCI/cmF0ZT1cIiArIGdldFJhdGUoKSArIFwiJnRpbWU9XCIgKyBnZXRUaW1lKCk7XG4gICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoe30sIG51bGwsIHBhcnNlci5ocmVmKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRQYXJhbWV0ZXJCeU5hbWUobmFtZSkge1xuICAgICAgICB2YXIgdXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoL1tcXFtcXF1dL2csIFwiXFxcXCQmXCIpO1xuICAgICAgICB2YXIgcmVnZXggPSBuZXcgUmVnRXhwKFwiWz8mXVwiICsgbmFtZSArIFwiKD0oW14mI10qKXwmfCN8JClcIiksIHJlc3VsdHMgPSByZWdleC5leGVjKHVybCk7XG4gICAgICAgIGlmICghcmVzdWx0cylcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBpZiAoIXJlc3VsdHNbMl0pXG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQocmVzdWx0c1syXS5yZXBsYWNlKC9cXCsvZywgXCIgXCIpKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdXBkYXRlQnV0dG9ucygpIHtcbiAgICAgICAgdmFyIHJhdGVCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiaW5wdXRbdHlwZT1yYWRpb11bbmFtZT1yYXRlXVtpZD1cIiArIGdldFJhdGUoKSArIFwiXVwiKTtcbiAgICAgICAgaWYgKHJhdGVCdXR0b24pIHtcbiAgICAgICAgICAgIHJhdGVCdXR0b24uY2xpY2soKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGltZUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dFt0eXBlPXJhZGlvXVtuYW1lPXRpbWVdW2lkPXRcIiArIGdldFRpbWUoKSArIFwiXVwiKTtcbiAgICAgICAgaWYgKHRpbWVCdXR0b24pIHtcbiAgICAgICAgICAgIHRpbWVCdXR0b24uY2xpY2soKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYm9va21hcmsgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYm9va21hcmsnKTtcbiAgICAgICAgaWYgKGJvb2ttYXJrKSB7XG4gICAgICAgICAgICBib29rbWFyay5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAod2luZG93LmV4dGVybmFsICYmICgnQWRkRmF2b3JpdGUnIGluIHdpbmRvdy5leHRlcm5hbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmV4dGVybmFsLkFkZEZhdm9yaXRlKGxvY2F0aW9uLmhyZWYsIGRvY3VtZW50LnRpdGxlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBzZXRSZWZyZXNoVGltZXIoKSB7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50aW1lLXJlZnJlc2gtYnV0dG9uJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmZXRjaFByaWNlRGF0YSgpO1xuICAgICAgICAgICAgZ2EoJ3NlbmQnLCAnZXZlbnQnLCAnUmVmcmVzaCcsICdDbGlja0J1dHRvbicsICdyZWZyZXNoJyk7XG4gICAgICAgIH0pO1xuICAgICAgICB3aW5kb3cuc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZGVjUmVmcmVzaFRpbWUoKTtcbiAgICAgICAgICAgIHVwZGF0ZVJlZnJlc2hUZXh0KCk7XG4gICAgICAgICAgICBpZiAoZ2V0UmVmcmVzaFRpbWUoKSA9PSAwKSB7XG4gICAgICAgICAgICAgICAgZmV0Y2hQcmljZURhdGEoKTtcbiAgICAgICAgICAgICAgICBnYSgnc2VuZCcsICdldmVudCcsICdSZWZyZXNoJywgJ1RpbWVvdXQnLCAncmVmcmVzaCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCAxMDAwKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdXBkYXRlUmVmcmVzaFRleHQoKSB7XG4gICAgICAgIHZhciBjb3VudCA9IGdldFJlZnJlc2hUaW1lKCk7XG4gICAgICAgIHZhciByZWZyZXNoVGV4dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50aW1lLXJlZnJlc2gtdGV4dCcpO1xuICAgICAgICBpZiAoY291bnQgPiA1KSB7XG4gICAgICAgICAgICByZWZyZXNoVGV4dC5pbm5lclRleHQgPSBjb3VudCArIFwiIFxcdUNEMDhcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlZnJlc2hUZXh0LmlubmVyVGV4dCA9ICfsnqDsi5wnO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHVwZGF0ZUN1cnJlbmN5UmF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJhdGU7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCwgZ2V0UmVtb3RlQ3VycmVuY3lSYXRlKCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICByYXRlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2N1cnJlbmN5JywgcmF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmF0ZSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRDdXJyZW5jeVJhdGUocmF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzJdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0UmVtb3RlQ3VycmVuY3lSYXRlKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2UsIGRhdGEsIGVfMTtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnRyeXMucHVzaChbMCwgMiwgLCAzXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIGF4aW9zXzEuZGVmYXVsdC5nZXQoJ2h0dHBzOi8vMTUxMzBpM3ZnbC5leGVjdXRlLWFwaS5hcC1ub3J0aGVhc3QtMi5hbWF6b25hd3MuY29tL2Rldi9jdXJyZW5jeScpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gcmVzcG9uc2UuZGF0YS5kYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyLCBkYXRhLmZpbHRlcihmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5zb3VyY2UgPT09ICdVU0QnICYmIGQudGFyZ2V0ID09PSAnS1JXJzsgfSkubWFwKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLnJhdGU7IH0pWzBdXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgZV8xID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2N1cnJlbmN5JywgZV8xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMywgM107XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFsyLCAwXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNob3dMb2FkaW5nKGxvYWRpbmcpIHtcbiAgICAgICAgaWYgKGxvYWRlZCB8fCAhbG9hZGluZykge1xuICAgICAgICAgICAgbG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICQoJyNsb2FkaW5nLW1vZGFsJykubW9kYWwoJ2hpZGUnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWxvYWRlZCkge1xuICAgICAgICAgICAgICAgICAgICAkKCcjbG9hZGluZy1tb2RhbCcpLm1vZGFsKCdzaG93Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgNTAwKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBzaG93T25ib2FyZGluZygpIHtcbiAgICAgICAgdmFyIGdpbXBCdXR0b24gPSAkKCcuZ2ltcC1vbmJvYXJkaW5nJyk7XG4gICAgICAgIGlmICh3aW5kb3cubG9jYWxTdG9yYWdlKSB7XG4gICAgICAgICAgICB2YXIgbG9jYWxTdG9yYWdlXzEgPSB3aW5kb3cubG9jYWxTdG9yYWdlO1xuICAgICAgICAgICAgaWYgKCFsb2NhbFN0b3JhZ2VfMS5nZXRJdGVtKFwib25ib2FyZGluZzpnaW1wX2J1dHRvblwiKSkge1xuICAgICAgICAgICAgICAgIGdpbXBCdXR0b24ucG9wb3Zlcignc2hvdycpO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5naW1wLW9uYm9hcmRpbmcnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2ltcEJ1dHRvbi5wb3BvdmVyKCdoaWRlJyk7XG4gICAgICAgICAgICAgICAgICAgIGdpbXBCdXR0b24ucG9wb3ZlcignZGlzYWJsZScpO1xuICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2VfMS5zZXRJdGVtKCdvbmJvYXJkaW5nOmdpbXBfYnV0dG9uJywgJ2RvbmUnKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGdpbXBCdXR0b24ucG9wb3ZlcignZGlzYWJsZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZ2ltcEJ1dHRvbi5wb3BvdmVyKCdkaXNhYmxlJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gdXBkYXRlRXhjaGFuZ2VTdGF0dXMoZXhjaGFuZ2UpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFjdGl2ZSwgX2EsIHRhcmdldEljb247XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IGV4Y2hhbmdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgQklURklORVg6IHJldHVybiBbMywgMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBCSVRIVU1COiByZXR1cm4gWzMsIDNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgQ09JTk9ORTogcmV0dXJuIFszLCA1XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFVQQklUOiByZXR1cm4gWzMsIDddO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszLCA5XTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gWzQsIGlzQml0ZmluZXhBY3RpdmUoKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZSA9IF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMywgMTBdO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbNCwgaXNCaXRodW1iQWN0aXZlKCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmUgPSBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMsIDEwXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OiByZXR1cm4gWzQsIGlzQ29pbm9uZUFjdGl2ZSgpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlID0gX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszLCAxMF07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNzogcmV0dXJuIFs0LCBpc1VwYml0QWN0aXZlKCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmUgPSBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMsIDEwXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMywgMTBdO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRJY29uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5iYW4tXCIgKyBleGNoYW5nZS5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0SWNvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRJY29uLmNsYXNzTmFtZSA9ICdvaSBvaS1iYW4gdGV4dC1kYW5nZXInO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMl07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc0JpdGZpbmV4QWN0aXZlKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2UsIGVfMjtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnRyeXMucHVzaChbMCwgMiwgLCAzXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIGF4aW9zXzEuZGVmYXVsdC5nZXQoJ2h0dHBzOi8vYXBpLmJpdGZpbmV4LmNvbS92Mi9wbGF0Zm9ybS9zdGF0dXMnKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyLCByZXNwb25zZS5kYXRhWzBdID09IDFdO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBlXzIgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnYml0ZmluZXgnLCBlXzIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyLCBmYWxzZV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFsyXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzQml0aHVtYkFjdGl2ZSgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlc3BvbnNlLCBzdGF0dXNfMSwgZGF0ZSwgY3VycmVudFRpbWUsIHZhbGlkRGF0ZSwgZV8zO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2EudHJ5cy5wdXNoKFswLCAyLCAsIDNdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgYXhpb3NfMS5kZWZhdWx0LmdldCgnaHR0cHM6Ly9hcGkuYml0aHVtYi5jb20vcHVibGljL3RpY2tlci9CVEMnKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzXzEgPSByZXNwb25zZS5kYXRhLnN0YXR1cztcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGUgPSBwYXJzZUludChyZXNwb25zZS5kYXRhLmRhdGEuZGF0ZSwgMTApO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkRGF0ZSA9IGRhdGUgLSAxMDAwMCA8IGN1cnJlbnRUaW1lICYmIGN1cnJlbnRUaW1lIDwgZGF0ZSArIDEwMDAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyLCBzdGF0dXNfMSA9PT0gJzAwMDAnICYmIHZhbGlkRGF0ZV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGVfMyA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdiaXRodW1iJywgZV8zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiwgZmFsc2VdO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbMl07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc0NvaW5vbmVBY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciByZXNwb25zZSwgcmVzdWx0LCB0aW1lc3RhbXAsIGN1cnJlbnRUaW1lLCB2YWxpZERhdGUsIGVfNDtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnRyeXMucHVzaChbMCwgMiwgLCAzXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIGF4aW9zXzEuZGVmYXVsdC5nZXQoJ2h0dHBzOi8vYXBpLmNvaW5vbmUuY28ua3IvdGlja2VyP2N1cnJlbmN5PWJ0YycpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXNwb25zZS5kYXRhLnJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcCA9IHBhcnNlSW50KHJlc3BvbnNlLmRhdGEudGltZXN0YW1wLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC8gMTAwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkRGF0ZSA9IHRpbWVzdGFtcCAtIDEwIDwgY3VycmVudFRpbWUgJiYgY3VycmVudFRpbWUgPCB0aW1lc3RhbXAgKyAxMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiwgcmVzdWx0ID09PSAnc3VjY2VzcycgJiYgdmFsaWREYXRlXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgZV80ID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2NvaW5vbmUnLCBlXzQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyLCBmYWxzZV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFsyXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzVXBiaXRBY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciByZXNwb25zZSwgdGltZXN0YW1wLCBjdXJyZW50VGltZSwgZV81O1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2EudHJ5cy5wdXNoKFswLCAyLCAsIDNdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgYXhpb3NfMS5kZWZhdWx0LmdldCgnaHR0cHM6Ly9jY3gudXBiaXQuY29tL2FwaS92MS90aW1lc3RhbXAnKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGltZXN0YW1wID0gcGFyc2VJbnQocmVzcG9uc2UuZGF0YSwgMTApO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAvIDEwMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIsIHRpbWVzdGFtcCAtIDEwIDwgY3VycmVudFRpbWUgJiYgY3VycmVudFRpbWUgPCB0aW1lc3RhbXAgKyAxMF07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGVfNSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd1cGJpdCcsIGVfNSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIsIGZhbHNlXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzJdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgc2hvd0xvYWRpbmcodHJ1ZSk7XG4gICAgcGFyc2VVcmwoKTtcbiAgICB1cGRhdGVCdXR0b25zKCk7XG4gICAgYWRkTGlzZW5lcnMoKTtcbiAgICBzZXRSZWZyZXNoVGltZXIoKTtcbiAgICB1cGRhdGVDdXJyZW5jeVJhdGUoKTtcbiAgICBmZXRjaFByaWNlRGF0YSgpO1xuICAgIHNob3dPbmJvYXJkaW5nKCk7XG59XG5yZWFkeShtYWluKTtcblxuXG4vKioqLyB9KSxcbi8qIDggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xuXG4vKioqLyB9KSxcbi8qIDkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIHV0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBiaW5kID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcbnZhciBBeGlvcyA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xudmFyIGRlZmF1bHRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgdmFyIGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIHZhciBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0KTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxudmFyIGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3M7XG5cbi8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbmF4aW9zLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICByZXR1cm4gY3JlYXRlSW5zdGFuY2UodXRpbHMubWVyZ2UoZGVmYXVsdHMsIGluc3RhbmNlQ29uZmlnKSk7XG59O1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbCA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5heGlvcy5DYW5jZWxUb2tlbiA9IF9fd2VicGFja19yZXF1aXJlX18oMjYpO1xuYXhpb3MuaXNDYW5jZWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuYXhpb3Muc3ByZWFkID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cbi8vIEFsbG93IHVzZSBvZiBkZWZhdWx0IGltcG9ydCBzeW50YXggaW4gVHlwZVNjcmlwdFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuXG5cbi8qKiovIH0pLFxuLyogMTAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuLyohXG4gKiBEZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGlzIGEgQnVmZmVyXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuXG4vLyBUaGUgX2lzQnVmZmVyIGNoZWNrIGlzIGZvciBTYWZhcmkgNS03IHN1cHBvcnQsIGJlY2F1c2UgaXQncyBtaXNzaW5nXG4vLyBPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yLiBSZW1vdmUgdGhpcyBldmVudHVhbGx5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPSBudWxsICYmIChpc0J1ZmZlcihvYmopIHx8IGlzU2xvd0J1ZmZlcihvYmopIHx8ICEhb2JqLl9pc0J1ZmZlcilcbn1cblxuZnVuY3Rpb24gaXNCdWZmZXIgKG9iaikge1xuICByZXR1cm4gISFvYmouY29uc3RydWN0b3IgJiYgdHlwZW9mIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKVxufVxuXG4vLyBGb3IgTm9kZSB2MC4xMCBzdXBwb3J0LiBSZW1vdmUgdGhpcyBldmVudHVhbGx5LlxuZnVuY3Rpb24gaXNTbG93QnVmZmVyIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmoucmVhZEZsb2F0TEUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG9iai5zbGljZSA9PT0gJ2Z1bmN0aW9uJyAmJiBpc0J1ZmZlcihvYmouc2xpY2UoMCwgMCkpXG59XG5cblxuLyoqKi8gfSksXG4vKiAxMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgZGVmYXVsdHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xudmFyIHV0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBJbnRlcmNlcHRvck1hbmFnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyKTtcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gQXhpb3MoaW5zdGFuY2VDb25maWcpIHtcbiAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnO1xuICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKVxuICB9O1xufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICovXG5BeGlvcy5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIHJlcXVlc3QoY29uZmlnKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgIGNvbmZpZyA9IHV0aWxzLm1lcmdlKHtcbiAgICAgIHVybDogYXJndW1lbnRzWzBdXG4gICAgfSwgYXJndW1lbnRzWzFdKTtcbiAgfVxuXG4gIGNvbmZpZyA9IHV0aWxzLm1lcmdlKGRlZmF1bHRzLCB0aGlzLmRlZmF1bHRzLCB7IG1ldGhvZDogJ2dldCcgfSwgY29uZmlnKTtcbiAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKTtcblxuICAvLyBIb29rIHVwIGludGVyY2VwdG9ycyBtaWRkbGV3YXJlXG4gIHZhciBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QsIHVuZGVmaW5lZF07XG4gIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB3aGlsZSAoY2hhaW4ubGVuZ3RoKSB7XG4gICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbi5zaGlmdCgpLCBjaGFpbi5zaGlmdCgpKTtcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlO1xufTtcblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGlvcztcblxuXG4vKioqLyB9KSxcbi8qIDEyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG5cblxuLyoqKi8gfSksXG4vKiAxMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuXG5cbi8qKiovIH0pLFxuLyogMTQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGNyZWF0ZUVycm9yID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICB2YXIgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIC8vIE5vdGU6IHN0YXR1cyBpcyBub3QgZXhwb3NlZCBieSBYRG9tYWluUmVxdWVzdFxuICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCAhdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICBudWxsLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn07XG5cblxuLyoqKi8gfSksXG4vKiAxNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuICBlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgcmV0dXJuIGVycm9yO1xufTtcblxuXG4vKioqLyB9KSxcbi8qIDE2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciB1dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWwpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLlxuICAgIHJlcGxhY2UoLyU0MC9naSwgJ0AnKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgcGFyYW1zU2VyaWFsaXplcikge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIGlmIChwYXJhbXNTZXJpYWxpemVyKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKTtcbiAgfSBlbHNlIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtcy50b1N0cmluZygpO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuXG4gICAgdXRpbHMuZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWwsIGtleSkge1xuICAgICAgaWYgKHZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh1dGlscy5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAga2V5ID0ga2V5ICsgJ1tdJztcbiAgICAgIH1cblxuICAgICAgaWYgKCF1dGlscy5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59O1xuXG5cbi8qKiovIH0pLFxuLyogMTcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIHV0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuLy8gSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbnZhciBpZ25vcmVEdXBsaWNhdGVPZiA9IFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSB7fTtcbiAgdmFyIGtleTtcbiAgdmFyIHZhbDtcbiAgdmFyIGk7XG5cbiAgaWYgKCFoZWFkZXJzKSB7IHJldHVybiBwYXJzZWQ7IH1cblxuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKDAsIGkpKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIGlmIChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZi5pbmRleE9mKGtleSkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSAocGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSA6IFtdKS5jb25jYXQoW3ZhbF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuXG5cbi8qKiovIH0pLFxuLyogMTggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIHV0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIHZhciBvcmlnaW5VUkw7XG5cbiAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgdmFyIGhyZWYgPSB1cmw7XG5cbiAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgfVxuXG4gICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICB9O1xuICAgIH1cblxuICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICB2YXIgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICB9O1xuICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICB9KSgpXG4pO1xuXG5cbi8qKiovIH0pLFxuLyogMTkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gYnRvYSBwb2x5ZmlsbCBmb3IgSUU8MTAgY291cnRlc3kgaHR0cHM6Ly9naXRodWIuY29tL2RhdmlkY2hhbWJlcnMvQmFzZTY0LmpzXG5cbnZhciBjaGFycyA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPSc7XG5cbmZ1bmN0aW9uIEUoKSB7XG4gIHRoaXMubWVzc2FnZSA9ICdTdHJpbmcgY29udGFpbnMgYW4gaW52YWxpZCBjaGFyYWN0ZXInO1xufVxuRS5wcm90b3R5cGUgPSBuZXcgRXJyb3I7XG5FLnByb3RvdHlwZS5jb2RlID0gNTtcbkUucHJvdG90eXBlLm5hbWUgPSAnSW52YWxpZENoYXJhY3RlckVycm9yJztcblxuZnVuY3Rpb24gYnRvYShpbnB1dCkge1xuICB2YXIgc3RyID0gU3RyaW5nKGlucHV0KTtcbiAgdmFyIG91dHB1dCA9ICcnO1xuICBmb3IgKFxuICAgIC8vIGluaXRpYWxpemUgcmVzdWx0IGFuZCBjb3VudGVyXG4gICAgdmFyIGJsb2NrLCBjaGFyQ29kZSwgaWR4ID0gMCwgbWFwID0gY2hhcnM7XG4gICAgLy8gaWYgdGhlIG5leHQgc3RyIGluZGV4IGRvZXMgbm90IGV4aXN0OlxuICAgIC8vICAgY2hhbmdlIHRoZSBtYXBwaW5nIHRhYmxlIHRvIFwiPVwiXG4gICAgLy8gICBjaGVjayBpZiBkIGhhcyBubyBmcmFjdGlvbmFsIGRpZ2l0c1xuICAgIHN0ci5jaGFyQXQoaWR4IHwgMCkgfHwgKG1hcCA9ICc9JywgaWR4ICUgMSk7XG4gICAgLy8gXCI4IC0gaWR4ICUgMSAqIDhcIiBnZW5lcmF0ZXMgdGhlIHNlcXVlbmNlIDIsIDQsIDYsIDhcbiAgICBvdXRwdXQgKz0gbWFwLmNoYXJBdCg2MyAmIGJsb2NrID4+IDggLSBpZHggJSAxICogOClcbiAgKSB7XG4gICAgY2hhckNvZGUgPSBzdHIuY2hhckNvZGVBdChpZHggKz0gMyAvIDQpO1xuICAgIGlmIChjaGFyQ29kZSA+IDB4RkYpIHtcbiAgICAgIHRocm93IG5ldyBFKCk7XG4gICAgfVxuICAgIGJsb2NrID0gYmxvY2sgPDwgOCB8IGNoYXJDb2RlO1xuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYnRvYTtcblxuXG4vKioqLyB9KSxcbi8qIDIwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciB1dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgICB2YXIgY29va2llID0gW107XG4gICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICBpZiAodXRpbHMuaXNOdW1iZXIoZXhwaXJlcykpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcocGF0aCkpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoZG9tYWluKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2VjdXJlID09PSB0cnVlKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ3NlY3VyZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgICB9LFxuXG4gICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICAgIH0sXG5cbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcbiAgICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICAgIH1cbiAgICB9O1xuICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZSgpIHt9LFxuICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfSkoKVxuKTtcblxuXG4vKioqLyB9KSxcbi8qIDIxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciB1dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCkge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcblxuXG4vKioqLyB9KSxcbi8qIDIyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciB1dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IF9fd2VicGFja19yZXF1aXJlX18oMjMpO1xudmFyIGlzQ2FuY2VsID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcbnZhciBkZWZhdWx0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG52YXIgaXNBYnNvbHV0ZVVSTCA9IF9fd2VicGFja19yZXF1aXJlX18oMjQpO1xudmFyIGNvbWJpbmVVUkxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNSk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gU3VwcG9ydCBiYXNlVVJMIGNvbmZpZ1xuICBpZiAoY29uZmlnLmJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwoY29uZmlnLnVybCkpIHtcbiAgICBjb25maWcudXJsID0gY29tYmluZVVSTHMoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICB9XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVycyB8fCB7fVxuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgIHJlc3BvbnNlLmRhdGEsXG4gICAgICByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn07XG5cblxuLyoqKi8gfSksXG4vKiAyMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGRhdGEgVGhlIGRhdGEgdG8gYmUgdHJhbnNmb3JtZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGhlYWRlcnMgVGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0IG9yIHJlc3BvbnNlXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBmbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4oZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcblxuXG4vKioqLyB9KSxcbi8qIDI0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZFxcK1xcLVxcLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufTtcblxuXG4vKioqLyB9KSxcbi8qIDI1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn07XG5cblxuLyoqKi8gfSksXG4vKiAyNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgQ2FuY2VsID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcblxuXG4vKioqLyB9KSxcbi8qIDI3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn07XG5cblxuLyoqKi8gfSlcbi8qKioqKiovIF0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBkc3QvYnVuZGxlLmpzIiwiIFx0ZnVuY3Rpb24gaG90RGlzcG9zZUNodW5rKGNodW5rSWQpIHtcbiBcdFx0ZGVsZXRlIGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcbiBcdH1cbiBcdHZhciBwYXJlbnRIb3RVcGRhdGVDYWxsYmFjayA9IHdpbmRvd1tcIndlYnBhY2tIb3RVcGRhdGVcIl07XG4gXHR3aW5kb3dbXCJ3ZWJwYWNrSG90VXBkYXRlXCJdID0gXHJcbiBcdGZ1bmN0aW9uIHdlYnBhY2tIb3RVcGRhdGVDYWxsYmFjayhjaHVua0lkLCBtb3JlTW9kdWxlcykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXHJcbiBcdFx0aG90QWRkVXBkYXRlQ2h1bmsoY2h1bmtJZCwgbW9yZU1vZHVsZXMpO1xyXG4gXHRcdGlmKHBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrKSBwYXJlbnRIb3RVcGRhdGVDYWxsYmFjayhjaHVua0lkLCBtb3JlTW9kdWxlcyk7XHJcbiBcdH0gO1xyXG4gXHRcclxuIFx0ZnVuY3Rpb24gaG90RG93bmxvYWRVcGRhdGVDaHVuayhjaHVua0lkKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcclxuIFx0XHR2YXIgaGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaGVhZFwiKVswXTtcclxuIFx0XHR2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcclxuIFx0XHRzY3JpcHQudHlwZSA9IFwidGV4dC9qYXZhc2NyaXB0XCI7XHJcbiBcdFx0c2NyaXB0LmNoYXJzZXQgPSBcInV0Zi04XCI7XHJcbiBcdFx0c2NyaXB0LnNyYyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFwiXCIgKyBjaHVua0lkICsgXCIuXCIgKyBob3RDdXJyZW50SGFzaCArIFwiLmhvdC11cGRhdGUuanNcIjtcclxuIFx0XHQ7XHJcbiBcdFx0aGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xyXG4gXHR9XHJcbiBcdFxyXG4gXHRmdW5jdGlvbiBob3REb3dubG9hZE1hbmlmZXN0KHJlcXVlc3RUaW1lb3V0KSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcclxuIFx0XHRyZXF1ZXN0VGltZW91dCA9IHJlcXVlc3RUaW1lb3V0IHx8IDEwMDAwO1xyXG4gXHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuIFx0XHRcdGlmKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCA9PT0gXCJ1bmRlZmluZWRcIilcclxuIFx0XHRcdFx0cmV0dXJuIHJlamVjdChuZXcgRXJyb3IoXCJObyBicm93c2VyIHN1cHBvcnRcIikpO1xyXG4gXHRcdFx0dHJ5IHtcclxuIFx0XHRcdFx0dmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuIFx0XHRcdFx0dmFyIHJlcXVlc3RQYXRoID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgXCJcIiArIGhvdEN1cnJlbnRIYXNoICsgXCIuaG90LXVwZGF0ZS5qc29uXCI7XHJcbiBcdFx0XHRcdHJlcXVlc3Qub3BlbihcIkdFVFwiLCByZXF1ZXN0UGF0aCwgdHJ1ZSk7XHJcbiBcdFx0XHRcdHJlcXVlc3QudGltZW91dCA9IHJlcXVlc3RUaW1lb3V0O1xyXG4gXHRcdFx0XHRyZXF1ZXN0LnNlbmQobnVsbCk7XHJcbiBcdFx0XHR9IGNhdGNoKGVycikge1xyXG4gXHRcdFx0XHRyZXR1cm4gcmVqZWN0KGVycik7XHJcbiBcdFx0XHR9XHJcbiBcdFx0XHRyZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xyXG4gXHRcdFx0XHRpZihyZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHJldHVybjtcclxuIFx0XHRcdFx0aWYocmVxdWVzdC5zdGF0dXMgPT09IDApIHtcclxuIFx0XHRcdFx0XHQvLyB0aW1lb3V0XHJcbiBcdFx0XHRcdFx0cmVqZWN0KG5ldyBFcnJvcihcIk1hbmlmZXN0IHJlcXVlc3QgdG8gXCIgKyByZXF1ZXN0UGF0aCArIFwiIHRpbWVkIG91dC5cIikpO1xyXG4gXHRcdFx0XHR9IGVsc2UgaWYocmVxdWVzdC5zdGF0dXMgPT09IDQwNCkge1xyXG4gXHRcdFx0XHRcdC8vIG5vIHVwZGF0ZSBhdmFpbGFibGVcclxuIFx0XHRcdFx0XHRyZXNvbHZlKCk7XHJcbiBcdFx0XHRcdH0gZWxzZSBpZihyZXF1ZXN0LnN0YXR1cyAhPT0gMjAwICYmIHJlcXVlc3Quc3RhdHVzICE9PSAzMDQpIHtcclxuIFx0XHRcdFx0XHQvLyBvdGhlciBmYWlsdXJlXHJcbiBcdFx0XHRcdFx0cmVqZWN0KG5ldyBFcnJvcihcIk1hbmlmZXN0IHJlcXVlc3QgdG8gXCIgKyByZXF1ZXN0UGF0aCArIFwiIGZhaWxlZC5cIikpO1xyXG4gXHRcdFx0XHR9IGVsc2Uge1xyXG4gXHRcdFx0XHRcdC8vIHN1Y2Nlc3NcclxuIFx0XHRcdFx0XHR0cnkge1xyXG4gXHRcdFx0XHRcdFx0dmFyIHVwZGF0ZSA9IEpTT04ucGFyc2UocmVxdWVzdC5yZXNwb25zZVRleHQpO1xyXG4gXHRcdFx0XHRcdH0gY2F0Y2goZSkge1xyXG4gXHRcdFx0XHRcdFx0cmVqZWN0KGUpO1xyXG4gXHRcdFx0XHRcdFx0cmV0dXJuO1xyXG4gXHRcdFx0XHRcdH1cclxuIFx0XHRcdFx0XHRyZXNvbHZlKHVwZGF0ZSk7XHJcbiBcdFx0XHRcdH1cclxuIFx0XHRcdH07XHJcbiBcdFx0fSk7XHJcbiBcdH1cclxuXG4gXHRcclxuIFx0XHJcbiBcdHZhciBob3RBcHBseU9uVXBkYXRlID0gdHJ1ZTtcclxuIFx0dmFyIGhvdEN1cnJlbnRIYXNoID0gXCI5NGJmNDk5NTJlOWVkZjI0YTQyOVwiOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXHJcbiBcdHZhciBob3RSZXF1ZXN0VGltZW91dCA9IDEwMDAwO1xyXG4gXHR2YXIgaG90Q3VycmVudE1vZHVsZURhdGEgPSB7fTtcclxuIFx0dmFyIGhvdEN1cnJlbnRDaGlsZE1vZHVsZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xyXG4gXHR2YXIgaG90Q3VycmVudFBhcmVudHMgPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xyXG4gXHR2YXIgaG90Q3VycmVudFBhcmVudHNUZW1wID0gW107IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcclxuIFx0XHJcbiBcdGZ1bmN0aW9uIGhvdENyZWF0ZVJlcXVpcmUobW9kdWxlSWQpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xyXG4gXHRcdHZhciBtZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xyXG4gXHRcdGlmKCFtZSkgcmV0dXJuIF9fd2VicGFja19yZXF1aXJlX187XHJcbiBcdFx0dmFyIGZuID0gZnVuY3Rpb24ocmVxdWVzdCkge1xyXG4gXHRcdFx0aWYobWUuaG90LmFjdGl2ZSkge1xyXG4gXHRcdFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdKSB7XHJcbiBcdFx0XHRcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XS5wYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpIDwgMClcclxuIFx0XHRcdFx0XHRcdGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0ucGFyZW50cy5wdXNoKG1vZHVsZUlkKTtcclxuIFx0XHRcdFx0fSBlbHNlIHtcclxuIFx0XHRcdFx0XHRob3RDdXJyZW50UGFyZW50cyA9IFttb2R1bGVJZF07XHJcbiBcdFx0XHRcdFx0aG90Q3VycmVudENoaWxkTW9kdWxlID0gcmVxdWVzdDtcclxuIFx0XHRcdFx0fVxyXG4gXHRcdFx0XHRpZihtZS5jaGlsZHJlbi5pbmRleE9mKHJlcXVlc3QpIDwgMClcclxuIFx0XHRcdFx0XHRtZS5jaGlsZHJlbi5wdXNoKHJlcXVlc3QpO1xyXG4gXHRcdFx0fSBlbHNlIHtcclxuIFx0XHRcdFx0Y29uc29sZS53YXJuKFwiW0hNUl0gdW5leHBlY3RlZCByZXF1aXJlKFwiICsgcmVxdWVzdCArIFwiKSBmcm9tIGRpc3Bvc2VkIG1vZHVsZSBcIiArIG1vZHVsZUlkKTtcclxuIFx0XHRcdFx0aG90Q3VycmVudFBhcmVudHMgPSBbXTtcclxuIFx0XHRcdH1cclxuIFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKHJlcXVlc3QpO1xyXG4gXHRcdH07XHJcbiBcdFx0dmFyIE9iamVjdEZhY3RvcnkgPSBmdW5jdGlvbiBPYmplY3RGYWN0b3J5KG5hbWUpIHtcclxuIFx0XHRcdHJldHVybiB7XHJcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuIFx0XHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuIFx0XHRcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfX1tuYW1lXTtcclxuIFx0XHRcdFx0fSxcclxuIFx0XHRcdFx0c2V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gXHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX19bbmFtZV0gPSB2YWx1ZTtcclxuIFx0XHRcdFx0fVxyXG4gXHRcdFx0fTtcclxuIFx0XHR9O1xyXG4gXHRcdGZvcih2YXIgbmFtZSBpbiBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XHJcbiBcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX193ZWJwYWNrX3JlcXVpcmVfXywgbmFtZSkgJiYgbmFtZSAhPT0gXCJlXCIpIHtcclxuIFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCBuYW1lLCBPYmplY3RGYWN0b3J5KG5hbWUpKTtcclxuIFx0XHRcdH1cclxuIFx0XHR9XHJcbiBcdFx0Zm4uZSA9IGZ1bmN0aW9uKGNodW5rSWQpIHtcclxuIFx0XHRcdGlmKGhvdFN0YXR1cyA9PT0gXCJyZWFkeVwiKVxyXG4gXHRcdFx0XHRob3RTZXRTdGF0dXMoXCJwcmVwYXJlXCIpO1xyXG4gXHRcdFx0aG90Q2h1bmtzTG9hZGluZysrO1xyXG4gXHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uZShjaHVua0lkKS50aGVuKGZpbmlzaENodW5rTG9hZGluZywgZnVuY3Rpb24oZXJyKSB7XHJcbiBcdFx0XHRcdGZpbmlzaENodW5rTG9hZGluZygpO1xyXG4gXHRcdFx0XHR0aHJvdyBlcnI7XHJcbiBcdFx0XHR9KTtcclxuIFx0XHJcbiBcdFx0XHRmdW5jdGlvbiBmaW5pc2hDaHVua0xvYWRpbmcoKSB7XHJcbiBcdFx0XHRcdGhvdENodW5rc0xvYWRpbmctLTtcclxuIFx0XHRcdFx0aWYoaG90U3RhdHVzID09PSBcInByZXBhcmVcIikge1xyXG4gXHRcdFx0XHRcdGlmKCFob3RXYWl0aW5nRmlsZXNNYXBbY2h1bmtJZF0pIHtcclxuIFx0XHRcdFx0XHRcdGhvdEVuc3VyZVVwZGF0ZUNodW5rKGNodW5rSWQpO1xyXG4gXHRcdFx0XHRcdH1cclxuIFx0XHRcdFx0XHRpZihob3RDaHVua3NMb2FkaW5nID09PSAwICYmIGhvdFdhaXRpbmdGaWxlcyA9PT0gMCkge1xyXG4gXHRcdFx0XHRcdFx0aG90VXBkYXRlRG93bmxvYWRlZCgpO1xyXG4gXHRcdFx0XHRcdH1cclxuIFx0XHRcdFx0fVxyXG4gXHRcdFx0fVxyXG4gXHRcdH07XHJcbiBcdFx0cmV0dXJuIGZuO1xyXG4gXHR9XHJcbiBcdFxyXG4gXHRmdW5jdGlvbiBob3RDcmVhdGVNb2R1bGUobW9kdWxlSWQpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xyXG4gXHRcdHZhciBob3QgPSB7XHJcbiBcdFx0XHQvLyBwcml2YXRlIHN0dWZmXHJcbiBcdFx0XHRfYWNjZXB0ZWREZXBlbmRlbmNpZXM6IHt9LFxyXG4gXHRcdFx0X2RlY2xpbmVkRGVwZW5kZW5jaWVzOiB7fSxcclxuIFx0XHRcdF9zZWxmQWNjZXB0ZWQ6IGZhbHNlLFxyXG4gXHRcdFx0X3NlbGZEZWNsaW5lZDogZmFsc2UsXHJcbiBcdFx0XHRfZGlzcG9zZUhhbmRsZXJzOiBbXSxcclxuIFx0XHRcdF9tYWluOiBob3RDdXJyZW50Q2hpbGRNb2R1bGUgIT09IG1vZHVsZUlkLFxyXG4gXHRcclxuIFx0XHRcdC8vIE1vZHVsZSBBUElcclxuIFx0XHRcdGFjdGl2ZTogdHJ1ZSxcclxuIFx0XHRcdGFjY2VwdDogZnVuY3Rpb24oZGVwLCBjYWxsYmFjaykge1xyXG4gXHRcdFx0XHRpZih0eXBlb2YgZGVwID09PSBcInVuZGVmaW5lZFwiKVxyXG4gXHRcdFx0XHRcdGhvdC5fc2VsZkFjY2VwdGVkID0gdHJ1ZTtcclxuIFx0XHRcdFx0ZWxzZSBpZih0eXBlb2YgZGVwID09PSBcImZ1bmN0aW9uXCIpXHJcbiBcdFx0XHRcdFx0aG90Ll9zZWxmQWNjZXB0ZWQgPSBkZXA7XHJcbiBcdFx0XHRcdGVsc2UgaWYodHlwZW9mIGRlcCA9PT0gXCJvYmplY3RcIilcclxuIFx0XHRcdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKVxyXG4gXHRcdFx0XHRcdFx0aG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBbaV1dID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24oKSB7fTtcclxuIFx0XHRcdFx0ZWxzZVxyXG4gXHRcdFx0XHRcdGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uKCkge307XHJcbiBcdFx0XHR9LFxyXG4gXHRcdFx0ZGVjbGluZTogZnVuY3Rpb24oZGVwKSB7XHJcbiBcdFx0XHRcdGlmKHR5cGVvZiBkZXAgPT09IFwidW5kZWZpbmVkXCIpXHJcbiBcdFx0XHRcdFx0aG90Ll9zZWxmRGVjbGluZWQgPSB0cnVlO1xyXG4gXHRcdFx0XHRlbHNlIGlmKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIpXHJcbiBcdFx0XHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKylcclxuIFx0XHRcdFx0XHRcdGhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IHRydWU7XHJcbiBcdFx0XHRcdGVsc2VcclxuIFx0XHRcdFx0XHRob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcF0gPSB0cnVlO1xyXG4gXHRcdFx0fSxcclxuIFx0XHRcdGRpc3Bvc2U6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XHJcbiBcdFx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xyXG4gXHRcdFx0fSxcclxuIFx0XHRcdGFkZERpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbihjYWxsYmFjaykge1xyXG4gXHRcdFx0XHRob3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcclxuIFx0XHRcdH0sXHJcbiBcdFx0XHRyZW1vdmVEaXNwb3NlSGFuZGxlcjogZnVuY3Rpb24oY2FsbGJhY2spIHtcclxuIFx0XHRcdFx0dmFyIGlkeCA9IGhvdC5fZGlzcG9zZUhhbmRsZXJzLmluZGV4T2YoY2FsbGJhY2spO1xyXG4gXHRcdFx0XHRpZihpZHggPj0gMCkgaG90Ll9kaXNwb3NlSGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XHJcbiBcdFx0XHR9LFxyXG4gXHRcclxuIFx0XHRcdC8vIE1hbmFnZW1lbnQgQVBJXHJcbiBcdFx0XHRjaGVjazogaG90Q2hlY2ssXHJcbiBcdFx0XHRhcHBseTogaG90QXBwbHksXHJcbiBcdFx0XHRzdGF0dXM6IGZ1bmN0aW9uKGwpIHtcclxuIFx0XHRcdFx0aWYoIWwpIHJldHVybiBob3RTdGF0dXM7XHJcbiBcdFx0XHRcdGhvdFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7XHJcbiBcdFx0XHR9LFxyXG4gXHRcdFx0YWRkU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24obCkge1xyXG4gXHRcdFx0XHRob3RTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xyXG4gXHRcdFx0fSxcclxuIFx0XHRcdHJlbW92ZVN0YXR1c0hhbmRsZXI6IGZ1bmN0aW9uKGwpIHtcclxuIFx0XHRcdFx0dmFyIGlkeCA9IGhvdFN0YXR1c0hhbmRsZXJzLmluZGV4T2YobCk7XHJcbiBcdFx0XHRcdGlmKGlkeCA+PSAwKSBob3RTdGF0dXNIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcclxuIFx0XHRcdH0sXHJcbiBcdFxyXG4gXHRcdFx0Ly9pbmhlcml0IGZyb20gcHJldmlvdXMgZGlzcG9zZSBjYWxsXHJcbiBcdFx0XHRkYXRhOiBob3RDdXJyZW50TW9kdWxlRGF0YVttb2R1bGVJZF1cclxuIFx0XHR9O1xyXG4gXHRcdGhvdEN1cnJlbnRDaGlsZE1vZHVsZSA9IHVuZGVmaW5lZDtcclxuIFx0XHRyZXR1cm4gaG90O1xyXG4gXHR9XHJcbiBcdFxyXG4gXHR2YXIgaG90U3RhdHVzSGFuZGxlcnMgPSBbXTtcclxuIFx0dmFyIGhvdFN0YXR1cyA9IFwiaWRsZVwiO1xyXG4gXHRcclxuIFx0ZnVuY3Rpb24gaG90U2V0U3RhdHVzKG5ld1N0YXR1cykge1xyXG4gXHRcdGhvdFN0YXR1cyA9IG5ld1N0YXR1cztcclxuIFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgaG90U3RhdHVzSGFuZGxlcnMubGVuZ3RoOyBpKyspXHJcbiBcdFx0XHRob3RTdGF0dXNIYW5kbGVyc1tpXS5jYWxsKG51bGwsIG5ld1N0YXR1cyk7XHJcbiBcdH1cclxuIFx0XHJcbiBcdC8vIHdoaWxlIGRvd25sb2FkaW5nXHJcbiBcdHZhciBob3RXYWl0aW5nRmlsZXMgPSAwO1xyXG4gXHR2YXIgaG90Q2h1bmtzTG9hZGluZyA9IDA7XHJcbiBcdHZhciBob3RXYWl0aW5nRmlsZXNNYXAgPSB7fTtcclxuIFx0dmFyIGhvdFJlcXVlc3RlZEZpbGVzTWFwID0ge307XHJcbiBcdHZhciBob3RBdmFpbGFibGVGaWxlc01hcCA9IHt9O1xyXG4gXHR2YXIgaG90RGVmZXJyZWQ7XHJcbiBcdFxyXG4gXHQvLyBUaGUgdXBkYXRlIGluZm9cclxuIFx0dmFyIGhvdFVwZGF0ZSwgaG90VXBkYXRlTmV3SGFzaDtcclxuIFx0XHJcbiBcdGZ1bmN0aW9uIHRvTW9kdWxlSWQoaWQpIHtcclxuIFx0XHR2YXIgaXNOdW1iZXIgPSAoK2lkKSArIFwiXCIgPT09IGlkO1xyXG4gXHRcdHJldHVybiBpc051bWJlciA/ICtpZCA6IGlkO1xyXG4gXHR9XHJcbiBcdFxyXG4gXHRmdW5jdGlvbiBob3RDaGVjayhhcHBseSkge1xyXG4gXHRcdGlmKGhvdFN0YXR1cyAhPT0gXCJpZGxlXCIpIHRocm93IG5ldyBFcnJvcihcImNoZWNrKCkgaXMgb25seSBhbGxvd2VkIGluIGlkbGUgc3RhdHVzXCIpO1xyXG4gXHRcdGhvdEFwcGx5T25VcGRhdGUgPSBhcHBseTtcclxuIFx0XHRob3RTZXRTdGF0dXMoXCJjaGVja1wiKTtcclxuIFx0XHRyZXR1cm4gaG90RG93bmxvYWRNYW5pZmVzdChob3RSZXF1ZXN0VGltZW91dCkudGhlbihmdW5jdGlvbih1cGRhdGUpIHtcclxuIFx0XHRcdGlmKCF1cGRhdGUpIHtcclxuIFx0XHRcdFx0aG90U2V0U3RhdHVzKFwiaWRsZVwiKTtcclxuIFx0XHRcdFx0cmV0dXJuIG51bGw7XHJcbiBcdFx0XHR9XHJcbiBcdFx0XHRob3RSZXF1ZXN0ZWRGaWxlc01hcCA9IHt9O1xyXG4gXHRcdFx0aG90V2FpdGluZ0ZpbGVzTWFwID0ge307XHJcbiBcdFx0XHRob3RBdmFpbGFibGVGaWxlc01hcCA9IHVwZGF0ZS5jO1xyXG4gXHRcdFx0aG90VXBkYXRlTmV3SGFzaCA9IHVwZGF0ZS5oO1xyXG4gXHRcclxuIFx0XHRcdGhvdFNldFN0YXR1cyhcInByZXBhcmVcIik7XHJcbiBcdFx0XHR2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gXHRcdFx0XHRob3REZWZlcnJlZCA9IHtcclxuIFx0XHRcdFx0XHRyZXNvbHZlOiByZXNvbHZlLFxyXG4gXHRcdFx0XHRcdHJlamVjdDogcmVqZWN0XHJcbiBcdFx0XHRcdH07XHJcbiBcdFx0XHR9KTtcclxuIFx0XHRcdGhvdFVwZGF0ZSA9IHt9O1xyXG4gXHRcdFx0dmFyIGNodW5rSWQgPSAwO1xyXG4gXHRcdFx0eyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWxvbmUtYmxvY2tzXHJcbiBcdFx0XHRcdC8qZ2xvYmFscyBjaHVua0lkICovXHJcbiBcdFx0XHRcdGhvdEVuc3VyZVVwZGF0ZUNodW5rKGNodW5rSWQpO1xyXG4gXHRcdFx0fVxyXG4gXHRcdFx0aWYoaG90U3RhdHVzID09PSBcInByZXBhcmVcIiAmJiBob3RDaHVua3NMb2FkaW5nID09PSAwICYmIGhvdFdhaXRpbmdGaWxlcyA9PT0gMCkge1xyXG4gXHRcdFx0XHRob3RVcGRhdGVEb3dubG9hZGVkKCk7XHJcbiBcdFx0XHR9XHJcbiBcdFx0XHRyZXR1cm4gcHJvbWlzZTtcclxuIFx0XHR9KTtcclxuIFx0fVxyXG4gXHRcclxuIFx0ZnVuY3Rpb24gaG90QWRkVXBkYXRlQ2h1bmsoY2h1bmtJZCwgbW9yZU1vZHVsZXMpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xyXG4gXHRcdGlmKCFob3RBdmFpbGFibGVGaWxlc01hcFtjaHVua0lkXSB8fCAhaG90UmVxdWVzdGVkRmlsZXNNYXBbY2h1bmtJZF0pXHJcbiBcdFx0XHRyZXR1cm47XHJcbiBcdFx0aG90UmVxdWVzdGVkRmlsZXNNYXBbY2h1bmtJZF0gPSBmYWxzZTtcclxuIFx0XHRmb3IodmFyIG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XHJcbiBcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xyXG4gXHRcdFx0XHRob3RVcGRhdGVbbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xyXG4gXHRcdFx0fVxyXG4gXHRcdH1cclxuIFx0XHRpZigtLWhvdFdhaXRpbmdGaWxlcyA9PT0gMCAmJiBob3RDaHVua3NMb2FkaW5nID09PSAwKSB7XHJcbiBcdFx0XHRob3RVcGRhdGVEb3dubG9hZGVkKCk7XHJcbiBcdFx0fVxyXG4gXHR9XHJcbiBcdFxyXG4gXHRmdW5jdGlvbiBob3RFbnN1cmVVcGRhdGVDaHVuayhjaHVua0lkKSB7XHJcbiBcdFx0aWYoIWhvdEF2YWlsYWJsZUZpbGVzTWFwW2NodW5rSWRdKSB7XHJcbiBcdFx0XHRob3RXYWl0aW5nRmlsZXNNYXBbY2h1bmtJZF0gPSB0cnVlO1xyXG4gXHRcdH0gZWxzZSB7XHJcbiBcdFx0XHRob3RSZXF1ZXN0ZWRGaWxlc01hcFtjaHVua0lkXSA9IHRydWU7XHJcbiBcdFx0XHRob3RXYWl0aW5nRmlsZXMrKztcclxuIFx0XHRcdGhvdERvd25sb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCk7XHJcbiBcdFx0fVxyXG4gXHR9XHJcbiBcdFxyXG4gXHRmdW5jdGlvbiBob3RVcGRhdGVEb3dubG9hZGVkKCkge1xyXG4gXHRcdGhvdFNldFN0YXR1cyhcInJlYWR5XCIpO1xyXG4gXHRcdHZhciBkZWZlcnJlZCA9IGhvdERlZmVycmVkO1xyXG4gXHRcdGhvdERlZmVycmVkID0gbnVsbDtcclxuIFx0XHRpZighZGVmZXJyZWQpIHJldHVybjtcclxuIFx0XHRpZihob3RBcHBseU9uVXBkYXRlKSB7XHJcbiBcdFx0XHQvLyBXcmFwIGRlZmVycmVkIG9iamVjdCBpbiBQcm9taXNlIHRvIG1hcmsgaXQgYXMgYSB3ZWxsLWhhbmRsZWQgUHJvbWlzZSB0b1xyXG4gXHRcdFx0Ly8gYXZvaWQgdHJpZ2dlcmluZyB1bmNhdWdodCBleGNlcHRpb24gd2FybmluZyBpbiBDaHJvbWUuXHJcbiBcdFx0XHQvLyBTZWUgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDY1NjY2XHJcbiBcdFx0XHRQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uKCkge1xyXG4gXHRcdFx0XHRyZXR1cm4gaG90QXBwbHkoaG90QXBwbHlPblVwZGF0ZSk7XHJcbiBcdFx0XHR9KS50aGVuKFxyXG4gXHRcdFx0XHRmdW5jdGlvbihyZXN1bHQpIHtcclxuIFx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlKHJlc3VsdCk7XHJcbiBcdFx0XHRcdH0sXHJcbiBcdFx0XHRcdGZ1bmN0aW9uKGVycikge1xyXG4gXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdChlcnIpO1xyXG4gXHRcdFx0XHR9XHJcbiBcdFx0XHQpO1xyXG4gXHRcdH0gZWxzZSB7XHJcbiBcdFx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XHJcbiBcdFx0XHRmb3IodmFyIGlkIGluIGhvdFVwZGF0ZSkge1xyXG4gXHRcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaG90VXBkYXRlLCBpZCkpIHtcclxuIFx0XHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaCh0b01vZHVsZUlkKGlkKSk7XHJcbiBcdFx0XHRcdH1cclxuIFx0XHRcdH1cclxuIFx0XHRcdGRlZmVycmVkLnJlc29sdmUob3V0ZGF0ZWRNb2R1bGVzKTtcclxuIFx0XHR9XHJcbiBcdH1cclxuIFx0XHJcbiBcdGZ1bmN0aW9uIGhvdEFwcGx5KG9wdGlvbnMpIHtcclxuIFx0XHRpZihob3RTdGF0dXMgIT09IFwicmVhZHlcIikgdGhyb3cgbmV3IEVycm9yKFwiYXBwbHkoKSBpcyBvbmx5IGFsbG93ZWQgaW4gcmVhZHkgc3RhdHVzXCIpO1xyXG4gXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG4gXHRcclxuIFx0XHR2YXIgY2I7XHJcbiBcdFx0dmFyIGk7XHJcbiBcdFx0dmFyIGo7XHJcbiBcdFx0dmFyIG1vZHVsZTtcclxuIFx0XHR2YXIgbW9kdWxlSWQ7XHJcbiBcdFxyXG4gXHRcdGZ1bmN0aW9uIGdldEFmZmVjdGVkU3R1ZmYodXBkYXRlTW9kdWxlSWQpIHtcclxuIFx0XHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbdXBkYXRlTW9kdWxlSWRdO1xyXG4gXHRcdFx0dmFyIG91dGRhdGVkRGVwZW5kZW5jaWVzID0ge307XHJcbiBcdFxyXG4gXHRcdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLnNsaWNlKCkubWFwKGZ1bmN0aW9uKGlkKSB7XHJcbiBcdFx0XHRcdHJldHVybiB7XHJcbiBcdFx0XHRcdFx0Y2hhaW46IFtpZF0sXHJcbiBcdFx0XHRcdFx0aWQ6IGlkXHJcbiBcdFx0XHRcdH07XHJcbiBcdFx0XHR9KTtcclxuIFx0XHRcdHdoaWxlKHF1ZXVlLmxlbmd0aCA+IDApIHtcclxuIFx0XHRcdFx0dmFyIHF1ZXVlSXRlbSA9IHF1ZXVlLnBvcCgpO1xyXG4gXHRcdFx0XHR2YXIgbW9kdWxlSWQgPSBxdWV1ZUl0ZW0uaWQ7XHJcbiBcdFx0XHRcdHZhciBjaGFpbiA9IHF1ZXVlSXRlbS5jaGFpbjtcclxuIFx0XHRcdFx0bW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XHJcbiBcdFx0XHRcdGlmKCFtb2R1bGUgfHwgbW9kdWxlLmhvdC5fc2VsZkFjY2VwdGVkKVxyXG4gXHRcdFx0XHRcdGNvbnRpbnVlO1xyXG4gXHRcdFx0XHRpZihtb2R1bGUuaG90Ll9zZWxmRGVjbGluZWQpIHtcclxuIFx0XHRcdFx0XHRyZXR1cm4ge1xyXG4gXHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWRlY2xpbmVkXCIsXHJcbiBcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4sXHJcbiBcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcclxuIFx0XHRcdFx0XHR9O1xyXG4gXHRcdFx0XHR9XHJcbiBcdFx0XHRcdGlmKG1vZHVsZS5ob3QuX21haW4pIHtcclxuIFx0XHRcdFx0XHRyZXR1cm4ge1xyXG4gXHRcdFx0XHRcdFx0dHlwZTogXCJ1bmFjY2VwdGVkXCIsXHJcbiBcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4sXHJcbiBcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcclxuIFx0XHRcdFx0XHR9O1xyXG4gXHRcdFx0XHR9XHJcbiBcdFx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBtb2R1bGUucGFyZW50cy5sZW5ndGg7IGkrKykge1xyXG4gXHRcdFx0XHRcdHZhciBwYXJlbnRJZCA9IG1vZHVsZS5wYXJlbnRzW2ldO1xyXG4gXHRcdFx0XHRcdHZhciBwYXJlbnQgPSBpbnN0YWxsZWRNb2R1bGVzW3BhcmVudElkXTtcclxuIFx0XHRcdFx0XHRpZighcGFyZW50KSBjb250aW51ZTtcclxuIFx0XHRcdFx0XHRpZihwYXJlbnQuaG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pIHtcclxuIFx0XHRcdFx0XHRcdHJldHVybiB7XHJcbiBcdFx0XHRcdFx0XHRcdHR5cGU6IFwiZGVjbGluZWRcIixcclxuIFx0XHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLmNvbmNhdChbcGFyZW50SWRdKSxcclxuIFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxyXG4gXHRcdFx0XHRcdFx0XHRwYXJlbnRJZDogcGFyZW50SWRcclxuIFx0XHRcdFx0XHRcdH07XHJcbiBcdFx0XHRcdFx0fVxyXG4gXHRcdFx0XHRcdGlmKG91dGRhdGVkTW9kdWxlcy5pbmRleE9mKHBhcmVudElkKSA+PSAwKSBjb250aW51ZTtcclxuIFx0XHRcdFx0XHRpZihwYXJlbnQuaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pIHtcclxuIFx0XHRcdFx0XHRcdGlmKCFvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0pXHJcbiBcdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSA9IFtdO1xyXG4gXHRcdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdLCBbbW9kdWxlSWRdKTtcclxuIFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xyXG4gXHRcdFx0XHRcdH1cclxuIFx0XHRcdFx0XHRkZWxldGUgb3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdO1xyXG4gXHRcdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKHBhcmVudElkKTtcclxuIFx0XHRcdFx0XHRxdWV1ZS5wdXNoKHtcclxuIFx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbi5jb25jYXQoW3BhcmVudElkXSksXHJcbiBcdFx0XHRcdFx0XHRpZDogcGFyZW50SWRcclxuIFx0XHRcdFx0XHR9KTtcclxuIFx0XHRcdFx0fVxyXG4gXHRcdFx0fVxyXG4gXHRcclxuIFx0XHRcdHJldHVybiB7XHJcbiBcdFx0XHRcdHR5cGU6IFwiYWNjZXB0ZWRcIixcclxuIFx0XHRcdFx0bW9kdWxlSWQ6IHVwZGF0ZU1vZHVsZUlkLFxyXG4gXHRcdFx0XHRvdXRkYXRlZE1vZHVsZXM6IG91dGRhdGVkTW9kdWxlcyxcclxuIFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXM6IG91dGRhdGVkRGVwZW5kZW5jaWVzXHJcbiBcdFx0XHR9O1xyXG4gXHRcdH1cclxuIFx0XHJcbiBcdFx0ZnVuY3Rpb24gYWRkQWxsVG9TZXQoYSwgYikge1xyXG4gXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcclxuIFx0XHRcdFx0dmFyIGl0ZW0gPSBiW2ldO1xyXG4gXHRcdFx0XHRpZihhLmluZGV4T2YoaXRlbSkgPCAwKVxyXG4gXHRcdFx0XHRcdGEucHVzaChpdGVtKTtcclxuIFx0XHRcdH1cclxuIFx0XHR9XHJcbiBcdFxyXG4gXHRcdC8vIGF0IGJlZ2luIGFsbCB1cGRhdGVzIG1vZHVsZXMgYXJlIG91dGRhdGVkXHJcbiBcdFx0Ly8gdGhlIFwib3V0ZGF0ZWRcIiBzdGF0dXMgY2FuIHByb3BhZ2F0ZSB0byBwYXJlbnRzIGlmIHRoZXkgZG9uJ3QgYWNjZXB0IHRoZSBjaGlsZHJlblxyXG4gXHRcdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xyXG4gXHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbXTtcclxuIFx0XHR2YXIgYXBwbGllZFVwZGF0ZSA9IHt9O1xyXG4gXHRcclxuIFx0XHR2YXIgd2FyblVuZXhwZWN0ZWRSZXF1aXJlID0gZnVuY3Rpb24gd2FyblVuZXhwZWN0ZWRSZXF1aXJlKCkge1xyXG4gXHRcdFx0Y29uc29sZS53YXJuKFwiW0hNUl0gdW5leHBlY3RlZCByZXF1aXJlKFwiICsgcmVzdWx0Lm1vZHVsZUlkICsgXCIpIHRvIGRpc3Bvc2VkIG1vZHVsZVwiKTtcclxuIFx0XHR9O1xyXG4gXHRcclxuIFx0XHRmb3IodmFyIGlkIGluIGhvdFVwZGF0ZSkge1xyXG4gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGhvdFVwZGF0ZSwgaWQpKSB7XHJcbiBcdFx0XHRcdG1vZHVsZUlkID0gdG9Nb2R1bGVJZChpZCk7XHJcbiBcdFx0XHRcdHZhciByZXN1bHQ7XHJcbiBcdFx0XHRcdGlmKGhvdFVwZGF0ZVtpZF0pIHtcclxuIFx0XHRcdFx0XHRyZXN1bHQgPSBnZXRBZmZlY3RlZFN0dWZmKG1vZHVsZUlkKTtcclxuIFx0XHRcdFx0fSBlbHNlIHtcclxuIFx0XHRcdFx0XHRyZXN1bHQgPSB7XHJcbiBcdFx0XHRcdFx0XHR0eXBlOiBcImRpc3Bvc2VkXCIsXHJcbiBcdFx0XHRcdFx0XHRtb2R1bGVJZDogaWRcclxuIFx0XHRcdFx0XHR9O1xyXG4gXHRcdFx0XHR9XHJcbiBcdFx0XHRcdHZhciBhYm9ydEVycm9yID0gZmFsc2U7XHJcbiBcdFx0XHRcdHZhciBkb0FwcGx5ID0gZmFsc2U7XHJcbiBcdFx0XHRcdHZhciBkb0Rpc3Bvc2UgPSBmYWxzZTtcclxuIFx0XHRcdFx0dmFyIGNoYWluSW5mbyA9IFwiXCI7XHJcbiBcdFx0XHRcdGlmKHJlc3VsdC5jaGFpbikge1xyXG4gXHRcdFx0XHRcdGNoYWluSW5mbyA9IFwiXFxuVXBkYXRlIHByb3BhZ2F0aW9uOiBcIiArIHJlc3VsdC5jaGFpbi5qb2luKFwiIC0+IFwiKTtcclxuIFx0XHRcdFx0fVxyXG4gXHRcdFx0XHRzd2l0Y2gocmVzdWx0LnR5cGUpIHtcclxuIFx0XHRcdFx0XHRjYXNlIFwic2VsZi1kZWNsaW5lZFwiOlxyXG4gXHRcdFx0XHRcdFx0aWYob3B0aW9ucy5vbkRlY2xpbmVkKVxyXG4gXHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTtcclxuIFx0XHRcdFx0XHRcdGlmKCFvcHRpb25zLmlnbm9yZURlY2xpbmVkKVxyXG4gXHRcdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFwiQWJvcnRlZCBiZWNhdXNlIG9mIHNlbGYgZGVjbGluZTogXCIgKyByZXN1bHQubW9kdWxlSWQgKyBjaGFpbkluZm8pO1xyXG4gXHRcdFx0XHRcdFx0YnJlYWs7XHJcbiBcdFx0XHRcdFx0Y2FzZSBcImRlY2xpbmVkXCI6XHJcbiBcdFx0XHRcdFx0XHRpZihvcHRpb25zLm9uRGVjbGluZWQpXHJcbiBcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25EZWNsaW5lZChyZXN1bHQpO1xyXG4gXHRcdFx0XHRcdFx0aWYoIW9wdGlvbnMuaWdub3JlRGVjbGluZWQpXHJcbiBcdFx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXCJBYm9ydGVkIGJlY2F1c2Ugb2YgZGVjbGluZWQgZGVwZW5kZW5jeTogXCIgKyByZXN1bHQubW9kdWxlSWQgKyBcIiBpbiBcIiArIHJlc3VsdC5wYXJlbnRJZCArIGNoYWluSW5mbyk7XHJcbiBcdFx0XHRcdFx0XHRicmVhaztcclxuIFx0XHRcdFx0XHRjYXNlIFwidW5hY2NlcHRlZFwiOlxyXG4gXHRcdFx0XHRcdFx0aWYob3B0aW9ucy5vblVuYWNjZXB0ZWQpXHJcbiBcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25VbmFjY2VwdGVkKHJlc3VsdCk7XHJcbiBcdFx0XHRcdFx0XHRpZighb3B0aW9ucy5pZ25vcmVVbmFjY2VwdGVkKVxyXG4gXHRcdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFwiQWJvcnRlZCBiZWNhdXNlIFwiICsgbW9kdWxlSWQgKyBcIiBpcyBub3QgYWNjZXB0ZWRcIiArIGNoYWluSW5mbyk7XHJcbiBcdFx0XHRcdFx0XHRicmVhaztcclxuIFx0XHRcdFx0XHRjYXNlIFwiYWNjZXB0ZWRcIjpcclxuIFx0XHRcdFx0XHRcdGlmKG9wdGlvbnMub25BY2NlcHRlZClcclxuIFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkFjY2VwdGVkKHJlc3VsdCk7XHJcbiBcdFx0XHRcdFx0XHRkb0FwcGx5ID0gdHJ1ZTtcclxuIFx0XHRcdFx0XHRcdGJyZWFrO1xyXG4gXHRcdFx0XHRcdGNhc2UgXCJkaXNwb3NlZFwiOlxyXG4gXHRcdFx0XHRcdFx0aWYob3B0aW9ucy5vbkRpc3Bvc2VkKVxyXG4gXHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRGlzcG9zZWQocmVzdWx0KTtcclxuIFx0XHRcdFx0XHRcdGRvRGlzcG9zZSA9IHRydWU7XHJcbiBcdFx0XHRcdFx0XHRicmVhaztcclxuIFx0XHRcdFx0XHRkZWZhdWx0OlxyXG4gXHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiVW5leGNlcHRpb24gdHlwZSBcIiArIHJlc3VsdC50eXBlKTtcclxuIFx0XHRcdFx0fVxyXG4gXHRcdFx0XHRpZihhYm9ydEVycm9yKSB7XHJcbiBcdFx0XHRcdFx0aG90U2V0U3RhdHVzKFwiYWJvcnRcIik7XHJcbiBcdFx0XHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KGFib3J0RXJyb3IpO1xyXG4gXHRcdFx0XHR9XHJcbiBcdFx0XHRcdGlmKGRvQXBwbHkpIHtcclxuIFx0XHRcdFx0XHRhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSA9IGhvdFVwZGF0ZVttb2R1bGVJZF07XHJcbiBcdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWRNb2R1bGVzLCByZXN1bHQub3V0ZGF0ZWRNb2R1bGVzKTtcclxuIFx0XHRcdFx0XHRmb3IobW9kdWxlSWQgaW4gcmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XHJcbiBcdFx0XHRcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzLCBtb2R1bGVJZCkpIHtcclxuIFx0XHRcdFx0XHRcdFx0aWYoIW91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSlcclxuIFx0XHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0gPSBbXTtcclxuIFx0XHRcdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdLCByZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKTtcclxuIFx0XHRcdFx0XHRcdH1cclxuIFx0XHRcdFx0XHR9XHJcbiBcdFx0XHRcdH1cclxuIFx0XHRcdFx0aWYoZG9EaXNwb3NlKSB7XHJcbiBcdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWRNb2R1bGVzLCBbcmVzdWx0Lm1vZHVsZUlkXSk7XHJcbiBcdFx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSB3YXJuVW5leHBlY3RlZFJlcXVpcmU7XHJcbiBcdFx0XHRcdH1cclxuIFx0XHRcdH1cclxuIFx0XHR9XHJcbiBcdFxyXG4gXHRcdC8vIFN0b3JlIHNlbGYgYWNjZXB0ZWQgb3V0ZGF0ZWQgbW9kdWxlcyB0byByZXF1aXJlIHRoZW0gbGF0ZXIgYnkgdGhlIG1vZHVsZSBzeXN0ZW1cclxuIFx0XHR2YXIgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzID0gW107XHJcbiBcdFx0Zm9yKGkgPSAwOyBpIDwgb3V0ZGF0ZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XHJcbiBcdFx0XHRtb2R1bGVJZCA9IG91dGRhdGVkTW9kdWxlc1tpXTtcclxuIFx0XHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdICYmIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmhvdC5fc2VsZkFjY2VwdGVkKVxyXG4gXHRcdFx0XHRvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMucHVzaCh7XHJcbiBcdFx0XHRcdFx0bW9kdWxlOiBtb2R1bGVJZCxcclxuIFx0XHRcdFx0XHRlcnJvckhhbmRsZXI6IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmhvdC5fc2VsZkFjY2VwdGVkXHJcbiBcdFx0XHRcdH0pO1xyXG4gXHRcdH1cclxuIFx0XHJcbiBcdFx0Ly8gTm93IGluIFwiZGlzcG9zZVwiIHBoYXNlXHJcbiBcdFx0aG90U2V0U3RhdHVzKFwiZGlzcG9zZVwiKTtcclxuIFx0XHRPYmplY3Qua2V5cyhob3RBdmFpbGFibGVGaWxlc01hcCkuZm9yRWFjaChmdW5jdGlvbihjaHVua0lkKSB7XHJcbiBcdFx0XHRpZihob3RBdmFpbGFibGVGaWxlc01hcFtjaHVua0lkXSA9PT0gZmFsc2UpIHtcclxuIFx0XHRcdFx0aG90RGlzcG9zZUNodW5rKGNodW5rSWQpO1xyXG4gXHRcdFx0fVxyXG4gXHRcdH0pO1xyXG4gXHRcclxuIFx0XHR2YXIgaWR4O1xyXG4gXHRcdHZhciBxdWV1ZSA9IG91dGRhdGVkTW9kdWxlcy5zbGljZSgpO1xyXG4gXHRcdHdoaWxlKHF1ZXVlLmxlbmd0aCA+IDApIHtcclxuIFx0XHRcdG1vZHVsZUlkID0gcXVldWUucG9wKCk7XHJcbiBcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcclxuIFx0XHRcdGlmKCFtb2R1bGUpIGNvbnRpbnVlO1xyXG4gXHRcclxuIFx0XHRcdHZhciBkYXRhID0ge307XHJcbiBcdFxyXG4gXHRcdFx0Ly8gQ2FsbCBkaXNwb3NlIGhhbmRsZXJzXHJcbiBcdFx0XHR2YXIgZGlzcG9zZUhhbmRsZXJzID0gbW9kdWxlLmhvdC5fZGlzcG9zZUhhbmRsZXJzO1xyXG4gXHRcdFx0Zm9yKGogPSAwOyBqIDwgZGlzcG9zZUhhbmRsZXJzLmxlbmd0aDsgaisrKSB7XHJcbiBcdFx0XHRcdGNiID0gZGlzcG9zZUhhbmRsZXJzW2pdO1xyXG4gXHRcdFx0XHRjYihkYXRhKTtcclxuIFx0XHRcdH1cclxuIFx0XHRcdGhvdEN1cnJlbnRNb2R1bGVEYXRhW21vZHVsZUlkXSA9IGRhdGE7XHJcbiBcdFxyXG4gXHRcdFx0Ly8gZGlzYWJsZSBtb2R1bGUgKHRoaXMgZGlzYWJsZXMgcmVxdWlyZXMgZnJvbSB0aGlzIG1vZHVsZSlcclxuIFx0XHRcdG1vZHVsZS5ob3QuYWN0aXZlID0gZmFsc2U7XHJcbiBcdFxyXG4gXHRcdFx0Ly8gcmVtb3ZlIG1vZHVsZSBmcm9tIGNhY2hlXHJcbiBcdFx0XHRkZWxldGUgaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XHJcbiBcdFxyXG4gXHRcdFx0Ly8gd2hlbiBkaXNwb3NpbmcgdGhlcmUgaXMgbm8gbmVlZCB0byBjYWxsIGRpc3Bvc2UgaGFuZGxlclxyXG4gXHRcdFx0ZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcclxuIFx0XHJcbiBcdFx0XHQvLyByZW1vdmUgXCJwYXJlbnRzXCIgcmVmZXJlbmNlcyBmcm9tIGFsbCBjaGlsZHJlblxyXG4gXHRcdFx0Zm9yKGogPSAwOyBqIDwgbW9kdWxlLmNoaWxkcmVuLmxlbmd0aDsgaisrKSB7XHJcbiBcdFx0XHRcdHZhciBjaGlsZCA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlLmNoaWxkcmVuW2pdXTtcclxuIFx0XHRcdFx0aWYoIWNoaWxkKSBjb250aW51ZTtcclxuIFx0XHRcdFx0aWR4ID0gY2hpbGQucGFyZW50cy5pbmRleE9mKG1vZHVsZUlkKTtcclxuIFx0XHRcdFx0aWYoaWR4ID49IDApIHtcclxuIFx0XHRcdFx0XHRjaGlsZC5wYXJlbnRzLnNwbGljZShpZHgsIDEpO1xyXG4gXHRcdFx0XHR9XHJcbiBcdFx0XHR9XHJcbiBcdFx0fVxyXG4gXHRcclxuIFx0XHQvLyByZW1vdmUgb3V0ZGF0ZWQgZGVwZW5kZW5jeSBmcm9tIG1vZHVsZSBjaGlsZHJlblxyXG4gXHRcdHZhciBkZXBlbmRlbmN5O1xyXG4gXHRcdHZhciBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcztcclxuIFx0XHRmb3IobW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcclxuIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvdXRkYXRlZERlcGVuZGVuY2llcywgbW9kdWxlSWQpKSB7XHJcbiBcdFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xyXG4gXHRcdFx0XHRpZihtb2R1bGUpIHtcclxuIFx0XHRcdFx0XHRtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9IG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcclxuIFx0XHRcdFx0XHRmb3IoaiA9IDA7IGogPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGorKykge1xyXG4gXHRcdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2pdO1xyXG4gXHRcdFx0XHRcdFx0aWR4ID0gbW9kdWxlLmNoaWxkcmVuLmluZGV4T2YoZGVwZW5kZW5jeSk7XHJcbiBcdFx0XHRcdFx0XHRpZihpZHggPj0gMCkgbW9kdWxlLmNoaWxkcmVuLnNwbGljZShpZHgsIDEpO1xyXG4gXHRcdFx0XHRcdH1cclxuIFx0XHRcdFx0fVxyXG4gXHRcdFx0fVxyXG4gXHRcdH1cclxuIFx0XHJcbiBcdFx0Ly8gTm90IGluIFwiYXBwbHlcIiBwaGFzZVxyXG4gXHRcdGhvdFNldFN0YXR1cyhcImFwcGx5XCIpO1xyXG4gXHRcclxuIFx0XHRob3RDdXJyZW50SGFzaCA9IGhvdFVwZGF0ZU5ld0hhc2g7XHJcbiBcdFxyXG4gXHRcdC8vIGluc2VydCBuZXcgY29kZVxyXG4gXHRcdGZvcihtb2R1bGVJZCBpbiBhcHBsaWVkVXBkYXRlKSB7XHJcbiBcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYXBwbGllZFVwZGF0ZSwgbW9kdWxlSWQpKSB7XHJcbiBcdFx0XHRcdG1vZHVsZXNbbW9kdWxlSWRdID0gYXBwbGllZFVwZGF0ZVttb2R1bGVJZF07XHJcbiBcdFx0XHR9XHJcbiBcdFx0fVxyXG4gXHRcclxuIFx0XHQvLyBjYWxsIGFjY2VwdCBoYW5kbGVyc1xyXG4gXHRcdHZhciBlcnJvciA9IG51bGw7XHJcbiBcdFx0Zm9yKG1vZHVsZUlkIGluIG91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XHJcbiBcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG1vZHVsZUlkKSkge1xyXG4gXHRcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcclxuIFx0XHRcdFx0aWYobW9kdWxlKSB7XHJcbiBcdFx0XHRcdFx0bW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XHJcbiBcdFx0XHRcdFx0dmFyIGNhbGxiYWNrcyA9IFtdO1xyXG4gXHRcdFx0XHRcdGZvcihpID0gMDsgaSA8IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzLmxlbmd0aDsgaSsrKSB7XHJcbiBcdFx0XHRcdFx0XHRkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbaV07XHJcbiBcdFx0XHRcdFx0XHRjYiA9IG1vZHVsZS5ob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcGVuZGVuY3ldO1xyXG4gXHRcdFx0XHRcdFx0aWYoY2IpIHtcclxuIFx0XHRcdFx0XHRcdFx0aWYoY2FsbGJhY2tzLmluZGV4T2YoY2IpID49IDApIGNvbnRpbnVlO1xyXG4gXHRcdFx0XHRcdFx0XHRjYWxsYmFja3MucHVzaChjYik7XHJcbiBcdFx0XHRcdFx0XHR9XHJcbiBcdFx0XHRcdFx0fVxyXG4gXHRcdFx0XHRcdGZvcihpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xyXG4gXHRcdFx0XHRcdFx0Y2IgPSBjYWxsYmFja3NbaV07XHJcbiBcdFx0XHRcdFx0XHR0cnkge1xyXG4gXHRcdFx0XHRcdFx0XHRjYihtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyk7XHJcbiBcdFx0XHRcdFx0XHR9IGNhdGNoKGVycikge1xyXG4gXHRcdFx0XHRcdFx0XHRpZihvcHRpb25zLm9uRXJyb3JlZCkge1xyXG4gXHRcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcclxuIFx0XHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwiYWNjZXB0LWVycm9yZWRcIixcclxuIFx0XHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcclxuIFx0XHRcdFx0XHRcdFx0XHRcdGRlcGVuZGVuY3lJZDogbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbaV0sXHJcbiBcdFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyXHJcbiBcdFx0XHRcdFx0XHRcdFx0fSk7XHJcbiBcdFx0XHRcdFx0XHRcdH1cclxuIFx0XHRcdFx0XHRcdFx0aWYoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xyXG4gXHRcdFx0XHRcdFx0XHRcdGlmKCFlcnJvcilcclxuIFx0XHRcdFx0XHRcdFx0XHRcdGVycm9yID0gZXJyO1xyXG4gXHRcdFx0XHRcdFx0XHR9XHJcbiBcdFx0XHRcdFx0XHR9XHJcbiBcdFx0XHRcdFx0fVxyXG4gXHRcdFx0XHR9XHJcbiBcdFx0XHR9XHJcbiBcdFx0fVxyXG4gXHRcclxuIFx0XHQvLyBMb2FkIHNlbGYgYWNjZXB0ZWQgbW9kdWxlc1xyXG4gXHRcdGZvcihpID0gMDsgaSA8IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5sZW5ndGg7IGkrKykge1xyXG4gXHRcdFx0dmFyIGl0ZW0gPSBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXNbaV07XHJcbiBcdFx0XHRtb2R1bGVJZCA9IGl0ZW0ubW9kdWxlO1xyXG4gXHRcdFx0aG90Q3VycmVudFBhcmVudHMgPSBbbW9kdWxlSWRdO1xyXG4gXHRcdFx0dHJ5IHtcclxuIFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCk7XHJcbiBcdFx0XHR9IGNhdGNoKGVycikge1xyXG4gXHRcdFx0XHRpZih0eXBlb2YgaXRlbS5lcnJvckhhbmRsZXIgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gXHRcdFx0XHRcdHRyeSB7XHJcbiBcdFx0XHRcdFx0XHRpdGVtLmVycm9ySGFuZGxlcihlcnIpO1xyXG4gXHRcdFx0XHRcdH0gY2F0Y2goZXJyMikge1xyXG4gXHRcdFx0XHRcdFx0aWYob3B0aW9ucy5vbkVycm9yZWQpIHtcclxuIFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xyXG4gXHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1hY2NlcHQtZXJyb3ItaGFuZGxlci1lcnJvcmVkXCIsXHJcbiBcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxyXG4gXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnIyLFxyXG4gXHRcdFx0XHRcdFx0XHRcdG9yZ2luYWxFcnJvcjogZXJyLCAvLyBUT0RPIHJlbW92ZSBpbiB3ZWJwYWNrIDRcclxuIFx0XHRcdFx0XHRcdFx0XHRvcmlnaW5hbEVycm9yOiBlcnJcclxuIFx0XHRcdFx0XHRcdFx0fSk7XHJcbiBcdFx0XHRcdFx0XHR9XHJcbiBcdFx0XHRcdFx0XHRpZighb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XHJcbiBcdFx0XHRcdFx0XHRcdGlmKCFlcnJvcilcclxuIFx0XHRcdFx0XHRcdFx0XHRlcnJvciA9IGVycjI7XHJcbiBcdFx0XHRcdFx0XHR9XHJcbiBcdFx0XHRcdFx0XHRpZighZXJyb3IpXHJcbiBcdFx0XHRcdFx0XHRcdGVycm9yID0gZXJyO1xyXG4gXHRcdFx0XHRcdH1cclxuIFx0XHRcdFx0fSBlbHNlIHtcclxuIFx0XHRcdFx0XHRpZihvcHRpb25zLm9uRXJyb3JlZCkge1xyXG4gXHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xyXG4gXHRcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtYWNjZXB0LWVycm9yZWRcIixcclxuIFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxyXG4gXHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyXHJcbiBcdFx0XHRcdFx0XHR9KTtcclxuIFx0XHRcdFx0XHR9XHJcbiBcdFx0XHRcdFx0aWYoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xyXG4gXHRcdFx0XHRcdFx0aWYoIWVycm9yKVxyXG4gXHRcdFx0XHRcdFx0XHRlcnJvciA9IGVycjtcclxuIFx0XHRcdFx0XHR9XHJcbiBcdFx0XHRcdH1cclxuIFx0XHRcdH1cclxuIFx0XHR9XHJcbiBcdFxyXG4gXHRcdC8vIGhhbmRsZSBlcnJvcnMgaW4gYWNjZXB0IGhhbmRsZXJzIGFuZCBzZWxmIGFjY2VwdGVkIG1vZHVsZSBsb2FkXHJcbiBcdFx0aWYoZXJyb3IpIHtcclxuIFx0XHRcdGhvdFNldFN0YXR1cyhcImZhaWxcIik7XHJcbiBcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xyXG4gXHRcdH1cclxuIFx0XHJcbiBcdFx0aG90U2V0U3RhdHVzKFwiaWRsZVwiKTtcclxuIFx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xyXG4gXHRcdFx0cmVzb2x2ZShvdXRkYXRlZE1vZHVsZXMpO1xyXG4gXHRcdH0pO1xyXG4gXHR9XHJcblxuIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge30sXG4gXHRcdFx0aG90OiBob3RDcmVhdGVNb2R1bGUobW9kdWxlSWQpLFxuIFx0XHRcdHBhcmVudHM6IChob3RDdXJyZW50UGFyZW50c1RlbXAgPSBob3RDdXJyZW50UGFyZW50cywgaG90Q3VycmVudFBhcmVudHMgPSBbXSwgaG90Q3VycmVudFBhcmVudHNUZW1wKSxcbiBcdFx0XHRjaGlsZHJlbjogW11cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgaG90Q3JlYXRlUmVxdWlyZShtb2R1bGVJZCkpO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBfX3dlYnBhY2tfaGFzaF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmggPSBmdW5jdGlvbigpIHsgcmV0dXJuIGhvdEN1cnJlbnRIYXNoOyB9O1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBob3RDcmVhdGVSZXF1aXJlKDcpKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDcpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIDk0YmY0OTk1MmU5ZWRmMjRhNDI5IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgaXNCdWZmZXIgPSByZXF1aXJlKCdpcy1idWZmZXInKTtcblxuLypnbG9iYWwgdG9TdHJpbmc6dHJ1ZSovXG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXkodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGb3JtRGF0YSh2YWwpIHtcbiAgcmV0dXJuICh0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnKSAmJiAodmFsIGluc3RhbmNlb2YgRm9ybURhdGEpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmICh2YWwuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcic7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBEYXRlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNEYXRlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGaWxlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGaWxlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCbG9iXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCbG9iKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBCbG9iXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRnVuY3Rpb24sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJlYW0sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmVhbSh2YWwpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwucGlwZSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVUkxTZWFyY2hQYXJhbXModmFsKSB7XG4gIHJldHVybiB0eXBlb2YgVVJMU2VhcmNoUGFyYW1zICE9PSAndW5kZWZpbmVkJyAmJiB2YWwgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXM7XG59XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL1xuZnVuY3Rpb24gdHJpbShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzKi8sICcnKS5yZXBsYWNlKC9cXHMqJC8sICcnKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKi9cbmZ1bmN0aW9uIGlzU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcbiAgKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodHlwZW9mIHJlc3VsdFtrZXldID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGEsIGIsIHRoaXNBcmcpIHtcbiAgZm9yRWFjaChiLCBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0aGlzQXJnICYmIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcjogaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhOiBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldzogaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzVW5kZWZpbmVkOiBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlOiBpc0RhdGUsXG4gIGlzRmlsZTogaXNGaWxlLFxuICBpc0Jsb2I6IGlzQmxvYixcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgaXNTdHJlYW06IGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtczogaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52OiBpc1N0YW5kYXJkQnJvd3NlckVudixcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgbWVyZ2U6IG1lcmdlLFxuICBleHRlbmQ6IGV4dGVuZCxcbiAgdHJpbTogdHJpbVxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi91dGlscy5qc1xuLy8gbW9kdWxlIGlkID0gMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBub3JtYWxpemVIZWFkZXJOYW1lID0gcmVxdWlyZSgnLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUnKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy94aHInKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMvaHR0cCcpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7IC8qIElnbm9yZSAqLyB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9XG59O1xuXG5kZWZhdWx0cy5oZWFkZXJzID0ge1xuICBjb21tb246IHtcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy5qc1xuLy8gbW9kdWxlIGlkID0gMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzXG4vLyBtb2R1bGUgaWQgPSAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIHBhcnNlSGVhZGVycyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9wYXJzZUhlYWRlcnMnKTtcbnZhciBpc1VSTFNhbWVPcmlnaW4gPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luJyk7XG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL2NyZWF0ZUVycm9yJyk7XG52YXIgYnRvYSA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuYnRvYSAmJiB3aW5kb3cuYnRvYS5iaW5kKHdpbmRvdykpIHx8IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idG9hJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geGhyQWRhcHRlcihjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICB2YXIgcmVxdWVzdEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKHJlcXVlc3REYXRhKSkge1xuICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgdmFyIGxvYWRFdmVudCA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnO1xuICAgIHZhciB4RG9tYWluID0gZmFsc2U7XG5cbiAgICAvLyBGb3IgSUUgOC85IENPUlMgc3VwcG9ydFxuICAgIC8vIE9ubHkgc3VwcG9ydHMgUE9TVCBhbmQgR0VUIGNhbGxzIGFuZCBkb2Vzbid0IHJldHVybnMgdGhlIHJlc3BvbnNlIGhlYWRlcnMuXG4gICAgLy8gRE9OJ1QgZG8gdGhpcyBmb3IgdGVzdGluZyBiL2MgWE1MSHR0cFJlcXVlc3QgaXMgbW9ja2VkLCBub3QgWERvbWFpblJlcXVlc3QuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcgJiZcbiAgICAgICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgd2luZG93LlhEb21haW5SZXF1ZXN0ICYmICEoJ3dpdGhDcmVkZW50aWFscycgaW4gcmVxdWVzdCkgJiZcbiAgICAgICAgIWlzVVJMU2FtZU9yaWdpbihjb25maWcudXJsKSkge1xuICAgICAgcmVxdWVzdCA9IG5ldyB3aW5kb3cuWERvbWFpblJlcXVlc3QoKTtcbiAgICAgIGxvYWRFdmVudCA9ICdvbmxvYWQnO1xuICAgICAgeERvbWFpbiA9IHRydWU7XG4gICAgICByZXF1ZXN0Lm9ucHJvZ3Jlc3MgPSBmdW5jdGlvbiBoYW5kbGVQcm9ncmVzcygpIHt9O1xuICAgICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge307XG4gICAgfVxuXG4gICAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgdmFyIHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICB2YXIgcGFzc3dvcmQgPSBjb25maWcuYXV0aC5wYXNzd29yZCB8fCAnJztcbiAgICAgIHJlcXVlc3RIZWFkZXJzLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArIGJ0b2EodXNlcm5hbWUgKyAnOicgKyBwYXNzd29yZCk7XG4gICAgfVxuXG4gICAgcmVxdWVzdC5vcGVuKGNvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSwgYnVpbGRVUkwoY29uZmlnLnVybCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQ7XG5cbiAgICAvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlXG4gICAgcmVxdWVzdFtsb2FkRXZlbnRdID0gZnVuY3Rpb24gaGFuZGxlTG9hZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCB8fCAocmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0ICYmICF4RG9tYWluKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSByZXF1ZXN0IGVycm9yZWQgb3V0IGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmVzcG9uc2UsIHRoaXMgd2lsbCBiZVxuICAgICAgLy8gaGFuZGxlZCBieSBvbmVycm9yIGluc3RlYWRcbiAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAvLyB3aWxsIHJldHVybiBzdGF0dXMgYXMgMCBldmVuIHRob3VnaCBpdCdzIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDAgJiYgIShyZXF1ZXN0LnJlc3BvbnNlVVJMICYmIHJlcXVlc3QucmVzcG9uc2VVUkwuaW5kZXhPZignZmlsZTonKSA9PT0gMCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgdmFyIHJlc3BvbnNlSGVhZGVycyA9ICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgPyBwYXJzZUhlYWRlcnMocmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkgOiBudWxsO1xuICAgICAgdmFyIHJlc3BvbnNlRGF0YSA9ICFjb25maWcucmVzcG9uc2VUeXBlIHx8IGNvbmZpZy5yZXNwb25zZVR5cGUgPT09ICd0ZXh0JyA/IHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIHZhciByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICAvLyBJRSBzZW5kcyAxMjIzIGluc3RlYWQgb2YgMjA0IChodHRwczovL2dpdGh1Yi5jb20vYXhpb3MvYXhpb3MvaXNzdWVzLzIwMSlcbiAgICAgICAgc3RhdHVzOiByZXF1ZXN0LnN0YXR1cyA9PT0gMTIyMyA/IDIwNCA6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1cyA9PT0gMTIyMyA/ICdObyBDb250ZW50JyA6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignTmV0d29yayBFcnJvcicsIGNvbmZpZywgbnVsbCwgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ3RpbWVvdXQgb2YgJyArIGNvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJywgY29uZmlnLCAnRUNPTk5BQk9SVEVEJyxcbiAgICAgICAgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gICAgLy8gU3BlY2lmaWNhbGx5IG5vdCBpZiB3ZSdyZSBpbiBhIHdlYiB3b3JrZXIsIG9yIHJlYWN0LW5hdGl2ZS5cbiAgICBpZiAodXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSkge1xuICAgICAgdmFyIGNvb2tpZXMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29va2llcycpO1xuXG4gICAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAgIHZhciB4c3JmVmFsdWUgPSAoY29uZmlnLndpdGhDcmVkZW50aWFscyB8fCBpc1VSTFNhbWVPcmlnaW4oY29uZmlnLnVybCkpICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSA/XG4gICAgICAgICAgY29va2llcy5yZWFkKGNvbmZpZy54c3JmQ29va2llTmFtZSkgOlxuICAgICAgICAgIHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHhzcmZWYWx1ZSkge1xuICAgICAgICByZXF1ZXN0SGVhZGVyc1tjb25maWcueHNyZkhlYWRlck5hbWVdID0geHNyZlZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFkZCBoZWFkZXJzIHRvIHRoZSByZXF1ZXN0XG4gICAgaWYgKCdzZXRSZXF1ZXN0SGVhZGVyJyBpbiByZXF1ZXN0KSB7XG4gICAgICB1dGlscy5mb3JFYWNoKHJlcXVlc3RIZWFkZXJzLCBmdW5jdGlvbiBzZXRSZXF1ZXN0SGVhZGVyKHZhbCwga2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVxdWVzdERhdGEgPT09ICd1bmRlZmluZWQnICYmIGtleS50b0xvd2VyQ2FzZSgpID09PSAnY29udGVudC10eXBlJykge1xuICAgICAgICAgIC8vIFJlbW92ZSBDb250ZW50LVR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgICAgICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPdGhlcndpc2UgYWRkIGhlYWRlciB0byB0aGUgcmVxdWVzdFxuICAgICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRoQ3JlZGVudGlhbHMgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoY29uZmlnLndpdGhDcmVkZW50aWFscykge1xuICAgICAgcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xuICAgIH1cblxuICAgIC8vIEFkZCByZXNwb25zZVR5cGUgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBjb25maWcucmVzcG9uc2VUeXBlO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBFeHBlY3RlZCBET01FeGNlcHRpb24gdGhyb3duIGJ5IGJyb3dzZXJzIG5vdCBjb21wYXRpYmxlIFhNTEh0dHBSZXF1ZXN0IExldmVsIDIuXG4gICAgICAgIC8vIEJ1dCwgdGhpcyBjYW4gYmUgc3VwcHJlc3NlZCBmb3IgJ2pzb24nIHR5cGUgYXMgaXQgY2FuIGJlIHBhcnNlZCBieSBkZWZhdWx0ICd0cmFuc2Zvcm1SZXNwb25zZScgZnVuY3Rpb24uXG4gICAgICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25VcGxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnByb21pc2UudGhlbihmdW5jdGlvbiBvbkNhbmNlbGVkKGNhbmNlbCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgIHJlamVjdChjYW5jZWwpO1xuICAgICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHJlcXVlc3REYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlcXVlc3REYXRhID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBTZW5kIHRoZSByZXF1ZXN0XG4gICAgcmVxdWVzdC5zZW5kKHJlcXVlc3REYXRhKTtcbiAgfSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL3hoci5qc1xuLy8gbW9kdWxlIGlkID0gM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuL2VuaGFuY2VFcnJvcicpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFcnJvcihtZXNzYWdlLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanNcbi8vIG1vZHVsZSBpZCA9IDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzXG4vLyBtb2R1bGUgaWQgPSA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIGBDYW5jZWxgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsKG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cblxuQ2FuY2VsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ0NhbmNlbCcgKyAodGhpcy5tZXNzYWdlID8gJzogJyArIHRoaXMubWVzc2FnZSA6ICcnKTtcbn07XG5cbkNhbmNlbC5wcm90b3R5cGUuX19DQU5DRUxfXyA9IHRydWU7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanNcbi8vIG1vZHVsZSBpZCA9IDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IGF4aW9zLCB7IEF4aW9zUmVzcG9uc2UsIEF4aW9zRXJyb3IgfSAgZnJvbSAnYXhpb3MnO1xuXG5pbnRlcmZhY2UgSUNvaW4ge1xuICBuYW1lOiBzdHJpbmc7XG59XG5pbnRlcmZhY2UgSUV4Y2hhbmdlIHtcbiAgbmFtZTogc3RyaW5nO1xuICBjdXJyZW5jeTogSUN1cnJlbmN5O1xuICB1cmw6IHN0cmluZztcbiAgZGlzcGxheU5hbWU6IHN0cmluZztcbn1cbmludGVyZmFjZSBJQ3VycmVuY3kge1xuICBuYW1lOiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBJQ29pblByaWNlIHtcbiAgZXhjaGFuZ2U6IElFeGNoYW5nZTtcbiAgY29pbjogSUNvaW47XG4gIHByaWNlOiBudW1iZXI7XG4gIHRpbWU6IG51bWJlcjtcbiAgY3VycmVuY3k6IElDdXJyZW5jeTtcbn1cblxuaW50ZXJmYWNlIElSZXNwb25zZSB7XG4gIGV4Y2hhbmdlOiBzdHJpbmc7XG4gIGNvaW46IHN0cmluZztcbiAgcHJpY2U6IG51bWJlcjtcbiAgdGltZTogbnVtYmVyO1xuICBjdXJyZW5jeTogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgSUN1cnJlbmN5UmVzcG9uc2Uge1xuICBzb3VyY2U6IHN0cmluZztcbiAgdGFyZ2V0OiBzdHJpbmc7XG4gIHJhdGU6IG51bWJlcjtcbn1cblxuLy8gLy8gY3VycmVuY3lcbmNvbnN0IEtSVzogSUN1cnJlbmN5ID0geyBuYW1lOiBcImtyd1wiIH1cbmNvbnN0IFVTRDogSUN1cnJlbmN5ID0geyBuYW1lOiBcInVzZFwiIH1cbmNvbnN0IEpQWTogSUN1cnJlbmN5ID0geyBuYW1lOiBcImpweVwiIH1cbmNvbnN0IENVUlJFTkNJRVMgPSBbS1JXLCBVU0QsIEpQWV1cbi8vZXhjaGFuZ2VcbmNvbnN0IEJJVEZJTkVYOiBJRXhjaGFuZ2UgPSB7IG5hbWU6IFwiYml0ZmluZXhcIiwgY3VycmVuY3k6IFVTRCwgdXJsOiAnaHR0cHM6Ly93d3cuYml0ZmluZXguY29tJywgZGlzcGxheU5hbWU6ICdCSVRGSU5FWCcgfVxuY29uc3QgQklUSFVNQjogSUV4Y2hhbmdlID0geyBuYW1lOiBcImJpdGh1bWJcIiwgY3VycmVuY3k6IEtSVywgdXJsOiAnaHR0cHM6Ly93d3cuYml0aHVtYi5jb20nLCBkaXNwbGF5TmFtZTogJ+u5l+yNuCcgfVxuY29uc3QgQ09JTk9ORTogSUV4Y2hhbmdlID0geyBuYW1lOiBcImNvaW5vbmVcIiwgY3VycmVuY3k6IEtSVywgdXJsOiAnaHR0cHM6Ly93d3cuY29pbm9uZS5jby5rcicsIGRpc3BsYXlOYW1lOiAn7L2U7J247JuQJyB9XG5jb25zdCBVUEJJVDogSUV4Y2hhbmdlID0geyBuYW1lOiBcInVwYml0XCIsIGN1cnJlbmN5OiBLUlcsIHVybDogJ2h0dHBzOi8vdXBiaXQuY29tJywgZGlzcGxheU5hbWU6ICfsl4XruYTtirgnIH1cbmNvbnN0IEJJTkFOQ0U6IElFeGNoYW5nZSA9IHsgbmFtZTogXCJiaW5hbmNlXCIsIGN1cnJlbmN5OiBVU0QsIHVybDogJ2h0dHBzOi8vd3d3LmJpbmFuY2UuY29tJywgZGlzcGxheU5hbWU6ICdCSU5BTkNFJyB9XG5jb25zdCBFWENIQU5HRVMgPSBbQklURklORVgsIEJJTkFOQ0UsIEJJVEhVTUIsIENPSU5PTkUsIFVQQklUXVxuLy9jb2luXG5jb25zdCBCVEM6IElDb2luID0geyBuYW1lOiBcImJ0Y1wiIH1cbmNvbnN0IEVUSDogSUNvaW4gPSB7IG5hbWU6IFwiZXRoXCIgfVxuY29uc3QgWFJQOiBJQ29pbiA9IHsgbmFtZTogXCJ4cnBcIiB9XG5jb25zdCBMVEM6IElDb2luID0geyBuYW1lOiBcImx0Y1wiIH1cbmNvbnN0IFFUVU06IElDb2luID0geyBuYW1lOiBcInF0dW1cIiB9XG5jb25zdCBEQVNIOiBJQ29pbiA9IHsgbmFtZTogXCJkYXNoXCIgfVxuY29uc3QgRVRDOiBJQ29pbiA9IHsgbmFtZTogXCJldGNcIiB9XG5jb25zdCBCQ0g6IElDb2luID0geyBuYW1lOiBcImJjaFwiIH1cbmNvbnN0IFhNUjogSUNvaW4gPSB7IG5hbWU6IFwieG1yXCIgfVxuY29uc3QgWkVDOiBJQ29pbiA9IHsgbmFtZTogXCJ6ZWNcIiB9XG5jb25zdCBCVEc6IElDb2luID0geyBuYW1lOiBcImJ0Z1wiIH1cbmNvbnN0IEVPUzogSUNvaW4gPSB7IG5hbWU6IFwiZW9zXCIgfVxuY29uc3QgSU9UQTogSUNvaW4gPSB7IG5hbWU6IFwiaW90YVwiIH1cbmNvbnN0IFNOVDogSUNvaW4gPSB7IG5hbWU6IFwic250XCIgfVxuY29uc3QgTkVPOiBJQ29pbiA9IHsgbmFtZTogXCJuZW9cIiB9XG5jb25zdCBBREE6IElDb2luID0geyBuYW1lOiBcImFkYVwiIH1cbmNvbnN0IFhMTTogSUNvaW4gPSB7IG5hbWU6IFwieGxtXCIgfVxuY29uc3QgWEVNOiBJQ29pbiA9IHsgbmFtZTogJ3hlbScgfVxuY29uc3QgU1RFRU06IElDb2luID0geyBuYW1lOiAnc3RlZW0nIH1cbmNvbnN0IE1FUjogSUNvaW4gPSB7IG5hbWU6ICdtZXInIH1cbmNvbnN0IFNUUkFUOiBJQ29pbiA9IHsgbmFtZTogJ3N0cmF0JyB9XG5jb25zdCBTQkQ6IElDb2luID0geyBuYW1lOiAnc2JkJyB9XG5jb25zdCBPTUc6IElDb2luID0geyBuYW1lOiAnb21nJyB9XG5jb25zdCBMU0s6IElDb2luID0geyBuYW1lOiAnbHNrJyB9XG5jb25zdCBUSVg6IElDb2luID0geyBuYW1lOiAndGl4JyB9XG5jb25zdCBFTUMyOiBJQ29pbiA9IHsgbmFtZTogJ2VtYzInIH1cbmNvbnN0IEFSRFI6IElDb2luID0geyBuYW1lOiAnYXJkcicgfVxuY29uc3QgUElWWDogSUNvaW4gPSB7IG5hbWU6ICdwaXZ4JyB9XG5jb25zdCBQT1dSOiBJQ29pbiA9IHsgbmFtZTogJ3Bvd3InIH1cbmNvbnN0IE1UTDogSUNvaW4gPSB7IG5hbWU6ICdtdGwnIH1cbmNvbnN0IEdSUzogSUNvaW4gPSB7IG5hbWU6ICdncnMnIH1cbmNvbnN0IFNUT1JKOiBJQ29pbiA9IHsgbmFtZTogJ3N0b3JqJyB9XG5jb25zdCBBUks6IElDb2luID0geyBuYW1lOiAnYXJrJyB9XG5jb25zdCBSRVA6IElDb2luID0geyBuYW1lOiAncmVwJyB9XG5jb25zdCBLTUQ6IElDb2luID0geyBuYW1lOiAna21kJyB9XG5jb25zdCBXQVZFUzogSUNvaW4gPSB7IG5hbWU6ICd3YXZlcycgfVxuY29uc3QgVlRDOiBJQ29pbiA9IHsgbmFtZTogJ3Z0YycgfVxuY29uc3QgVkVOOiBJQ29pbiA9IHsgbmFtZTogJ3ZlbicgfVxuY29uc3QgSUNYOiBJQ29pbiA9IHsgbmFtZTogJ2ljeCcgfVxuY29uc3QgRUxGOiBJQ29pbiA9IHsgbmFtZTogJ2VsZicgfVxuY29uc3QgTUlUSDogSUNvaW4gPSB7IG5hbWU6ICdtaXRoJyB9XG5jb25zdCBLTkM6IElDb2luID0geyBuYW1lOiAna25jJyB9XG5jb25zdCBNQ086IElDb2luID0geyBuYW1lOiAnbWNvJyB9XG5jb25zdCBUUlg6IElDb2luID0geyBuYW1lOiAndHJ4JyB9XG5jb25zdCBDT0lOUyA9IFtCVEMsRVRILEVPUyxYUlAsTFRDLFFUVU0sRVRDLEJDSCxCVEcsT01HLFRSWCxEQVNILFhNUixaRUMsRUxGLE1JVEgsSU9UQSxTTlQsTkVPLFJFUCxYTE0sU1RPUkosSUNYLE1DTyxWRU4sS05DLEFEQSxYRU0sU1RFRU0sTUVSLFNUUkFULFNCRCxMU0ssVElYLEVNQzIsQVJEUixQSVZYLFBPV1IsTVRMLEdSUyxBUkssS01ELFdBVkVTLFZUQ107XG5jb25zdCBCSVRIVU1CX0NPSU5TID0gW0lDWCxNQ08sVkVOLEtOQ107XG5jb25zdCBVUEJJVF9DT0lOUyA9IFtBREEsWExNLFhFTSxTVEVFTSxNRVIsU1RSQVQsU0JELExTSyxUSVgsRU1DMixBUkRSLFBJVlgsUE9XUixNVEwsR1JTLFNUT1JKLEFSSyxLTUQsV0FWRVMsVlRDXTtcblxuZnVuY3Rpb24gZm9yRWFjaChsaXN0OiBhbnksIGNhbGxiYWNrOiAoaXRlbTogYW55KSA9PiB2b2lkKSB7XG4gIGlmIChsaXN0LmZvckVhY2gpIHtcbiAgICBsaXN0LmZvckVhY2goY2FsbGJhY2spO1xuICB9IGVsc2UgaWYgKEFycmF5ICYmIEFycmF5LmZyb20pIHtcbiAgICBBcnJheS5mcm9tKGxpc3QpLmZvckVhY2goY2FsbGJhY2spO1xuICB9IGVsc2Uge1xuICAgIGxldCBhcnJheSA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwIDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFycmF5LnB1c2gobGlzdFtpXSk7XG4gICAgfVxuICAgIGlmIChhcnJheS5mb3JFYWNoKSB7XG4gICAgICBhcnJheS5mb3JFYWNoKGNhbGxiYWNrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgaSA9IDAgOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2FsbGJhY2soYXJyYXlbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5kKGxpc3Q6IGFueSwgY2FsbGJhY2s6IChpdGVtOiBhbnkpID0+IGJvb2xlYW4pIHtcbiAgaWYgKGxpc3QuZmluZCkge1xuICAgIHJldHVybiBsaXN0LmZpbmQoY2FsbGJhY2spO1xuICB9IGVsc2UgaWYgKGxpc3QuZmlsdGVyKSB7XG4gICAgcmV0dXJuIGxpc3QuZmlsdGVyKGNhbGxiYWNrKVswXVxuICB9IGVsc2Uge1xuICAgIGxldCBhcnJheSA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwIDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFycmF5LnB1c2gobGlzdFtpXSk7XG4gICAgfVxuICAgIGlmIChhcnJheS5maW5kKSB7XG4gICAgICByZXR1cm4gYXJyYXkuZmluZChjYWxsYmFjayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAobGV0IGkgPSAwIDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChjYWxsYmFjayhhcnJheVtpXSkpIHtcbiAgICAgICAgICByZXR1cm4gYXJyYXlbaV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVhZHkoZm46IChFdmVudExpc3RlbmVyT3JFdmVudExpc3RlbmVyT2JqZWN0PzogYW55LCB1c2VDYXB0dXJlPzogYm9vbGVhbikgPT4gdm9pZCkge1xuICBpZiAoKGRvY3VtZW50IGFzIGFueSkuYXR0YWNoRXZlbnQgPyBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgOiBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIikge1xuICAgIGZuKCk7XG4gIH0gZWxzZSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgZm4pO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1haW4oKSB7XG4gIGxldCByYXRlOiBzdHJpbmcgPSAndHJhbnNsYXRlJztcbiAgbGV0IHRpbWU6IG51bWJlciA9IDEwO1xuICBsZXQgcHJpY2VEYXRhOiBJQ29pblByaWNlW10gPSBbXTtcbiAgbGV0IHJlZnJlc2hUaW1lOiBudW1iZXIgPSA2MDtcbiAgbGV0IGxvYWRlZCA9IGZhbHNlO1xuICBsZXQgY3VycmVuY3lSYXRlOiBudW1iZXIgPSAwO1xuXG4gIGZ1bmN0aW9uIHNldFJhdGUobmV3UmF0ZTogc3RyaW5nKSB7XG4gICAgc3dpdGNoKG5ld1JhdGUpIHtcbiAgICAgIGNhc2UgJ2dpbXAnOlxuICAgICAgY2FzZSAndHJhbnNsYXRlJzpcbiAgICAgICAgcmF0ZSA9IG5ld1JhdGU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnY2hhbmdlJzpcbiAgICAgICAgcmF0ZSA9ICd0cmFuc2xhdGUnO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFJhdGUoKSB7XG4gICAgcmV0dXJuIHJhdGU7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRDdXJyZW5jeVJhdGUocmF0ZTogbnVtYmVyKSB7XG4gICAgY3VycmVuY3lSYXRlID0gcmF0ZTtcbiAgICBsZXQgY3VycmVuY3kgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY3VycmVuY3knKTtcbiAgICBpZiAoY3VycmVuY3kgIT0gbnVsbCkge1xuICAgICAgY3VycmVuY3kuc2V0QXR0cmlidXRlKCdkYXRhLWNvbnRlbnQnLCBmb3JtYXRQcmljZShyYXRlLCBLUlcubmFtZSkpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Q3VycmVuY3lSYXRlKCkge1xuICAgIHJldHVybiBjdXJyZW5jeVJhdGU7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRUaW1lKG5ld1RpbWU6IG51bWJlcikge1xuICAgIHN3aXRjaChuZXdUaW1lKSB7XG4gICAgICBjYXNlIDEwOlxuICAgICAgY2FzZSAzMDpcbiAgICAgIGNhc2UgNjA6XG4gICAgICBjYXNlIDcyMDpcbiAgICAgICAgICB0aW1lID0gbmV3VGltZTtcbiAgICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRUaW1lKCkge1xuICAgIHJldHVybiB0aW1lO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0UHJpY2VEYXRhKG5ld1ByaWNlRGF0YTogSVJlc3BvbnNlW10pIHtcbiAgICBwcmljZURhdGEgPSBuZXdQcmljZURhdGEubWFwKChpdGVtOiBJUmVzcG9uc2UpID0+IGdldENvaW5QcmljZShpdGVtKSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFByaWNlRGF0YSgpIHtcbiAgICByZXR1cm4gcHJpY2VEYXRhO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0UmVmcmVzaFRpbWUoKSB7XG4gICAgcmV0dXJuIHJlZnJlc2hUaW1lO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVjUmVmcmVzaFRpbWUoKSB7XG4gICAgcmVmcmVzaFRpbWUgPSByZWZyZXNoVGltZSAtIDE7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFJlZnJlc2hUaW1lKCkge1xuICAgIHJlZnJlc2hUaW1lID0gNjA7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRCYXNlRXhjaG5hZ2UoKSB7XG4gICAgcmV0dXJuIEJJVEZJTkVYO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RXhjaGFuZ2VzKCkge1xuICAgIHJldHVybiBbQklUSFVNQiwgQ09JTk9ORSwgVVBCSVRdO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0QWxsRXhjaGFuZ2VzKCkge1xuICAgIHJldHVybiBbZ2V0QmFzZUV4Y2huYWdlKCldLmNvbmNhdChnZXRFeGNoYW5nZXMoKSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRFeGNoYW5nZShuYW1lOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gZmluZChFWENIQU5HRVMsIGV4Y2hhbmdlID0+IHtcbiAgICAgIHJldHVybiBleGNoYW5nZS5uYW1lID09PSBuYW1lXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRDb2luKG5hbWU6IHN0cmluZykge1xuICAgIHJldHVybiBmaW5kKENPSU5TLCBjb2luID0+IHtcbiAgICAgIHJldHVybiBjb2luLm5hbWUgPT09IG5hbWVcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEN1cnJlbmN5KG5hbWU6IHN0cmluZykge1xuICAgIHJldHVybiBmaW5kKENVUlJFTkNJRVMsIGN1cnJlbmN5ID0+IHtcbiAgICAgIHJldHVybiBjdXJyZW5jeS5uYW1lID09PSBuYW1lXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRDb2luUHJpY2UocmVzcG9uc2U6IElSZXNwb25zZSkge1xuICAgIGxldCB2YWx1ZTogSUNvaW5QcmljZSA9IHtcbiAgICAgIGV4Y2hhbmdlOiBnZXRFeGNoYW5nZShyZXNwb25zZS5leGNoYW5nZSksXG4gICAgICBjb2luOiBnZXRDb2luKHJlc3BvbnNlLmNvaW4pLFxuICAgICAgcHJpY2U6IHJlc3BvbnNlLnByaWNlLFxuICAgICAgdGltZTogcmVzcG9uc2UudGltZSxcbiAgICAgIGN1cnJlbmN5OiBnZXRDdXJyZW5jeShyZXNwb25zZS5jdXJyZW5jeSlcbiAgICB9O1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFByaWNlKGV4Y2hhbmdlOiBJRXhjaGFuZ2UsIGNvaW46IElDb2luLCB0aW1lOiBudW1iZXIpIHtcbiAgICBsZXQganNvbjogSUNvaW5QcmljZSA9IGZpbmQoZ2V0UHJpY2VEYXRhKCksIGl0ZW0gPT4ge1xuICAgICAgICByZXR1cm4gaXRlbS5leGNoYW5nZSA9PT0gZXhjaGFuZ2UgJiYgaXRlbS5jb2luID09PSBjb2luICYmIGl0ZW0udGltZSA9PSB0aW1lXG4gICAgICB9KTtcbiAgICByZXR1cm4ganNvbiAmJiBqc29uLnByaWNlIHx8IDAgLy8gPyBob3cgdG8gaGFuZGxlIHVuZGVmaW5lZFxuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0UHJpY2UocHJpY2U6IG51bWJlciwgY3VycmVuY3k6IHN0cmluZykge1xuICAgIGxldCBkaWdpdHM7XG4gICAgaWYgKHByaWNlIDwgMTApIHtcbiAgICAgIGRpZ2l0cyA9IDM7XG4gICAgfSBlbHNlIGlmIChwcmljZSA8IDEwMCkge1xuICAgICAgZGlnaXRzID0gMjtcbiAgICB9IGVsc2UgaWYgKHByaWNlIDwgMTAwMCkge1xuICAgICAgZGlnaXRzID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGlnaXRzID0gMDtcbiAgICB9XG4gICAgbGV0IGZvcm1hdHRlciA9IG5ldyBJbnRsLk51bWJlckZvcm1hdCgnZW4tVVMnLCB7XG4gICAgICBzdHlsZTogJ2N1cnJlbmN5JyxcbiAgICAgIGN1cnJlbmN5OiBjdXJyZW5jeSxcbiAgICAgIG1pbmltdW1GcmFjdGlvbkRpZ2l0czogZGlnaXRzLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGZvcm1hdHRlci5mb3JtYXQocHJpY2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVuZGVyVEhlYWQoKSB7XG4gICAgbGV0IHRoZWFkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigndGhlYWQnKTtcbiAgICBmb3JFYWNoKHRoZWFkLnJvd3MsIHJvdyA9PiB0aGVhZC5yZW1vdmVDaGlsZChyb3cpKTtcbiAgICBsZXQgcm93ID0gdGhlYWQuaW5zZXJ0Um93KCk7XG4gICAgcm93Lmluc2VydENlbGwoKS5vdXRlckhUTUwgPSAnPHRoIHNjb3BlPVwiY29sXCI+PC90aD4nO1xuICAgIGZvckVhY2goZ2V0QWxsRXhjaGFuZ2VzKCksIGV4Y2hhbmdlID0+IHtcbiAgICAgIGxldCBjZWxsID0gcm93Lmluc2VydENlbGwoKTtcbiAgICAgIGNlbGwub3V0ZXJIVE1MID0gYDx0aCBzY29wZT1cImNvbFwiPjxhIGhyZWY9XCIke2V4Y2hhbmdlLnVybH1cIiBjbGFzcz1cInRleHQtZGFyayAke2V4Y2hhbmdlLm5hbWV9XCIgdGFyZ2V0PVwiX2JsYW5rXCI+JHtleGNoYW5nZS5kaXNwbGF5TmFtZX08L2E+PHNtYWxsIGNsYXNzPVwiYmFuLSR7ZXhjaGFuZ2UubmFtZX1cIj48L3NtYWxsPjwvdGg+YFxuICAgICAgdXBkYXRlRXhjaGFuZ2VTdGF0dXMoZXhjaGFuZ2UpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVuZGVyVEJvZHkoKSB7XG4gICAgbGV0IHRib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigndGJvZHknKTtcbiAgICBmb3JFYWNoKHRib2R5LnJvd3MsIHJvdyA9PiB0Ym9keS5yZW1vdmVDaGlsZChyb3cpKTtcbiAgICBmb3JFYWNoKENPSU5TLCBjb2luID0+IHtcbiAgICAgIGxldCByb3cgPSB0Ym9keS5pbnNlcnRSb3coKTtcbiAgICAgIGxldCBjZWxsID0gcm93Lmluc2VydENlbGwoKTtcbiAgICAgIGNlbGwub3V0ZXJIVE1MID0gYDx0aCBzY29wZT1cInJvd1wiPiR7Y29pbi5uYW1lLnRvVXBwZXJDYXNlKCl9PGJyPjxhIGhyZWY9XCIke2dldENoYXJ0TGluayhjb2luKX1cIiBjbGFzcz1cInRleHQtbXV0ZWRcIiB0YXJnZXQ9XCJfYmxhbmtcIj48c21hbGwgY2xhc3M9XCJvaSBvaS1iYXItY2hhcnRcIj48L3NtYWxsPjwvYT48L3RoPmBcbiAgICAgIGZvckVhY2goZ2V0QWxsRXhjaGFuZ2VzKCksIGV4Y2hhbmdlID0+IHtcbiAgICAgICAgLy8gbGV0IGNlbGwgPSBnZXRDZWxsKGV4Y2hhbmdlLCBjb2luKTtcbiAgICAgICAgbGV0IGh0bWxcbiAgICAgICAgbGV0IHByaWNlID0gZ2V0UHJpY2UoZXhjaGFuZ2UsIGNvaW4sIDApO1xuICAgICAgICBpZiAocHJpY2UgPT0gMCkge1xuICAgICAgICAgIGh0bWwgPSAnLSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGV0IHRpbWUgPSBnZXRUaW1lKCk7XG4gICAgICAgICAgbGV0IGxhc3RQcmljZSA9IGdldFByaWNlKGV4Y2hhbmdlLCBjb2luLCB0aW1lKTtcbiAgICAgICAgICBpZiAocmF0ZSA9PT0gJ2dpbXAnKSB7XG4gICAgICAgICAgICBpZiAoZXhjaGFuZ2UgPT0gZ2V0QmFzZUV4Y2huYWdlKCkpIHtcbiAgICAgICAgICAgICAgaHRtbCA9IHJlbmRlcktvclByaWNlKGV4Y2hhbmdlLCBwcmljZSwgbGFzdFByaWNlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGxldCBiYXNlRXhjaGFuZ2UgPSBnZXRCYXNlRXhjaG5hZ2UoKTtcbiAgICAgICAgICAgICAgbGV0IGJpdGZpbmV4UHJpY2UgPSBnZXRQcmljZShiYXNlRXhjaGFuZ2UsIGNvaW4sIDApO1xuICAgICAgICAgICAgICBsZXQgYml0ZmluZXhMYXN0UHJpY2UgPSBnZXRQcmljZShiYXNlRXhjaGFuZ2UsIGNvaW4sIHRpbWUpO1xuICAgICAgICAgICAgICBodG1sID0gcmVuZGVyR2ltcChleGNoYW5nZSwgcHJpY2UsIGxhc3RQcmljZSwgYml0ZmluZXhQcmljZSwgYml0ZmluZXhMYXN0UHJpY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBodG1sID0gcmVuZGVyQ2hhbmdlcyhleGNoYW5nZSwgcHJpY2UsIGxhc3RQcmljZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBjZWxsID0gcm93Lmluc2VydENlbGwoKTtcbiAgICAgICAgY2VsbC5pbm5lckhUTUwgPSBodG1sO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmVuZGVyVEhlYWQoKTtcbiAgICByZW5kZXJUQm9keSgpO1xuICAgICQoZnVuY3Rpb24gKCkge1xuICAgICAgJCgnW2RhdGEtdG9nZ2xlPVwicG9wb3ZlclwiXScpLnBvcG92ZXIoeyAndHJpZ2dlcic6ICdob3ZlcicsIH0pXG4gICAgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbmRlckNoYW5nZXMoZXhjaGFuZ2U6IElFeGNoYW5nZSwgcHJpY2U6IG51bWJlciwgbGFzdFByaWNlOiBudW1iZXIpIHtcbiAgICBsZXQgcHJpY2VDaGFuZ2UgPSBwcmljZSAvIGxhc3RQcmljZSAtIDE7XG4gICAgaWYgKGxhc3RQcmljZSAhPSAwICYmIHByaWNlICE9IDApIHtcbiAgICAgIGxldCBmb250Q29sb3IgPSBnZXRGb250Q29sb3IocHJpY2VDaGFuZ2UpO1xuICAgICAgcmV0dXJuIGA8c3BhbiBzdHlsZT1cImNvbG9yOiAke2ZvbnRDb2xvcn07XCI+JHtmb3JtYXRQcmljZShwcmljZSwgZXhjaGFuZ2UuY3VycmVuY3kubmFtZSl9PC9zcGFuPjxicj48c21hbGwgZGF0YS10b2dnbGU9XCJwb3BvdmVyXCIgZGF0YS1wbGFjZW1lbnQ9XCJib3R0b21cIiBkYXRhLWNvbnRlbnQ9XCIke2Zvcm1hdFByaWNlKGxhc3RQcmljZSwgZXhjaGFuZ2UuY3VycmVuY3kubmFtZSl9XCI+JHsoMTAwICogcHJpY2VDaGFuZ2UpLnRvRml4ZWQoMil9JTwvc21hbGw+YDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGA8c3Bhbj4ke2Zvcm1hdFByaWNlKHByaWNlLCBleGNoYW5nZS5jdXJyZW5jeS5uYW1lKX08L3NwYW4+YDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW5kZXJLb3JQcmljZShleGNoYW5nZTogSUV4Y2hhbmdlLCBwcmljZTogbnVtYmVyLCBsYXN0UHJpY2U6IG51bWJlcikge1xuICAgIGxldCBjdXJyZW5jeVJhdGUgPSBnZXRDdXJyZW5jeVJhdGUoKTtcbiAgICBsZXQgcHJpY2VDaGFuZ2UgPSBwcmljZSAvIGxhc3RQcmljZSAtIDE7XG4gICAgbGV0IGtvclByaWNlID0gcHJpY2UgKiBjdXJyZW5jeVJhdGU7XG4gICAgaWYgKGxhc3RQcmljZSAhPSAwICYmIGtvclByaWNlICE9IDApIHtcbiAgICAgIGxldCBmb250Q29sb3IgPSBnZXRGb250Q29sb3IocHJpY2VDaGFuZ2UpO1xuICAgICAgbGV0IGZvcm1hdHRlZFByaWNlID0gZm9ybWF0UHJpY2UocHJpY2UsIGV4Y2hhbmdlLmN1cnJlbmN5Lm5hbWUpO1xuICAgICAgbGV0IGZvcm1hdHRlZEtvclByaWNlID0gZm9ybWF0UHJpY2Uoa29yUHJpY2UsIEtSVy5uYW1lKTtcbiAgICAgIHJldHVybiBgPHNwYW4gc3R5bGU9XCJjb2xvcjogJHtmb250Q29sb3J9O1wiPiR7Zm9ybWF0dGVkUHJpY2V9PC9zcGFuPjxicj48c21hbGw+JHtmb3JtYXR0ZWRLb3JQcmljZX08L3NtYWxsPmA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBgPHNwYW4+JHtmb3JtYXRQcmljZShwcmljZSwgZXhjaGFuZ2UuY3VycmVuY3kubmFtZSl9PC9zcGFuPmA7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVuZGVyR2ltcChleGNoYW5nZTogSUV4Y2hhbmdlLCAgcHJpY2U6IG51bWJlciwgbGFzdFByaWNlOiBudW1iZXIsIGJhc2VQcmljZTogbnVtYmVyLCBiYXNlTGFzdFByaWNlOiBudW1iZXIpIHtcbiAgICBpZiAocHJpY2UgPT0gMCkgeyByZXR1cm4gJyc7IH1cbiAgICBsZXQgYmFzZUV4Y2hhbmdlID0gZ2V0QmFzZUV4Y2huYWdlKCk7XG4gICAgbGV0IGN1cnJlbmN5UmF0ZTtcbiAgICBpZiAoYmFzZUV4Y2hhbmdlLmN1cnJlbmN5ID09PSBVU0QgJiYgZXhjaGFuZ2UuY3VycmVuY3kgPT09IEtSVykge1xuICAgICAgY3VycmVuY3lSYXRlID0gZ2V0Q3VycmVuY3lSYXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnJlbmN5UmF0ZSA9IDE7XG4gICAgfVxuXG4gICAgbGV0IHByaWNlQ2hhbmdlID0gcHJpY2UgLyBsYXN0UHJpY2UgLSAxO1xuICAgIGxldCBmb250Q29sb3IgPSBnZXRGb250Q29sb3IocHJpY2VDaGFuZ2UpO1xuICAgIGlmIChiYXNlUHJpY2UgPT0gMCB8fCBjdXJyZW5jeVJhdGUgPT0gMCkge1xuICAgICAgcmV0dXJuIGA8c3BhbiBzdHlsZT1cImNvbG9yOiAke2ZvbnRDb2xvcn07XCI+JHtmb3JtYXRQcmljZShwcmljZSwgZXhjaGFuZ2UuY3VycmVuY3kubmFtZSl9PC9zcGFuPmA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBnaW1wID0gcHJpY2UgLyAoYmFzZVByaWNlICogY3VycmVuY3lSYXRlKSAtIDE7XG4gICAgICBsZXQgbGFzdEdpbXAgPSBsYXN0UHJpY2UgLyAoYmFzZUxhc3RQcmljZSAqIGN1cnJlbmN5UmF0ZSkgLSAxO1xuICAgICAgbGV0IGdpbXBDaGFuZ2UgPSAoMTAwICogKGdpbXAgLSBsYXN0R2ltcCkpXG4gICAgICBsZXQgZm9ybWF0dGVkR2ltcENoYW5nZSA9IGdpbXBDaGFuZ2UgPiAwID8gYCske2dpbXBDaGFuZ2UudG9GaXhlZCgyKX0lYCA6IGAke2dpbXBDaGFuZ2UudG9GaXhlZCgyKX0lYFxuICAgICAgcmV0dXJuIGA8c3BhbiBzdHlsZT1cImNvbG9yOiAke2ZvbnRDb2xvcn07XCI+JHtmb3JtYXRQcmljZShwcmljZSwgZXhjaGFuZ2UuY3VycmVuY3kubmFtZSl9PC9zcGFuPjxicj48c21hbGwgIGRhdGEtdG9nZ2xlPVwicG9wb3ZlclwiIGRhdGEtcGxhY2VtZW50PVwiYm90dG9tXCIgZGF0YS1jb250ZW50PVwiJHtmb3JtYXR0ZWRHaW1wQ2hhbmdlfVwiPiR7KDEwMCAqIGdpbXApLnRvRml4ZWQoMil9JTwvc21hbGw+YDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRDaGFydExpbmsoY29pbjogSUNvaW4pIHtcbiAgICBpZiAoQklUSFVNQl9DT0lOUy5pbmRleE9mKGNvaW4pID49IDApIHtcbiAgICAgIHJldHVybiBgaHR0cHM6Ly9rci50cmFkaW5ndmlldy5jb20vY2hhcnQvP3N5bWJvbD1CSVRIVU1COiR7Y29pbi5uYW1lLnRvVXBwZXJDYXNlKCl9S1JXYFxuICAgIH0gZWxzZSBpZiAoVVBCSVRfQ09JTlMuaW5kZXhPZihjb2luKSA+PSAwKSB7XG4gICAgICByZXR1cm4gYGh0dHBzOi8vdXBiaXQuY29tL2V4Y2hhbmdlP2NvZGU9Q1JJWC5VUEJJVC5LUlctJHtjb2luLm5hbWUudG9VcHBlckNhc2UoKX1gXG4gICAgfVxuICAgIHN3aXRjaCAoY29pbikge1xuICAgICAgY2FzZSBTVE9SSjpcbiAgICAgICAgcmV0dXJuIGBodHRwczovL2NyeXB0b3dhdC5jaC9tYXJrZXRzL2JpdGZpbmV4L3N0ai91c2RgXG4gICAgICBjYXNlIElPVEE6XG4gICAgICAgIHJldHVybiBgaHR0cHM6Ly9jcnlwdG93YXQuY2gvbWFya2V0cy9iaXRmaW5leC9pb3QvdXNkYFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGBodHRwczovL2NyeXB0b3dhdC5jaC9tYXJrZXRzL2JpdGZpbmV4LyR7Y29pbi5uYW1lfS91c2RgXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Rm9udENvbG9yKHByaWNlQ2hhbmdlOiBudW1iZXIpIHtcbiAgICBpZiAocHJpY2VDaGFuZ2UgPiAwKSB7XG4gICAgICByZXR1cm4gJ3JlZCc7XG4gICAgfSBlbHNlIGlmIChwcmljZUNoYW5nZSA8IDApIHtcbiAgICAgIHJldHVybiAnYmx1ZSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAnYmxhY2snO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbmRlclVwZGF0ZWRBdCh1cGRhdGVkQXQ6IG51bWJlcikge1xuICAgIGxldCB0ZXh0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnVwZGF0ZWQtYXQnKSBhcyBIVE1MRWxlbWVudFxuICAgIHRleHQuaW5uZXJUZXh0ID0gZ2V0Rm9ybWF0VXBkYXRlZEF0KHVwZGF0ZWRBdCk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRGb3JtYXRVcGRhdGVkQXQodXBkYXRlZEF0OiBudW1iZXIpIHtcbiAgICBsZXQgZGF0ZSA9IG5ldyBEYXRlKHVwZGF0ZWRBdCk7XG5cbiAgICByZXR1cm4gYCR7ZGF0ZS5nZXRGdWxsWWVhcigpfS8ke2RhdGUuZ2V0TW9udGgoKSsxfS8ke2RhdGUuZ2V0RGF0ZSgpfWBcbiAgICAgICsgYCAke2RhdGUudG9Mb2NhbGVUaW1lU3RyaW5nKCl9YDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZExpc2VuZXJzKCkge1xuICAgIGxldCByYWRpb0J1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dFt0eXBlPXJhZGlvXScpO1xuICAgIGZvckVhY2gocmFkaW9CdXR0b25zLCAoYnV0dG9uOiBIVE1MSW5wdXRFbGVtZW50KSA9PiB7XG4gICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCAoKSA9PiB7XG4gICAgICAgIGlmIChidXR0b24ubmFtZSA9PT0gJ3JhdGUnKSB7XG4gICAgICAgICAgaWYgKGJ1dHRvbi5pZCA9PT0gJ2dpbXAnKSB7XG4gICAgICAgICAgICBzZXRSYXRlKCdnaW1wJyk7XG4gICAgICAgICAgICByZW5kZXIoKTtcbiAgICAgICAgICAgIGdhKCdzZW5kJywgJ2V2ZW50JywgJ0ZpbHRlcicsICdTZXRJbmRpY2F0b3InLCAnZ2ltcCcpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoYnV0dG9uLmlkID09PSAndHJhbnNsYXRlJykge1xuICAgICAgICAgICAgc2V0UmF0ZSgndHJhbnNsYXRlJyk7XG4gICAgICAgICAgICByZW5kZXIoKTtcbiAgICAgICAgICAgIGdhKCdzZW5kJywgJ2V2ZW50JywgJ0ZpbHRlcicsICdTZXRJbmRpY2F0b3InLCAndHJhbnNsYXRlJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGJ1dHRvbi5uYW1lID09PSAndGltZScpIHtcbiAgICAgICAgICBsZXQgdGltZSA9IGJ1dHRvbi5pZC5zbGljZSgxLCBidXR0b24uaWQubGVuZ3RoKTtcbiAgICAgICAgICBzZXRUaW1lKHBhcnNlSW50KHRpbWUpKTtcbiAgICAgICAgICBmZXRjaFByaWNlRGF0YSgpO1xuICAgICAgICAgIGdhKCdzZW5kJywgJ2V2ZW50JywgJ0ZpbHRlcicsICdTZXRUaW1lJywgdGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlVXJsKCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gZmV0Y2hQcmljZURhdGEoKSB7XG4gICAgYXhpb3MuZ2V0KGBodHRwczovLzE1MTMwaTN2Z2wuZXhlY3V0ZS1hcGkuYXAtbm9ydGhlYXN0LTIuYW1hem9uYXdzLmNvbS9kZXYvYXNzZXRzP3Q9JHtnZXRUaW1lKCl9YClcbiAgICAvLyBheGlvcy5nZXQoXCJwcmljZS5qc29uXCIpXG4gICAgICAudGhlbigocmVzcG9uc2U6IEF4aW9zUmVzcG9uc2UpID0+IHtcbiAgICAgICAgc2V0UHJpY2VEYXRhKHJlc3BvbnNlLmRhdGEuZGF0YSk7XG4gICAgICAgIHJlbmRlclVwZGF0ZWRBdChyZXNwb25zZS5kYXRhLnVwZGF0ZWRfYXQpO1xuICAgICAgICByZW5kZXIoKTtcbiAgICAgICAgcmVzZXRSZWZyZXNoVGltZSgpO1xuICAgICAgICB1cGRhdGVSZWZyZXNoVGV4dCgpO1xuICAgICAgICBzaG93TG9hZGluZyhmYWxzZSk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnJvcjogQXhpb3NFcnJvcikgPT4ge1xuICAgICAgICBpZiAoZXJyb3IucmVzcG9uc2UpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yLnJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yLnJlc3BvbnNlLnN0YXR1cyk7XG4gICAgICAgICAgY29uc29sZS5sb2coZXJyb3IucmVzcG9uc2UuaGVhZGVycyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5sb2coZXJyb3IubWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzZXRSZWZyZXNoVGltZSgpO1xuICAgICAgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlVXJsKCkge1xuICAgIGxldCByYXRlID0gZ2V0UGFyYW1ldGVyQnlOYW1lKCdyYXRlJyk7XG4gICAgaWYgKHJhdGUgIT0gbnVsbCkge1xuICAgICAgc2V0UmF0ZShyYXRlKTsgICAgICAgXG4gICAgfVxuICAgIGxldCB0aW1lID0gZ2V0UGFyYW1ldGVyQnlOYW1lKCd0aW1lJyk7XG4gICAgaWYgKHRpbWUgIT0gbnVsbCkge1xuICAgICAgc2V0VGltZShwYXJzZUludCh0aW1lKSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlVXJsKCkge1xuICAgIGlmICh3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUpIHtcbiAgICAgIGxldCBwYXJzZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICBwYXJzZXIuaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgICAgcGFyc2VyLnNlYXJjaCA9IGA/cmF0ZT0ke2dldFJhdGUoKX0mdGltZT0ke2dldFRpbWUoKX1gXG4gICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoe30sIG51bGwsIHBhcnNlci5ocmVmKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRQYXJhbWV0ZXJCeU5hbWUobmFtZTogc3RyaW5nKSB7XG4gICAgbGV0IHVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoL1tcXFtcXF1dL2csIFwiXFxcXCQmXCIpO1xuICAgIHZhciByZWdleCA9IG5ldyBSZWdFeHAoXCJbPyZdXCIgKyBuYW1lICsgXCIoPShbXiYjXSopfCZ8I3wkKVwiKSxcbiAgICAgICAgcmVzdWx0cyA9IHJlZ2V4LmV4ZWModXJsKTtcbiAgICBpZiAoIXJlc3VsdHMpIHJldHVybiBudWxsO1xuICAgIGlmICghcmVzdWx0c1syXSkgcmV0dXJuICcnO1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQocmVzdWx0c1syXS5yZXBsYWNlKC9cXCsvZywgXCIgXCIpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUJ1dHRvbnMoKSB7XG4gICAgbGV0IHJhdGVCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBpbnB1dFt0eXBlPXJhZGlvXVtuYW1lPXJhdGVdW2lkPSR7Z2V0UmF0ZSgpfV1gKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICAgIGlmIChyYXRlQnV0dG9uKSB7XG4gICAgICByYXRlQnV0dG9uLmNsaWNrKCk7XG4gICAgfVxuICAgIGxldCB0aW1lQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgaW5wdXRbdHlwZT1yYWRpb11bbmFtZT10aW1lXVtpZD10JHtnZXRUaW1lKCl9XWApIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgaWYgKHRpbWVCdXR0b24pIHtcbiAgICAgIHRpbWVCdXR0b24uY2xpY2soKTtcbiAgICB9XG4gICAgbGV0IGJvb2ttYXJrID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmJvb2ttYXJrJylcbiAgICBpZiAoYm9va21hcmspIHtcbiAgICAgIGJvb2ttYXJrLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBpZiAod2luZG93LmV4dGVybmFsICYmICgnQWRkRmF2b3JpdGUnIGluIHdpbmRvdy5leHRlcm5hbCkpIHtcbiAgICAgICAgICAvLyBJbnRlcm5ldCBFeHBsb3JlclxuICAgICAgICAgICh3aW5kb3cuZXh0ZXJuYWwgYXMgYW55KS5BZGRGYXZvcml0ZShsb2NhdGlvbi5ocmVmLCBkb2N1bWVudC50aXRsZSk7IFxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldFJlZnJlc2hUaW1lcigpIHtcbiAgICAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRpbWUtcmVmcmVzaC1idXR0b24nKSBhcyBIVE1MRWxlbWVudCkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIGZldGNoUHJpY2VEYXRhKCk7XG4gICAgICAgIGdhKCdzZW5kJywgJ2V2ZW50JywgJ1JlZnJlc2gnLCAnQ2xpY2tCdXR0b24nLCAncmVmcmVzaCcpO1xuICAgIH0pO1xuICAgIHdpbmRvdy5zZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBkZWNSZWZyZXNoVGltZSgpO1xuICAgICAgdXBkYXRlUmVmcmVzaFRleHQoKTtcbiAgICAgIGlmIChnZXRSZWZyZXNoVGltZSgpID09IDApIHtcbiAgICAgICAgZmV0Y2hQcmljZURhdGEoKTtcbiAgICAgICAgZ2EoJ3NlbmQnLCAnZXZlbnQnLCAnUmVmcmVzaCcsICdUaW1lb3V0JywgJ3JlZnJlc2gnKTtcbiAgICAgIH1cbiAgICB9LCAxMDAwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVJlZnJlc2hUZXh0KCkge1xuICAgICAgbGV0IGNvdW50ID0gZ2V0UmVmcmVzaFRpbWUoKTtcbiAgICAgIGxldCByZWZyZXNoVGV4dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50aW1lLXJlZnJlc2gtdGV4dCcpIGFzIEhUTUxFbGVtZW50O1xuICAgICAgaWYgKGNvdW50ID4gNSkge1xuICAgICAgICByZWZyZXNoVGV4dC5pbm5lclRleHQgPSBgJHtjb3VudH0g7LSIYDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlZnJlc2hUZXh0LmlubmVyVGV4dCA9ICfsnqDsi5wnO1xuICAgICAgfSAgICBcbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUN1cnJlbmN5UmF0ZSgpIHtcbiAgICBsZXQgcmF0ZSA9IGF3YWl0IGdldFJlbW90ZUN1cnJlbmN5UmF0ZSgpO1xuICAgIGNvbnNvbGUubG9nKCdjdXJyZW5jeScsIHJhdGUpXG4gICAgaWYgKHJhdGUgPiAwKSB7XG4gICAgICBzZXRDdXJyZW5jeVJhdGUocmF0ZSk7XG4gICAgICByZW5kZXIoKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBmdW5jdGlvbiBnZXRSZW1vdGVDdXJyZW5jeVJhdGUoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldCgnaHR0cHM6Ly8xNTEzMGkzdmdsLmV4ZWN1dGUtYXBpLmFwLW5vcnRoZWFzdC0yLmFtYXpvbmF3cy5jb20vZGV2L2N1cnJlbmN5JylcbiAgICAgIGxldCBkYXRhID0gcmVzcG9uc2UuZGF0YS5kYXRhIGFzIElDdXJyZW5jeVJlc3BvbnNlW11cbiAgICAgIHJldHVybiBkYXRhLmZpbHRlcihkID0+IGQuc291cmNlID09PSAnVVNEJyAmJiBkLnRhcmdldCA9PT0gJ0tSVycpLm1hcChkID0+IGQucmF0ZSlbMF1cbiAgICB9IGNhdGNoKGUpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdjdXJyZW5jeScsIGUpXG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9XG5cbiAgZnVuY3Rpb24gc2hvd0xvYWRpbmcobG9hZGluZzogYm9vbGVhbikge1xuICAgIGlmIChsb2FkZWQgfHwgIWxvYWRpbmcpIHtcbiAgICAgIGxvYWRlZCA9IHRydWU7XG4gICAgICAkKCcjbG9hZGluZy1tb2RhbCcpLm1vZGFsKCdoaWRlJyk7XG4gICAgfSBlbHNle1xuICAgICAgd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBpZiAoIWxvYWRlZCkge1xuICAgICAgICAgICQoJyNsb2FkaW5nLW1vZGFsJykubW9kYWwoJ3Nob3cnKTtcbiAgICAgICAgfVxuICAgICAgfSwgNTAwKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzaG93T25ib2FyZGluZygpIHtcbiAgICBsZXQgZ2ltcEJ1dHRvbiA9ICQoJy5naW1wLW9uYm9hcmRpbmcnKVxuICAgIGlmICh3aW5kb3cubG9jYWxTdG9yYWdlKSB7XG4gICAgICBsZXQgbG9jYWxTdG9yYWdlID0gd2luZG93LmxvY2FsU3RvcmFnZTtcbiAgICAgIGlmICghbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJvbmJvYXJkaW5nOmdpbXBfYnV0dG9uXCIpKSB7XG4gICAgICAgIGdpbXBCdXR0b24ucG9wb3Zlcignc2hvdycpO1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZ2ltcC1vbmJvYXJkaW5nJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgZ2ltcEJ1dHRvbi5wb3BvdmVyKCdoaWRlJyk7XG4gICAgICAgICAgZ2ltcEJ1dHRvbi5wb3BvdmVyKCdkaXNhYmxlJyk7XG4gICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ29uYm9hcmRpbmc6Z2ltcF9idXR0b24nLCAnZG9uZScpXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ2ltcEJ1dHRvbi5wb3BvdmVyKCdkaXNhYmxlJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGdpbXBCdXR0b24ucG9wb3ZlcignZGlzYWJsZScpO1xuICAgIH1cblxuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gdXBkYXRlRXhjaGFuZ2VTdGF0dXMoZXhjaGFuZ2U6IElFeGNoYW5nZSkge1xuICAgIGxldCBhY3RpdmU7XG4gICAgc3dpdGNoIChleGNoYW5nZSkge1xuICAgICAgY2FzZSBCSVRGSU5FWDpcbiAgICAgICAgYWN0aXZlID0gYXdhaXQgaXNCaXRmaW5leEFjdGl2ZSgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgQklUSFVNQjpcbiAgICAgICAgYWN0aXZlID0gYXdhaXQgaXNCaXRodW1iQWN0aXZlKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBDT0lOT05FOlxuICAgICAgICBhY3RpdmUgPSBhd2FpdCBpc0NvaW5vbmVBY3RpdmUoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFVQQklUOlxuICAgICAgICBhY3RpdmUgPSBhd2FpdCBpc1VwYml0QWN0aXZlKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGlmICghYWN0aXZlKSB7XG4gICAgICBsZXQgdGFyZ2V0SWNvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYC5iYW4tJHtleGNoYW5nZS5uYW1lfWApXG4gICAgICBpZiAodGFyZ2V0SWNvbikge1xuICAgICAgICB0YXJnZXRJY29uLmNsYXNzTmFtZSA9ICdvaSBvaS1iYW4gdGV4dC1kYW5nZXInXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gaXNCaXRmaW5leEFjdGl2ZSgpIHtcbiAgICB0cnkge1xuICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MuZ2V0KCdodHRwczovL2FwaS5iaXRmaW5leC5jb20vdjIvcGxhdGZvcm0vc3RhdHVzJylcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhWzBdID09IDFcbiAgICB9IGNhdGNoKGUpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdiaXRmaW5leCcsIGUpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIGlzQml0aHVtYkFjdGl2ZSgpIHtcbiAgICB0cnkge1xuICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MuZ2V0KCdodHRwczovL2FwaS5iaXRodW1iLmNvbS9wdWJsaWMvdGlja2VyL0JUQycpXG4gICAgICBsZXQgc3RhdHVzID0gcmVzcG9uc2UuZGF0YS5zdGF0dXM7XG4gICAgICBsZXQgZGF0ZSA9IHBhcnNlSW50KHJlc3BvbnNlLmRhdGEuZGF0YS5kYXRlLCAxMCk7XG4gICAgICBsZXQgY3VycmVudFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgIGxldCB2YWxpZERhdGUgPSBkYXRlIC0gMTAwMDAgPCBjdXJyZW50VGltZSAmJiBjdXJyZW50VGltZSA8IGRhdGUgKyAxMDAwMFxuICAgICAgcmV0dXJuIHN0YXR1cyA9PT0gJzAwMDAnICYmIHZhbGlkRGF0ZTtcbiAgICB9IGNhdGNoKGUpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdiaXRodW1iJywgZSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gaXNDb2lub25lQWN0aXZlKCkge1xuICAgIHRyeSB7XG4gICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5nZXQoJ2h0dHBzOi8vYXBpLmNvaW5vbmUuY28ua3IvdGlja2VyP2N1cnJlbmN5PWJ0YycpXG4gICAgICBsZXQgcmVzdWx0ID0gcmVzcG9uc2UuZGF0YS5yZXN1bHQ7XG4gICAgICBsZXQgdGltZXN0YW1wID0gcGFyc2VJbnQocmVzcG9uc2UuZGF0YS50aW1lc3RhbXAsIDEwKTtcbiAgICAgIGxldCBjdXJyZW50VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC8gMTAwMDtcbiAgICAgIGxldCB2YWxpZERhdGUgPSB0aW1lc3RhbXAgLSAxMCA8IGN1cnJlbnRUaW1lICYmIGN1cnJlbnRUaW1lIDwgdGltZXN0YW1wICsgMTBcbiAgICAgIHJldHVybiByZXN1bHQgPT09ICdzdWNjZXNzJyAmJiB2YWxpZERhdGU7XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICBjb25zb2xlLmxvZygnY29pbm9uZScsIGUpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIGlzVXBiaXRBY3RpdmUoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldCgnaHR0cHM6Ly9jY3gudXBiaXQuY29tL2FwaS92MS90aW1lc3RhbXAnKVxuICAgICAgbGV0IHRpbWVzdGFtcCA9IHBhcnNlSW50KHJlc3BvbnNlLmRhdGEsIDEwKTtcbiAgICAgIGxldCBjdXJyZW50VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC8gMTAwMDtcbiAgICAgIHJldHVybiB0aW1lc3RhbXAgLSAxMCA8IGN1cnJlbnRUaW1lICYmIGN1cnJlbnRUaW1lIDwgdGltZXN0YW1wICsgMTA7XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICBjb25zb2xlLmxvZygndXBiaXQnLCBlKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBzaG93TG9hZGluZyh0cnVlKTtcbiAgcGFyc2VVcmwoKTtcbiAgdXBkYXRlQnV0dG9ucygpO1xuICBhZGRMaXNlbmVycygpO1xuICBzZXRSZWZyZXNoVGltZXIoKTtcbiAgdXBkYXRlQ3VycmVuY3lSYXRlKCk7XG4gIGZldGNoUHJpY2VEYXRhKCk7XG4gIHNob3dPbmJvYXJkaW5nKCk7XG59XG5cbnJlYWR5KG1haW4pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2luZGV4LnRzIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2F4aW9zL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSA4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIHZhciBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG5heGlvcy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKHV0aWxzLm1lcmdlKGRlZmF1bHRzLCBpbnN0YW5jZUNvbmZpZykpO1xufTtcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWwnKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBheGlvcztcblxuLy8gQWxsb3cgdXNlIG9mIGRlZmF1bHQgaW1wb3J0IHN5bnRheCBpbiBUeXBlU2NyaXB0XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gYXhpb3M7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanNcbi8vIG1vZHVsZSBpZCA9IDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyohXG4gKiBEZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGlzIGEgQnVmZmVyXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuXG4vLyBUaGUgX2lzQnVmZmVyIGNoZWNrIGlzIGZvciBTYWZhcmkgNS03IHN1cHBvcnQsIGJlY2F1c2UgaXQncyBtaXNzaW5nXG4vLyBPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yLiBSZW1vdmUgdGhpcyBldmVudHVhbGx5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPSBudWxsICYmIChpc0J1ZmZlcihvYmopIHx8IGlzU2xvd0J1ZmZlcihvYmopIHx8ICEhb2JqLl9pc0J1ZmZlcilcbn1cblxuZnVuY3Rpb24gaXNCdWZmZXIgKG9iaikge1xuICByZXR1cm4gISFvYmouY29uc3RydWN0b3IgJiYgdHlwZW9mIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKVxufVxuXG4vLyBGb3IgTm9kZSB2MC4xMCBzdXBwb3J0LiBSZW1vdmUgdGhpcyBldmVudHVhbGx5LlxuZnVuY3Rpb24gaXNTbG93QnVmZmVyIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmoucmVhZEZsb2F0TEUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG9iai5zbGljZSA9PT0gJ2Z1bmN0aW9uJyAmJiBpc0J1ZmZlcihvYmouc2xpY2UoMCwgMCkpXG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9pcy1idWZmZXIvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDEwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi8uLi9kZWZhdWx0cycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIEludGVyY2VwdG9yTWFuYWdlciA9IHJlcXVpcmUoJy4vSW50ZXJjZXB0b3JNYW5hZ2VyJyk7XG52YXIgZGlzcGF0Y2hSZXF1ZXN0ID0gcmVxdWlyZSgnLi9kaXNwYXRjaFJlcXVlc3QnKTtcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gQXhpb3MoaW5zdGFuY2VDb25maWcpIHtcbiAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnO1xuICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKVxuICB9O1xufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICovXG5BeGlvcy5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIHJlcXVlc3QoY29uZmlnKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgIGNvbmZpZyA9IHV0aWxzLm1lcmdlKHtcbiAgICAgIHVybDogYXJndW1lbnRzWzBdXG4gICAgfSwgYXJndW1lbnRzWzFdKTtcbiAgfVxuXG4gIGNvbmZpZyA9IHV0aWxzLm1lcmdlKGRlZmF1bHRzLCB0aGlzLmRlZmF1bHRzLCB7IG1ldGhvZDogJ2dldCcgfSwgY29uZmlnKTtcbiAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKTtcblxuICAvLyBIb29rIHVwIGludGVyY2VwdG9ycyBtaWRkbGV3YXJlXG4gIHZhciBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QsIHVuZGVmaW5lZF07XG4gIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB3aGlsZSAoY2hhaW4ubGVuZ3RoKSB7XG4gICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbi5zaGlmdCgpLCBjaGFpbi5zaGlmdCgpKTtcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlO1xufTtcblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGlvcztcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzXG4vLyBtb2R1bGUgaWQgPSAxMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXG4vLyBtb2R1bGUgaWQgPSAxMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzXG4vLyBtb2R1bGUgaWQgPSAxM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4vY3JlYXRlRXJyb3InKTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICB2YXIgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIC8vIE5vdGU6IHN0YXR1cyBpcyBub3QgZXhwb3NlZCBieSBYRG9tYWluUmVxdWVzdFxuICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCAhdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICBudWxsLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanNcbi8vIG1vZHVsZSBpZCA9IDE0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVcGRhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIGNvbmZpZywgZXJyb3IgY29kZSwgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIFRoZSBlcnJvciB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBlcnJvci5jb25maWcgPSBjb25maWc7XG4gIGlmIChjb2RlKSB7XG4gICAgZXJyb3IuY29kZSA9IGNvZGU7XG4gIH1cbiAgZXJyb3IucmVxdWVzdCA9IHJlcXVlc3Q7XG4gIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gIHJldHVybiBlcnJvcjtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9lbmhhbmNlRXJyb3IuanNcbi8vIG1vZHVsZSBpZCA9IDE1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lNDAvZ2ksICdAJykuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9XG5cbiAgICAgIGlmICghdXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIHZhbCA9IFt2YWxdO1xuICAgICAgfVxuXG4gICAgICB1dGlscy5mb3JFYWNoKHZhbCwgZnVuY3Rpb24gcGFyc2VWYWx1ZSh2KSB7XG4gICAgICAgIGlmICh1dGlscy5pc0RhdGUodikpIHtcbiAgICAgICAgICB2ID0gdi50b0lTT1N0cmluZygpO1xuICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KHYpKSB7XG4gICAgICAgICAgdiA9IEpTT04uc3RyaW5naWZ5KHYpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodikpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFydHMuam9pbignJicpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzXG4vLyBtb2R1bGUgaWQgPSAxNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLy8gSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbnZhciBpZ25vcmVEdXBsaWNhdGVPZiA9IFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSB7fTtcbiAgdmFyIGtleTtcbiAgdmFyIHZhbDtcbiAgdmFyIGk7XG5cbiAgaWYgKCFoZWFkZXJzKSB7IHJldHVybiBwYXJzZWQ7IH1cblxuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKDAsIGkpKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIGlmIChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZi5pbmRleE9mKGtleSkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSAocGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSA6IFtdKS5jb25jYXQoW3ZhbF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzXG4vLyBtb2R1bGUgaWQgPSAxN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIHZhciBvcmlnaW5VUkw7XG5cbiAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgdmFyIGhyZWYgPSB1cmw7XG5cbiAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgfVxuXG4gICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICB9O1xuICAgIH1cblxuICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICB2YXIgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICB9O1xuICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICB9KSgpXG4pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzXG4vLyBtb2R1bGUgaWQgPSAxOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbi8vIGJ0b2EgcG9seWZpbGwgZm9yIElFPDEwIGNvdXJ0ZXN5IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXZpZGNoYW1iZXJzL0Jhc2U2NC5qc1xuXG52YXIgY2hhcnMgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz0nO1xuXG5mdW5jdGlvbiBFKCkge1xuICB0aGlzLm1lc3NhZ2UgPSAnU3RyaW5nIGNvbnRhaW5zIGFuIGludmFsaWQgY2hhcmFjdGVyJztcbn1cbkUucHJvdG90eXBlID0gbmV3IEVycm9yO1xuRS5wcm90b3R5cGUuY29kZSA9IDU7XG5FLnByb3RvdHlwZS5uYW1lID0gJ0ludmFsaWRDaGFyYWN0ZXJFcnJvcic7XG5cbmZ1bmN0aW9uIGJ0b2EoaW5wdXQpIHtcbiAgdmFyIHN0ciA9IFN0cmluZyhpbnB1dCk7XG4gIHZhciBvdXRwdXQgPSAnJztcbiAgZm9yIChcbiAgICAvLyBpbml0aWFsaXplIHJlc3VsdCBhbmQgY291bnRlclxuICAgIHZhciBibG9jaywgY2hhckNvZGUsIGlkeCA9IDAsIG1hcCA9IGNoYXJzO1xuICAgIC8vIGlmIHRoZSBuZXh0IHN0ciBpbmRleCBkb2VzIG5vdCBleGlzdDpcbiAgICAvLyAgIGNoYW5nZSB0aGUgbWFwcGluZyB0YWJsZSB0byBcIj1cIlxuICAgIC8vICAgY2hlY2sgaWYgZCBoYXMgbm8gZnJhY3Rpb25hbCBkaWdpdHNcbiAgICBzdHIuY2hhckF0KGlkeCB8IDApIHx8IChtYXAgPSAnPScsIGlkeCAlIDEpO1xuICAgIC8vIFwiOCAtIGlkeCAlIDEgKiA4XCIgZ2VuZXJhdGVzIHRoZSBzZXF1ZW5jZSAyLCA0LCA2LCA4XG4gICAgb3V0cHV0ICs9IG1hcC5jaGFyQXQoNjMgJiBibG9jayA+PiA4IC0gaWR4ICUgMSAqIDgpXG4gICkge1xuICAgIGNoYXJDb2RlID0gc3RyLmNoYXJDb2RlQXQoaWR4ICs9IDMgLyA0KTtcbiAgICBpZiAoY2hhckNvZGUgPiAweEZGKSB7XG4gICAgICB0aHJvdyBuZXcgRSgpO1xuICAgIH1cbiAgICBibG9jayA9IGJsb2NrIDw8IDggfCBjaGFyQ29kZTtcbiAgfVxuICByZXR1cm4gb3V0cHV0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJ0b2E7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idG9hLmpzXG4vLyBtb2R1bGUgaWQgPSAxOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiB7XG4gICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgIHZhciBjb29raWUgPSBbXTtcbiAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgIH0sXG5cbiAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgfSxcblxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgfVxuICAgIH07XG4gIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9KSgpXG4pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qc1xuLy8gbW9kdWxlIGlkID0gMjBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCkge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qc1xuLy8gbW9kdWxlIGlkID0gMjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTCcpO1xudmFyIGNvbWJpbmVVUkxzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2NvbWJpbmVVUkxzJyk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gU3VwcG9ydCBiYXNlVVJMIGNvbmZpZ1xuICBpZiAoY29uZmlnLmJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwoY29uZmlnLnVybCkpIHtcbiAgICBjb25maWcudXJsID0gY29tYmluZVVSTHMoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICB9XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVycyB8fCB7fVxuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgIHJlc3BvbnNlLmRhdGEsXG4gICAgICByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanNcbi8vIG1vZHVsZSBpZCA9IDIyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGRhdGEgVGhlIGRhdGEgdG8gYmUgdHJhbnNmb3JtZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGhlYWRlcnMgVGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0IG9yIHJlc3BvbnNlXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBmbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4oZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanNcbi8vIG1vZHVsZSBpZCA9IDIzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkXFwrXFwtXFwuXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qc1xuLy8gbW9kdWxlIGlkID0gMjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanNcbi8vIG1vZHVsZSBpZCA9IDI1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIENhbmNlbCA9IHJlcXVpcmUoJy4vQ2FuY2VsJyk7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsVG9rZW4oZXhlY3V0b3IpIHtcbiAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciByZXNvbHZlUHJvbWlzZTtcbiAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gIH0pO1xuXG4gIHZhciB0b2tlbiA9IHRoaXM7XG4gIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlKSB7XG4gICAgaWYgKHRva2VuLnJlYXNvbikge1xuICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbChtZXNzYWdlKTtcbiAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudGhyb3dJZlJlcXVlc3RlZCA9IGZ1bmN0aW9uIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIHRocm93IHRoaXMucmVhc29uO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gKi9cbkNhbmNlbFRva2VuLnNvdXJjZSA9IGZ1bmN0aW9uIHNvdXJjZSgpIHtcbiAgdmFyIGNhbmNlbDtcbiAgdmFyIHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICBjYW5jZWwgPSBjO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB0b2tlbjogdG9rZW4sXG4gICAgY2FuY2VsOiBjYW5jZWxcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsVG9rZW47XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzXG4vLyBtb2R1bGUgaWQgPSAyNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanNcbi8vIG1vZHVsZSBpZCA9IDI3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=